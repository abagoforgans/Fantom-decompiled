contract main {




// =====================  Runtime code  =====================


#
#  - withdraw(uint256 arg1)
#  - adjustKashiPairRatios(uint256[] arg1)
#  - harvest()
#
const apiVersion = '', 0

const delegatedAssets = 0


array of uint256 metadataURI;
uint8 stor1;
address healthCheckAddress; offset 8
address vaultAddress;
address strategistAddress;
address rewardsAddress;
address keeperAddress;
address wantAddress;
uint256 minReportDelay;
uint256 maxReportDelay;
uint256 profitFactor;
uint256 debtThreshold;
uint8 stor11;
uint8 stor11; offset 8
address bentoBoxAddress; offset 16
array of struct kashiPairs;
uint256 dustThreshold;
array of address stor14;
array of uint256 name;
array of uint256 stor101051993584849178915136821395265346177868384823507754984078593667947067386056;

function metadataURI() payable {
    return metadataURI[0 len metadataURI.length]
}

function name() payable {
    return name[0 len name.length].field_0
}

function debtThreshold() payable {
    return debtThreshold
}

function want() payable {
    return wantAddress
}

function strategist() payable {
    return strategistAddress
}

function maxReportDelay() payable {
    return maxReportDelay
}

function emergencyExit() payable {
    return bool(uint8(stor11.field_0))
}

function doHealthCheck() payable {
    return bool(stor1)
}

function bentoBox() payable {
    return bentoBoxAddress
}

function kashiPairs(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < kashiPairs.length
    return kashiPairs[arg1].field_0, kashiPairs[arg1].field_256
}

function profitFactor() payable {
    return profitFactor
}

function minReportDelay() payable {
    return minReportDelay
}

function rewards() payable {
    return rewardsAddress
}

function keeper() payable {
    return keeperAddress
}

function healthCheck() payable {
    return healthCheckAddress
}

function dustThreshold() payable {
    return dustThreshold
}

function vault() payable {
    return vaultAddress
}

function _fallback() payable {
    revert
}

function tendTrigger(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    return 0
}

function ethToWant(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    return arg1
}

function setDustThreshold(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    dustThreshold = arg1
}

function setProfitFactor(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    profitFactor = arg1
    emit UpdatedProfitFactor(arg1);
}

function setDebtThreshold(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    debtThreshold = arg1
    emit UpdatedDebtThreshold(arg1);
}

function setMinReportDelay(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    minReportDelay = arg1
    emit UpdatedMinReportDelay(arg1);
}

function setMaxReportDelay(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    maxReportDelay = arg1
    emit UpdatedMaxReportDelay(arg1);
}

function setKeeper(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    require arg1
    keeperAddress = arg1
    emit UpdatedKeeper(arg1);
}

function setStrategist(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    require arg1
    strategistAddress = arg1
    emit UpdatedStrategist(arg1);
}

function setDoHealthCheck(bool arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.management() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    stor1 = uint8(arg1)
}

function setHealthCheck(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.management() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    healthCheckAddress = arg1
}

function setRewards(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if strategistAddress != msg.sender:
        revert with 0, '!strategist'
    require arg1
    require ext_code.size(vaultAddress)
    call vaultAddress.approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args rewardsAddress, 0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    rewardsAddress = arg1
    require ext_code.size(vaultAddress)
    call vaultAddress.approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args address(arg1), -1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    emit UpdatedRewards(arg1);
}

function setMetadataURI(string arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    require arg1.length <= test266151307()
    require arg1 + arg1.length + 36 <= calldata.size
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, '!authorized'
    metadataURI.length = (2 * arg1.length) + 1
    s = 0
    idx = arg1 + 36
    while arg1 + arg1.length + 36 > idx:
        metadataURI[s] = cd[idx]
        s = s + 1
        idx = idx + 32
        continue 
    idx = Mask(251, 0, arg1.length + 31) >> 5
    while metadataURI.length + 31 / 32 > idx:
        metadataURI[idx] = 0
        idx = idx + 1
        continue 
    emit UpdatedMetadataURI(Array(len=arg1.length, data=arg1[all]));
}

function setPath(address[] arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    require arg1.length <= test266151307()
    require arg1 + (32 * arg1.length) + 36 <= calldata.size
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.governance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != msg.sender:
        revert with 0, '!authorized'
    stor14.length = arg1.length
    if not arg1.length:
        idx = 0
        while stor14.length > idx:
            stor14[idx] = 0
            idx = idx + 1
            continue 
    else:
        s = 0
        idx = arg1 + 36
        while arg1 + (32 * arg1.length) + 36 > idx:
            stor14[s] = address(cd[idx])
            s = s + 1
            idx = idx + 32
            continue 
        idx = Mask(251, 0, (32 * arg1.length) + 31) >> 5
        while stor14.length > idx:
            stor14[idx] = 0
            idx = idx + 1
            continue 
}

function addKashiPair(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.governance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != msg.sender:
        revert with 0, '!authorized'
    require 5 > kashiPairs.length
    require ext_code.size(arg1)
    staticcall arg1.0x6b2ace87 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_call.return_data[12 len 20] == bentoBoxAddress
    require ext_code.size(arg1)
    staticcall arg1.asset() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_call.return_data[12 len 20] == wantAddress
    idx = 0
    while idx < kashiPairs.length:
        mem[0] = 12
        require kashiPairs[idx].field_0 != arg1
        idx = idx + 1
        continue 
    kashiPairs.length++
    kashiPairs[kashiPairs.length].field_0 = arg1
    storDF69[stor12.length] = arg2
}

function setEmergencyExit() payable {
    if strategistAddress != msg.sender:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != msg.sender:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.guardian() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != msg.sender:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.management() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != msg.sender:
                    revert with 0, '!authorized'
    uint8(stor11.field_0) = 1
    require ext_code.size(vaultAddress)
    call vaultAddress.revokeStrategy() with:
         gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    emit EmergencyExitEnabled()
}

function cloneKashiLender(address arg1, address arg2, address arg3, address arg4, address arg5, address[] arg6, uint256[] arg7, string arg8) payable {
    require calldata.size - 4 >= 256
    require arg1 == arg1
    require arg2 == arg2
    require arg3 == arg3
    require arg4 == arg4
    require arg5 == arg5
    require arg6 <= test266151307()
    require arg6 + 35 < calldata.size
    require arg6.length <= test266151307()
    require (32 * arg6.length) + 128 >= 96 and (32 * arg6.length) + 128 <= test266151307()
    require calldata.size >= arg6 + (32 * arg6.length) + 36
    idx = 0
    s = arg6 + 36
    t = 128
    while idx < arg6.length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require arg7 <= test266151307()
    require arg7 + 35 < calldata.size
    require arg7.length <= test266151307()
    require (32 * arg7.length) + 160 >= 128 and (32 * arg6.length) + (32 * arg7.length) + 160 <= test266151307()
    mem[(32 * arg6.length) + 128] = arg7.length
    require calldata.size >= arg7 + (32 * arg7.length) + 36
    idx = 0
    s = arg7 + 36
    t = (32 * arg6.length) + 160
    while idx < arg7.length:
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require arg8 <= test266151307()
    require arg8 + 35 < calldata.size
    require arg8.length <= test266151307()
    require ceil32(arg8.length) + 192 >= 160 and (32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + 192 <= test266151307()
    require arg8 + arg8.length + 36 <= calldata.size
    mem[(32 * arg6.length) + (32 * arg7.length) + 192 len arg8.length] = arg8[all]
    mem[(32 * arg6.length) + (32 * arg7.length) + arg8.length + 192] = 0
    require uint8(stor11.field_8)
    create contract with 0 wei
                    code: 0x3d602d80600a3d3981f3363d3d373d3d3d363d73, Mask(160, 96, this.address) >> 96, 0x5af43d82803e903d91602b57fd5bf3
    mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + 192] = 0xc812daa900000000000000000000000000000000000000000000000000000000
    idx = 0
    s = 128
    t = (32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + 484
    while idx < arg6.length:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[(64 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + 484] = arg7.length
    mem[(64 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + 516 len 32 * arg7.length] = mem[(32 * arg6.length) + 160 len 32 * arg7.length]
    mem[(64 * arg6.length) + (64 * arg7.length) + ceil32(arg8.length) + 516] = arg8.length
    mem[(64 * arg6.length) + (64 * arg7.length) + ceil32(arg8.length) + 548 len ceil32(arg8.length)] = arg8[all], mem[(32 * arg6.length) + (32 * arg7.length) + arg8.length + 192 len ceil32(arg8.length) - arg8.length]
    if ceil32(arg8.length) > arg8.length:
        mem[arg8.length + (64 * arg6.length) + (64 * arg7.length) + ceil32(arg8.length) + 548] = 0
    require ext_code.size(address(create.new_address))
    call address(create.new_address).0xc812daa9 with:
         gas gas_remaining wei
        args address(arg1), address(arg2), address(arg3), address(arg4), address(arg5), Array(len=arg6.length, data=mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + 484 len (32 * arg6.length) + ceil32(arg8.length) + (32 * arg7.length) + 64]), (32 * arg6.length) + 288, (32 * arg6.length) + (32 * arg7.length) + 320
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    emit Cloned(address(create.new_address));
    return address(create.new_address)
}

function sweep(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.governance() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != msg.sender:
        revert with 0, '!authorized'
    if wantAddress == arg1:
        revert with 0, '!want'
    if vaultAddress == arg1:
        revert with 0, '!shares'
    idx = 0
    while idx < ext_call.return_data[0]:
        require idx < ext_call.return_data[0]
        if arg1 == mem[(32 * idx) + 140 len 20]:
            revert with 0, '!protected'
        idx = idx + 1
        continue 
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.governance() with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[(2 * ceil32(return_data.size)) + 100] = this.address
    require ext_code.size(arg1)
    staticcall arg1.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[(4 * ceil32(return_data.size)) + 132] = address(ext_call.return_data[0])
    mem[(4 * ceil32(return_data.size)) + 164] = ext_call.return_data[0]
    mem[(4 * ceil32(return_data.size)) + 96] = 68
    mem[(4 * ceil32(return_data.size)) + 132 len 28] = address(ext_call.return_data[0]) << 64
    mem[(4 * ceil32(return_data.size)) + 128 len 4] = unknown_0xa9059cbb(?????)
    mem[(4 * ceil32(return_data.size)) + 196] = 32
    mem[(4 * ceil32(return_data.size)) + 228] = 'SafeERC20: low-level call failed'
    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(arg1):
        revert with 0, 'Address: call to non-contract'
    if not ext_code.hash(arg1):
        revert with 0, 'Address: call to non-contract'
    mem[(4 * ceil32(return_data.size)) + 260 len 96] = unknown_0xa9059cbb(?????), address(ext_call.return_data[0]) << 64, 0, ext_call.return_data[0], 0
    mem[(4 * ceil32(return_data.size)) + 328] = 0
    call arg1 with:
       funct Mask(32, 224, unknown_0xa9059cbb(?????), address(ext_call.return_data[0]) << 64, 0, ext_call.return_data[0], 0) >> 224
         gas gas_remaining wei
        args (Mask(512, -288, unknown_0xa9059cbb(?????), address(ext_call.return_data[0]) << 64, 0, ext_call.return_data[0], 0) << 288)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require mem[128] == bool(mem[128])
            if not mem[128]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[(4 * ceil32(return_data.size)) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[(4 * ceil32(return_data.size)) + 292] == bool(mem[(4 * ceil32(return_data.size)) + 292])
            if not mem[(4 * ceil32(return_data.size)) + 292]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
}

function migrate(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require msg.sender == vaultAddress
    require ext_code.size(arg1)
    staticcall arg1.0xfbfa77cf with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_call.return_data[12 len 20] == vaultAddress
    idx = 0
    while idx < kashiPairs.length:
        _86 = mem[64]
        mem[64] = mem[64] + 64
        mem[_86] = 0
        mem[_86 + 32] = 0
        mem[0] = 12
        _89 = mem[64]
        mem[64] = mem[64] + 64
        mem[_89] = kashiPairs[idx].field_0
        mem[_89 + 32] = kashiPairs[idx].field_256
        mem[0] = 12
        mem[mem[64] + 4] = this.address
        require ext_code.size(kashiPairs[idx].field_0)
        staticcall kashiPairs[idx].field_0.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _97 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _100 = mem[_97]
        mem[mem[64] + 4] = arg1
        mem[mem[64] + 36] = _100
        require ext_code.size(kashiPairs[idx].field_0)
        call kashiPairs[idx].field_0.0xa9059cbb with:
             gas gas_remaining wei
            args address(arg1), _100
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _104 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_104] == bool(mem[_104])
        idx = idx + 1
        continue 
    mem[mem[64] + 4] = this.address
    require ext_code.size(wantAddress)
    staticcall wantAddress.0x70a08231 with:
            gas gas_remaining wei
           args address(this.address)
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _92 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _94 = mem[_92]
    _96 = mem[64]
    mem[mem[64] + 36] = arg1
    mem[mem[64] + 68] = _94
    _98 = mem[64]
    mem[mem[64]] = 68
    mem[mem[64] + 32 len 4] = unknown_0xa9059cbb(?????)
    mem[64] = mem[64] + 164
    mem[_96 + 100] = 32
    mem[_96 + 132] = 'SafeERC20: low-level call failed'
    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(wantAddress):
        revert with 0, 'Address: call to non-contract'
    if not ext_code.hash(wantAddress):
        revert with 0, 'Address: call to non-contract'
    _108 = mem[_98]
    mem[_96 + 164 len ceil32(mem[_98])] = mem[_98 + 32 len ceil32(mem[_98])]
    if ceil32(_108) > _108:
        mem[_108 + _96 + 164] = 0
    call wantAddress with:
         gas gas_remaining wei
        args mem[_96 + 168 len _108 - 4]
    if not return_data.size:
        if not ext_call.success:
            if mem[96]:
                revert with memory
                  from 128
                   len mem[96]
            revert with 0, 'SafeERC20: low-level call failed'
        if mem[96]:
            require mem[96] >= 32
            require mem[128] == bool(mem[128])
            if not mem[128]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[_96 + 196 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[_96 + 196] == bool(mem[_96 + 196])
            if not mem[_96 + 196]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
}

function kashiPairEstimatedAssets(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < kashiPairs.length
    require ext_code.size(kashiPairs[arg1].field_0)
    staticcall kashiPairs[arg1].field_0.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(kashiPairs[arg1].field_0)
    staticcall kashiPairs[arg1].field_0.totalAsset() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    require bool((2 * ceil32(return_data.size)) + 352 <= test266151307())
    require ext_call.return_data[0] == ext_call.return_data[16 len 16]
    require ext_call.return_data[32] == ext_call.return_data[48 len 16]
    require ext_code.size(kashiPairs[arg1].field_0)
    staticcall kashiPairs[arg1].field_0.totalBorrow() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    require bool((4 * ceil32(return_data.size)) + 480 <= test266151307())
    require ext_call.return_data[0] == ext_call.return_data[16 len 16]
    require ext_call.return_data[32] == ext_call.return_data[48 len 16]
    if not ext_call.return_data[16 len 16]:
        if ext_call.return_data[16 len 16] < ext_call.return_data[16 len 16]:
            revert with 0, 'SafeMath: addition overflow'
        if not ext_call.return_data[0]:
            if not uint128(ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            if not 0 / uint128(ext_call.return_data[32]):
                return 0
            require ext_code.size(bentoBoxAddress)
            staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(this.address), 0 / uint128(ext_call.return_data[32]), 1
        else:
            if ext_call.return_data[16 len 16] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[16 len 16]:
                revert with 0, 'SafeMath: multiplication overflow'
            if not uint128(ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            if not uint128(ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[48 len 16]:
                return 0
            require ext_code.size(bentoBoxAddress)
            staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(this.address), uint128(ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[48 len 16], 1
    else:
        require ext_code.size(bentoBoxAddress)
        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(this.address), ext_call.return_data[0] << 128, 1
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] + ext_call.return_data[16 len 16] < ext_call.return_data[16 len 16]:
            revert with 0, 'SafeMath: addition overflow'
        if not ext_call.return_data[0]:
            if not uint128(ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            if not 0 / uint128(ext_call.return_data[32]):
                return 0
            require ext_code.size(bentoBoxAddress)
            staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(this.address), 0 / uint128(ext_call.return_data[32]), 1
        else:
            if (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[16 len 16] * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0] + ext_call.return_data[16 len 16]:
                revert with 0, 'SafeMath: multiplication overflow'
            if not uint128(ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero', 0
            if not (ext_call.return_data[0] * ext_call.return_data[0]) + (uint128(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[48 len 16]:
                return 0
            require ext_code.size(bentoBoxAddress)
            staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(this.address), (ext_call.return_data[0] * ext_call.return_data[0]) + (uint128(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[48 len 16], 1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function estimatedTotalAssets() payable {
    mem[100] = wantAddress
    mem[132] = this.address
    require ext_code.size(bentoBoxAddress)
    staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
            gas gas_remaining wei
           args wantAddress, this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    idx = 0
    s = mem[96]
    while idx < kashiPairs.length:
        _95 = mem[64]
        mem[64] = mem[64] + 64
        mem[_95] = 0
        mem[_95 + 32] = 0
        mem[0] = 12
        _98 = mem[64]
        mem[64] = mem[64] + 64
        mem[_98] = kashiPairs[idx].field_0
        mem[_98 + 32] = kashiPairs[idx].field_256
        mem[mem[64] + 4] = this.address
        require ext_code.size(kashiPairs[idx].field_0)
        staticcall kashiPairs[idx].field_0.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _107 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _110 = mem[_107]
        _116 = mem[64]
        mem[64] = mem[64] + 64
        mem[_116] = 0
        mem[_116 + 32] = 0
        require ext_code.size(kashiPairs[idx].field_0)
        staticcall kashiPairs[idx].field_0.totalAsset() with:
                gas gas_remaining wei
        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _121 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 64
        _124 = mem[64]
        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
        mem[64] = mem[64] + 64
        require mem[_121] == mem[_121 + 16 len 16]
        mem[_124] = mem[_121]
        require mem[_121 + 32] == mem[_121 + 48 len 16]
        mem[_124 + 32] = mem[_121 + 32]
        _129 = mem[64]
        mem[64] = mem[64] + 64
        mem[_129] = 0
        mem[_129 + 32] = 0
        require ext_code.size(kashiPairs[idx].field_0)
        staticcall kashiPairs[idx].field_0.totalBorrow() with:
                gas gas_remaining wei
        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _132 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 64
        _133 = mem[64]
        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
        mem[64] = mem[64] + 64
        require mem[_132] == mem[_132 + 16 len 16]
        mem[_133] = mem[_132]
        require mem[_132 + 32] == mem[_132 + 48 len 16]
        mem[_133 + 32] = mem[_132 + 32]
        _136 = mem[_133]
        if not mem[_133 + 16 len 16]:
            _139 = mem[_124]
            if mem[_124 + 16 len 16] < mem[_124 + 16 len 16]:
                revert with 0, 'SafeMath: addition overflow'
            _143 = mem[_124 + 32]
            if not _110:
                _148 = mem[64]
                mem[64] = mem[64] + 64
                mem[_148] = 26
                mem[_148 + 32] = 'SafeMath: division by zero'
                if uint128(_143):
                    if (0 / uint128(_143)) + s < s:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    s = (0 / uint128(_143)) + s
                    continue 
                _153 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _153 + 68] = mem[idx + _148 + 32]
                    idx = idx + 32
                    continue 
                mem[_153 + 94] = 0
                revert with memory
                  from mem[64]
                   len _153 + -mem[64] + 100
            if mem[_124 + 16 len 16] * _110 / _110 != mem[_124 + 16 len 16]:
                revert with 0, 'SafeMath: multiplication overflow'
            _152 = mem[64]
            mem[64] = mem[64] + 64
            mem[_152] = 26
            mem[_152 + 32] = 'SafeMath: division by zero'
            if uint128(_143):
                if (uint128(_139) * _110 / uint128(_143)) + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                s = (uint128(_139) * _110 / uint128(_143)) + s
                continue 
            _154 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _154 + 68] = mem[idx + _152 + 32]
                idx = idx + 32
                continue 
            mem[_154 + 94] = 0
            revert with memory
              from mem[64]
               len _154 + -mem[64] + 100
        mem[mem[64] + 4] = this.address
        mem[mem[64] + 36] = uint128(_136)
        mem[mem[64] + 68] = 1
        require ext_code.size(bentoBoxAddress)
        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(this.address), _136 << 128, 1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _140 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _142 = mem[_140]
        _145 = mem[_124]
        if mem[_140] + mem[_124 + 16 len 16] < mem[_124 + 16 len 16]:
            revert with 0, 'SafeMath: addition overflow'
        _149 = mem[_124 + 32]
        if not _110:
            _157 = mem[64]
            mem[64] = mem[64] + 64
            mem[_157] = 26
            mem[_157 + 32] = 'SafeMath: division by zero'
            if uint128(_149):
                if (0 / uint128(_149)) + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                s = (0 / uint128(_149)) + s
                continue 
            _162 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _162 + 68] = mem[idx + _157 + 32]
                idx = idx + 32
                continue 
            mem[_162 + 94] = 0
            revert with memory
              from mem[64]
               len _162 + -mem[64] + 100
        if (mem[_140] * _110) + (mem[_124 + 16 len 16] * _110) / _110 != mem[_140] + mem[_124 + 16 len 16]:
            revert with 0, 'SafeMath: multiplication overflow'
        _161 = mem[64]
        mem[64] = mem[64] + 64
        mem[_161] = 26
        mem[_161 + 32] = 'SafeMath: division by zero'
        if uint128(_149):
            if ((_142 * _110) + (uint128(_145) * _110) / uint128(_149)) + s < s:
                revert with 0, 'SafeMath: addition overflow'
            idx = idx + 1
            s = ((_142 * _110) + (uint128(_145) * _110) / uint128(_149)) + s
            continue 
        _165 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 26
        idx = 0
        while idx < 26:
            mem[idx + _165 + 68] = mem[idx + _161 + 32]
            idx = idx + 32
            continue 
        mem[_165 + 94] = 0
        revert with memory
          from mem[64]
           len _165 + -mem[64] + 100
    mem[mem[64] + 4] = this.address
    if not s:
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _106 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if mem[_106] < mem[_106]:
            revert with 0, 'SafeMath: addition overflow'
        mem[mem[64]] = mem[_106]
    else:
        mem[mem[64] + 36] = s
        mem[mem[64] + 68] = 1
        require ext_code.size(bentoBoxAddress)
        staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(this.address), s, 1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _102 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _105 = mem[_102]
        mem[mem[64] + 4] = this.address
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _112 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if _105 + mem[_112] < mem[_112]:
            revert with 0, 'SafeMath: addition overflow'
        mem[mem[64]] = _105 + mem[_112]
    return memory
      from mem[64]
       len 32
}

function isActive() payable {
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.strategies(address arg1) with:
            gas gas_remaining wei
           args this.address
    mem[96 len 288] = ext_call.return_data[0 len 288]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 288
    require bool(ceil32(return_data.size) + 384 <= test266151307())
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    mem[ceil32(return_data.size) + 128] = ext_call.return_data[32]
    mem[ceil32(return_data.size) + 160] = ext_call.return_data[64]
    mem[ceil32(return_data.size) + 192] = ext_call.return_data[96]
    mem[ceil32(return_data.size) + 224] = ext_call.return_data[128]
    mem[ceil32(return_data.size) + 256] = ext_call.return_data[160]
    mem[ceil32(return_data.size) + 288] = ext_call.return_data[192]
    mem[ceil32(return_data.size) + 320] = ext_call.return_data[224]
    mem[ceil32(return_data.size) + 352] = ext_call.return_data[256]
    if ext_call.return_data[64] > 0:
        return (ext_call.return_data[64] > 0)
    mem[ceil32(return_data.size) + 388] = wantAddress
    mem[ceil32(return_data.size) + 420] = this.address
    require ext_code.size(bentoBoxAddress)
    staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
            gas gas_remaining wei
           args wantAddress, this.address
    mem[ceil32(return_data.size) + 384] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 384
    require return_data.size >= 32
    idx = 0
    s = mem[ceil32(return_data.size) + 384]
    while idx < kashiPairs.length:
        _111 = mem[64]
        mem[64] = mem[64] + 64
        mem[_111] = 0
        mem[_111 + 32] = 0
        mem[0] = 12
        _114 = mem[64]
        mem[64] = mem[64] + 64
        mem[_114] = kashiPairs[idx].field_0
        mem[_114 + 32] = kashiPairs[idx].field_256
        mem[mem[64] + 4] = this.address
        require ext_code.size(kashiPairs[idx].field_0)
        staticcall kashiPairs[idx].field_0.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _123 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _126 = mem[_123]
        _132 = mem[64]
        mem[64] = mem[64] + 64
        mem[_132] = 0
        mem[_132 + 32] = 0
        require ext_code.size(kashiPairs[idx].field_0)
        staticcall kashiPairs[idx].field_0.totalAsset() with:
                gas gas_remaining wei
        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _136 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 64
        _140 = mem[64]
        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
        mem[64] = mem[64] + 64
        require mem[_136] == mem[_136 + 16 len 16]
        mem[_140] = mem[_136]
        require mem[_136 + 32] == mem[_136 + 48 len 16]
        mem[_140 + 32] = mem[_136 + 32]
        _145 = mem[64]
        mem[64] = mem[64] + 64
        mem[_145] = 0
        mem[_145 + 32] = 0
        require ext_code.size(kashiPairs[idx].field_0)
        staticcall kashiPairs[idx].field_0.totalBorrow() with:
                gas gas_remaining wei
        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _148 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 64
        _149 = mem[64]
        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
        mem[64] = mem[64] + 64
        require mem[_148] == mem[_148 + 16 len 16]
        mem[_149] = mem[_148]
        require mem[_148 + 32] == mem[_148 + 48 len 16]
        mem[_149 + 32] = mem[_148 + 32]
        _152 = mem[_149]
        if not mem[_149 + 16 len 16]:
            _155 = mem[_140]
            if mem[_140 + 16 len 16] < mem[_140 + 16 len 16]:
                revert with 0, 'SafeMath: addition overflow'
            _159 = mem[_140 + 32]
            if not _126:
                _164 = mem[64]
                mem[64] = mem[64] + 64
                mem[_164] = 26
                mem[_164 + 32] = 'SafeMath: division by zero'
                if uint128(_159):
                    if (0 / uint128(_159)) + s < s:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    s = (0 / uint128(_159)) + s
                    continue 
                _169 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _169 + 68] = mem[idx + _164 + 32]
                    idx = idx + 32
                    continue 
                mem[_169 + 94] = 0
                revert with memory
                  from mem[64]
                   len _169 + -mem[64] + 100
            if mem[_140 + 16 len 16] * _126 / _126 != mem[_140 + 16 len 16]:
                revert with 0, 'SafeMath: multiplication overflow'
            _168 = mem[64]
            mem[64] = mem[64] + 64
            mem[_168] = 26
            mem[_168 + 32] = 'SafeMath: division by zero'
            if uint128(_159):
                if (uint128(_155) * _126 / uint128(_159)) + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                s = (uint128(_155) * _126 / uint128(_159)) + s
                continue 
            _170 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _170 + 68] = mem[idx + _168 + 32]
                idx = idx + 32
                continue 
            mem[_170 + 94] = 0
            revert with memory
              from mem[64]
               len _170 + -mem[64] + 100
        mem[mem[64] + 4] = this.address
        mem[mem[64] + 36] = uint128(_152)
        mem[mem[64] + 68] = 1
        require ext_code.size(bentoBoxAddress)
        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(this.address), _152 << 128, 1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _156 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _158 = mem[_156]
        _161 = mem[_140]
        if mem[_156] + mem[_140 + 16 len 16] < mem[_140 + 16 len 16]:
            revert with 0, 'SafeMath: addition overflow'
        _165 = mem[_140 + 32]
        if not _126:
            _173 = mem[64]
            mem[64] = mem[64] + 64
            mem[_173] = 26
            mem[_173 + 32] = 'SafeMath: division by zero'
            if uint128(_165):
                if (0 / uint128(_165)) + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                s = (0 / uint128(_165)) + s
                continue 
            _178 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _178 + 68] = mem[idx + _173 + 32]
                idx = idx + 32
                continue 
            mem[_178 + 94] = 0
            revert with memory
              from mem[64]
               len _178 + -mem[64] + 100
        if (mem[_156] * _126) + (mem[_140 + 16 len 16] * _126) / _126 != mem[_156] + mem[_140 + 16 len 16]:
            revert with 0, 'SafeMath: multiplication overflow'
        _177 = mem[64]
        mem[64] = mem[64] + 64
        mem[_177] = 26
        mem[_177 + 32] = 'SafeMath: division by zero'
        if uint128(_165):
            if ((_158 * _126) + (uint128(_161) * _126) / uint128(_165)) + s < s:
                revert with 0, 'SafeMath: addition overflow'
            idx = idx + 1
            s = ((_158 * _126) + (uint128(_161) * _126) / uint128(_165)) + s
            continue 
        _181 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 26
        idx = 0
        while idx < 26:
            mem[idx + _181 + 68] = mem[idx + _177 + 32]
            idx = idx + 32
            continue 
        mem[_181 + 94] = 0
        revert with memory
          from mem[64]
           len _181 + -mem[64] + 100
    mem[mem[64] + 4] = this.address
    if not s:
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _122 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if mem[_122] < mem[_122]:
            revert with 0, 'SafeMath: addition overflow'
        mem[mem[64]] = mem[_122] > 0
    else:
        mem[mem[64] + 36] = s
        mem[mem[64] + 68] = 1
        require ext_code.size(bentoBoxAddress)
        staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(this.address), s, 1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _118 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _121 = mem[_118]
        mem[mem[64] + 4] = this.address
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _128 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if _121 + mem[_128] < mem[_128]:
            revert with 0, 'SafeMath: addition overflow'
        mem[mem[64]] = _121 + mem[_128] > 0
    return memory
      from mem[64]
       len 32
}

function harvestTrigger(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    mem[96] = 0
    mem[128] = 0
    mem[160] = 0
    mem[192] = 0
    mem[224] = 0
    mem[256] = 0
    mem[288] = 0
    mem[320] = 0
    mem[352] = 0
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.strategies(address arg1) with:
            gas gas_remaining wei
           args this.address
    mem[384 len 288] = ext_call.return_data[0 len 288]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 288
    require bool(ceil32(return_data.size) + 672 <= test266151307())
    mem[ceil32(return_data.size) + 384] = ext_call.return_data[0]
    mem[ceil32(return_data.size) + 416] = ext_call.return_data[32]
    mem[ceil32(return_data.size) + 448] = ext_call.return_data[64]
    mem[ceil32(return_data.size) + 480] = ext_call.return_data[96]
    mem[ceil32(return_data.size) + 512] = ext_call.return_data[128]
    mem[ceil32(return_data.size) + 544] = ext_call.return_data[160]
    mem[ceil32(return_data.size) + 576] = ext_call.return_data[192]
    mem[ceil32(return_data.size) + 608] = ext_call.return_data[224]
    mem[ceil32(return_data.size) + 640] = ext_call.return_data[256]
    if 0 == ext_call.return_data[32]:
        return 0
    mem[ceil32(return_data.size) + 672] = 30
    mem[ceil32(return_data.size) + 704] = 'SafeMath: subtraction overflow'
    if ext_call.return_data[160] > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow', 0
    if block.timestamp - ext_call.return_data[160] < minReportDelay:
        return 0
    mem[ceil32(return_data.size) + 736] = 30
    mem[ceil32(return_data.size) + 768] = 'SafeMath: subtraction overflow'
    if ext_call.return_data[160] > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow', 0
    if block.timestamp - ext_call.return_data[160] >= maxReportDelay:
        return 1
    require ext_code.size(vaultAddress)
    staticcall vaultAddress.debtOutstanding() with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 800] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > debtThreshold:
        return 1
    mem[(2 * ceil32(return_data.size)) + 804] = wantAddress
    mem[(2 * ceil32(return_data.size)) + 836] = this.address
    require ext_code.size(bentoBoxAddress)
    staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
            gas gas_remaining wei
           args wantAddress, this.address
    mem[(2 * ceil32(return_data.size)) + 800] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[64] = (4 * ceil32(return_data.size)) + 800
    require return_data.size >= 32
    idx = 0
    s = mem[(2 * ceil32(return_data.size)) + 800]
    while idx < kashiPairs.length:
        _208 = mem[64]
        mem[64] = mem[64] + 64
        mem[_208] = 0
        mem[_208 + 32] = 0
        mem[0] = 12
        _211 = mem[64]
        mem[64] = mem[64] + 64
        mem[_211] = kashiPairs[idx].field_0
        mem[_211 + 32] = kashiPairs[idx].field_256
        mem[mem[64] + 4] = this.address
        require ext_code.size(kashiPairs[idx].field_0)
        staticcall kashiPairs[idx].field_0.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _224 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _227 = mem[_224]
        _233 = mem[64]
        mem[64] = mem[64] + 64
        mem[_233] = 0
        mem[_233 + 32] = 0
        require ext_code.size(kashiPairs[idx].field_0)
        staticcall kashiPairs[idx].field_0.totalAsset() with:
                gas gas_remaining wei
        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _238 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 64
        _243 = mem[64]
        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
        mem[64] = mem[64] + 64
        require mem[_238] == mem[_238 + 16 len 16]
        mem[_243] = mem[_238]
        require mem[_238 + 32] == mem[_238 + 48 len 16]
        mem[_243 + 32] = mem[_238 + 32]
        _274 = mem[64]
        mem[64] = mem[64] + 64
        mem[_274] = 0
        mem[_274 + 32] = 0
        require ext_code.size(kashiPairs[idx].field_0)
        staticcall kashiPairs[idx].field_0.totalBorrow() with:
                gas gas_remaining wei
        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _280 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 64
        _293 = mem[64]
        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
        mem[64] = mem[64] + 64
        require mem[_280] == mem[_280 + 16 len 16]
        mem[_293] = mem[_280]
        require mem[_280 + 32] == mem[_280 + 48 len 16]
        mem[_293 + 32] = mem[_280 + 32]
        _316 = mem[_293]
        if not mem[_293 + 16 len 16]:
            _323 = mem[_243]
            if mem[_243 + 16 len 16] < mem[_243 + 16 len 16]:
                revert with 0, 'SafeMath: addition overflow'
            _330 = mem[_243 + 32]
            if not _227:
                _335 = mem[64]
                mem[64] = mem[64] + 64
                mem[_335] = 26
                mem[_335 + 32] = 'SafeMath: division by zero'
                if uint128(_330):
                    if (0 / uint128(_330)) + s < s:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    s = (0 / uint128(_330)) + s
                    continue 
                _340 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _340 + 68] = mem[idx + _335 + 32]
                    idx = idx + 32
                    continue 
                mem[_340 + 94] = 0
                revert with memory
                  from mem[64]
                   len _340 + -mem[64] + 100
            if mem[_243 + 16 len 16] * _227 / _227 != mem[_243 + 16 len 16]:
                revert with 0, 'SafeMath: multiplication overflow'
            _339 = mem[64]
            mem[64] = mem[64] + 64
            mem[_339] = 26
            mem[_339 + 32] = 'SafeMath: division by zero'
            if uint128(_330):
                if (uint128(_323) * _227 / uint128(_330)) + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                s = (uint128(_323) * _227 / uint128(_330)) + s
                continue 
            _341 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _341 + 68] = mem[idx + _339 + 32]
                idx = idx + 32
                continue 
            mem[_341 + 94] = 0
            revert with memory
              from mem[64]
               len _341 + -mem[64] + 100
        mem[mem[64] + 4] = this.address
        mem[mem[64] + 36] = uint128(_316)
        mem[mem[64] + 68] = 1
        require ext_code.size(bentoBoxAddress)
        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(this.address), _316 << 128, 1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _326 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _329 = mem[_326]
        _332 = mem[_243]
        if mem[_326] + mem[_243 + 16 len 16] < mem[_243 + 16 len 16]:
            revert with 0, 'SafeMath: addition overflow'
        _336 = mem[_243 + 32]
        if not _227:
            _344 = mem[64]
            mem[64] = mem[64] + 64
            mem[_344] = 26
            mem[_344 + 32] = 'SafeMath: division by zero'
            if uint128(_336):
                if (0 / uint128(_336)) + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                s = (0 / uint128(_336)) + s
                continue 
            _349 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _349 + 68] = mem[idx + _344 + 32]
                idx = idx + 32
                continue 
            mem[_349 + 94] = 0
            revert with memory
              from mem[64]
               len _349 + -mem[64] + 100
        if (mem[_326] * _227) + (mem[_243 + 16 len 16] * _227) / _227 != mem[_326] + mem[_243 + 16 len 16]:
            revert with 0, 'SafeMath: multiplication overflow'
        _348 = mem[64]
        mem[64] = mem[64] + 64
        mem[_348] = 26
        mem[_348 + 32] = 'SafeMath: division by zero'
        if uint128(_336):
            if ((_329 * _227) + (uint128(_332) * _227) / uint128(_336)) + s < s:
                revert with 0, 'SafeMath: addition overflow'
            idx = idx + 1
            s = ((_329 * _227) + (uint128(_332) * _227) / uint128(_336)) + s
            continue 
        _352 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 26
        idx = 0
        while idx < 26:
            mem[idx + _352 + 68] = mem[idx + _348 + 32]
            idx = idx + 32
            continue 
        mem[_352 + 94] = 0
        revert with memory
          from mem[64]
           len _352 + -mem[64] + 100
    mem[mem[64] + 4] = this.address
    if not s:
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _223 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _226 = mem[_223]
        if mem[_223] < mem[_223]:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold + mem[_223] < mem[_223]:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold + mem[_223] < mem[ceil32(return_data.size) + 576]:
            return 1
        if mem[_223] <= mem[ceil32(return_data.size) + 576]:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _251 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if mem[_251] < mem[_251]:
                revert with 0, 'SafeMath: addition overflow'
            if not profitFactor:
                mem[mem[64]] = 0 < mem[_251]
            else:
                if arg1 * profitFactor / profitFactor != arg1:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[mem[64]] = arg1 * profitFactor < mem[_251]
        else:
            _247 = mem[ceil32(return_data.size) + 576]
            _248 = mem[64]
            mem[64] = mem[64] + 64
            mem[_248] = 30
            mem[_248 + 32] = 'SafeMath: subtraction overflow'
            if _247 > _226:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _273 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if _226 - _247 + mem[_273] < mem[_273]:
                revert with 0, 'SafeMath: addition overflow'
            if not profitFactor:
                mem[mem[64]] = 0 < _226 - _247 + mem[_273]
            else:
                if arg1 * profitFactor / profitFactor != arg1:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[mem[64]] = arg1 * profitFactor < _226 - _247 + mem[_273]
    else:
        mem[mem[64] + 36] = s
        mem[mem[64] + 68] = 1
        require ext_code.size(bentoBoxAddress)
        staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(this.address), s, 1
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _219 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _222 = mem[_219]
        mem[mem[64] + 4] = this.address
        require ext_code.size(wantAddress)
        staticcall wantAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _229 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _231 = mem[_229]
        if _222 + mem[_229] < mem[_229]:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold < 0:
            revert with 0, 'SafeMath: addition overflow'
        if debtThreshold + _222 + mem[_229] < mem[ceil32(return_data.size) + 576]:
            return 1
        if _222 + mem[_229] <= mem[ceil32(return_data.size) + 576]:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _268 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if mem[_268] < mem[_268]:
                revert with 0, 'SafeMath: addition overflow'
            if not profitFactor:
                mem[mem[64]] = 0 < mem[_268]
            else:
                if arg1 * profitFactor / profitFactor != arg1:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[mem[64]] = arg1 * profitFactor < mem[_268]
        else:
            _262 = mem[ceil32(return_data.size) + 576]
            _263 = mem[64]
            mem[64] = mem[64] + 64
            mem[_263] = 30
            mem[_263 + 32] = 'SafeMath: subtraction overflow'
            if _262 > _222 + _231:
                revert with 0, 'SafeMath: subtraction overflow', 0
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.creditAvailable() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _291 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if _222 + _231 - _262 + mem[_291] < mem[_291]:
                revert with 0, 'SafeMath: addition overflow'
            if not profitFactor:
                mem[mem[64]] = 0 < _222 + _231 - _262 + mem[_291]
            else:
                if arg1 * profitFactor / profitFactor != arg1:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[mem[64]] = arg1 * profitFactor < _222 + _231 - _262 + mem[_291]
    return memory
      from mem[64]
       len 32
}

function initialize(address arg1, address arg2, address arg3, address arg4, address arg5, address[] arg6, uint256[] arg7, string arg8) payable {
    require calldata.size - 4 >= 256
    require arg1 == arg1
    require arg2 == arg2
    require arg3 == arg3
    require arg4 == arg4
    require arg5 == arg5
    require arg6 <= test266151307()
    require arg6 + 35 < calldata.size
    require arg6.length <= test266151307()
    require (32 * arg6.length) + 128 >= 96 and (32 * arg6.length) + 128 <= test266151307()
    mem[96] = arg6.length
    require calldata.size >= arg6 + (32 * arg6.length) + 36
    idx = 0
    s = arg6 + 36
    t = 128
    while idx < arg6.length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require arg7 <= test266151307()
    require arg7 + 35 < calldata.size
    require arg7.length <= test266151307()
    require (32 * arg7.length) + 160 >= 128 and (32 * arg6.length) + (32 * arg7.length) + 160 <= test266151307()
    mem[(32 * arg6.length) + 128] = arg7.length
    require calldata.size >= arg7 + (32 * arg7.length) + 36
    idx = 0
    s = arg7 + 36
    t = (32 * arg6.length) + 160
    while idx < arg7.length:
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require arg8 <= test266151307()
    require arg8 + 35 < calldata.size
    require arg8.length <= test266151307()
    require ceil32(arg8.length) + 192 >= 160 and (32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + 192 <= test266151307()
    mem[(32 * arg6.length) + (32 * arg7.length) + 160] = arg8.length
    require arg8 + arg8.length + 36 <= calldata.size
    mem[(32 * arg6.length) + (32 * arg7.length) + 192 len arg8.length] = arg8[all]
    mem[(32 * arg6.length) + (32 * arg7.length) + arg8.length + 192] = 0
    if wantAddress:
        revert with 0, 'Strategy already initialized'
    vaultAddress = arg1
    require ext_code.size(arg1)
    staticcall arg1.token() with:
            gas gas_remaining wei
    mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + 192] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    _8882 = Mask(8 * -ceil32(arg8.length) + arg8.length + 32, 0, 0), mem[(32 * arg6.length) + (32 * arg7.length) + arg8.length + 224 len -arg8.length + ceil32(arg8.length)]
    require Mask(8 * -ceil32(arg8.length) + arg8.length + 32, 0, 0), mem[(32 * arg6.length) + (32 * arg7.length) + arg8.length + 224 len -arg8.length + ceil32(arg8.length)] == Mask(8 * -ceil32(arg8.length) + arg8.length + 20, 0, 0), mem[(32 * arg6.length) + (32 * arg7.length) + arg8.length + 224 len -arg8.length + ceil32(arg8.length)]
    wantAddress = Mask(8 * -ceil32(arg8.length) + arg8.length + 20, 0, 0), mem[(32 * arg6.length) + (32 * arg7.length) + arg8.length + 224 len -arg8.length + ceil32(arg8.length)]
    mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + ceil32(return_data.size) + 196] = this.address
    mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + ceil32(return_data.size) + 228] = arg1
    require ext_code.size(address(_8882))
    staticcall address(_8882).0xdd62ed3e with:
            gas gas_remaining wei
           args address(this.address), arg1
    mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + ceil32(return_data.size) + 192] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0]:
        revert with 0, 'SafeERC20: approve from non-zero to non-zero allowance'
    mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 228] = arg1
    mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 260] = -1
    mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 192] = 68
    mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 224 len 4] = approve(address arg1, uint256 arg2)
    mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 292] = 32
    mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 324] = 'SafeERC20: low-level call failed'
    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(_8882)):
        revert with 0, 'Address: call to non-contract'
    if not ext_code.hash(address(_8882)):
        revert with 0, 'Address: call to non-contract'
    mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 356 len 96] = 0, address(arg1), -1, 0
    mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 424] = 0
    call address(_8882) with:
         gas gas_remaining wei
        args (Mask(512, -288, 0, address(arg1), -1, 0) << 288)
    if not return_data.size:
        if not ext_call.success:
            if arg6.length:
                revert with memory
                  from 128
                   len arg6.length
            revert with 0, 'SafeERC20: low-level call failed'
        if not arg6.length:
            strategistAddress = arg2
            rewardsAddress = arg3
            keeperAddress = arg4
            minReportDelay = 0
            maxReportDelay = 24 * 3600
            profitFactor = 100
            debtThreshold = 0
            mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 360] = arg3
            mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 392] = -1
            require ext_code.size(vaultAddress)
            call vaultAddress.approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(arg3), -1
            mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 356] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + 356
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            require not bentoBoxAddress
            require arg6.length <= 5
            require arg6.length == arg7.length
            if arg8.length:
                mem[0] = 15
                name[].field_0 = Array(len=arg8.length, data=arg8[all])
                bentoBoxAddress = arg5
                idx = 0
                while idx < arg6.length:
                    _26254 = mem[64]
                    mem[64] = mem[64] + 64
                    require idx < mem[96]
                    mem[_26254] = mem[(32 * idx) + 140 len 20]
                    require idx < mem[(32 * arg6.length) + 128]
                    mem[_26254 + 32] = mem[(32 * idx) + (32 * arg6.length) + 160]
                    kashiPairs.length++
                    mem[0] = 12
                    kashiPairs[kashiPairs.length].field_0 = mem[_26254 + 12 len 20]
                    kashiPairs[kashiPairs.length].field_256 = mem[_26254 + 32]
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.0x6b2ace87 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _26594 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_26594] == mem[_26594 + 12 len 20]
                    require mem[_26594 + 12 len 20] == arg5
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.asset() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _27826 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_27826] == mem[_27826 + 12 len 20]
                    require mem[_27826 + 12 len 20] == wantAddress
                    idx = idx + 1
                    continue 
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = arg5
                require ext_code.size(wantAddress)
                staticcall wantAddress.0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(this.address), arg5
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _26686 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_26686]:
                    revert with 0, 'SafeERC20: approve from non-zero to non-zero allowance'
                _27435 = mem[64]
                mem[mem[64] + 36] = arg5
                mem[mem[64] + 68] = -1
                _27732 = mem[64]
                mem[mem[64]] = 68
                mem[mem[64] + 32 len 4] = approve(address arg1, uint256 arg2)
                mem[64] = mem[64] + 164
                mem[_27435 + 100] = 32
                mem[_27435 + 132] = 'SafeERC20: low-level call failed'
                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                if not ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                _28418 = mem[_27732]
                mem[_27435 + 164 len ceil32(mem[_27732])] = mem[_27732 + 32 len ceil32(mem[_27732])]
                if ceil32(_28418) > _28418:
                    mem[_28418 + _27435 + 164] = 0
                call wantAddress with:
                     gas gas_remaining wei
                    args mem[_27435 + 168 len _28418 - 4]
                if not return_data.size:
                    if not ext_call.success:
                        if mem[96]:
                            revert with memory
                              from 128
                               len mem[96]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if mem[96]:
                        require mem[96] >= 32
                        require mem[128] == bool(mem[128])
                        if not mem[128]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                else:
                    mem[_27435 + 196 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        require mem[_27435 + 196] == bool(mem[_27435 + 196])
                        if not mem[_27435 + 196]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
            else:
                mem[64] = (32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + 420
                mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + 356] = 28
                mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + 388] = 'StrategyKashiMultiPairLender'
                mem[0] = 15
                bool(name.length) = 0
                name.length.field_1 = 28
                name.length.field_8 = 'StrategyKashiMultiPairLender' / 256
                idx = 0
                while name.length + 31 / 32 > idx:
                    name[idx].field_0 = 0
                    idx = idx + 1
                    continue 
                bentoBoxAddress = arg5
                idx = 0
                while idx < arg6.length:
                    _22043 = mem[64]
                    mem[64] = mem[64] + 64
                    require idx < mem[96]
                    mem[_22043] = mem[(32 * idx) + 140 len 20]
                    require idx < mem[(32 * arg6.length) + 128]
                    mem[_22043 + 32] = mem[(32 * idx) + (32 * arg6.length) + 160]
                    kashiPairs.length++
                    mem[0] = 12
                    kashiPairs[kashiPairs.length].field_0 = mem[_22043 + 12 len 20]
                    kashiPairs[kashiPairs.length].field_256 = mem[_22043 + 32]
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.0x6b2ace87 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _22508 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_22508] == mem[_22508 + 12 len 20]
                    require mem[_22508 + 12 len 20] == arg5
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.asset() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _23178 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_23178] == mem[_23178 + 12 len 20]
                    require mem[_23178 + 12 len 20] == wantAddress
                    idx = idx + 1
                    continue 
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = arg5
                require ext_code.size(wantAddress)
                staticcall wantAddress.0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(this.address), arg5
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _22599 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_22599]:
                    revert with 0, 'SafeERC20: approve from non-zero to non-zero allowance'
                _22852 = mem[64]
                mem[mem[64] + 36] = arg5
                mem[mem[64] + 68] = -1
                _22956 = mem[64]
                mem[mem[64]] = 68
                mem[mem[64] + 32 len 4] = approve(address arg1, uint256 arg2)
                mem[64] = mem[64] + 164
                mem[_22852 + 100] = 32
                mem[_22852 + 132] = 'SafeERC20: low-level call failed'
                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                if not ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                _23466 = mem[_22956]
                mem[_22852 + 164 len ceil32(mem[_22956])] = mem[_22956 + 32 len ceil32(mem[_22956])]
                if ceil32(_23466) > _23466:
                    mem[_23466 + _22852 + 164] = 0
                call wantAddress with:
                     gas gas_remaining wei
                    args mem[_22852 + 168 len _23466 - 4]
                if not return_data.size:
                    if not ext_call.success:
                        if mem[96]:
                            revert with memory
                              from 128
                               len mem[96]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if mem[96]:
                        require mem[96] >= 32
                        require mem[128] == bool(mem[128])
                        if not mem[128]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                else:
                    mem[_22852 + 196 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        require mem[_22852 + 196] == bool(mem[_22852 + 196])
                        if not mem[_22852 + 196]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
        else:
            require arg6.length >= 32
            require mem[128] == bool(mem[128])
            if not mem[128]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
            strategistAddress = arg2
            rewardsAddress = arg3
            keeperAddress = arg4
            minReportDelay = 0
            maxReportDelay = 24 * 3600
            profitFactor = 100
            debtThreshold = 0
            mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 360] = arg3
            mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 392] = -1
            require ext_code.size(vaultAddress)
            call vaultAddress.approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(arg3), -1
            mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 356] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + 356
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            require not bentoBoxAddress
            require arg6.length <= 5
            require arg6.length == arg7.length
            if arg8.length:
                mem[0] = 15
                name[].field_0 = Array(len=arg8.length, data=arg8[all])
                bentoBoxAddress = arg5
                idx = 0
                while idx < arg6.length:
                    _26262 = mem[64]
                    mem[64] = mem[64] + 64
                    require idx < mem[96]
                    mem[_26262] = mem[(32 * idx) + 140 len 20]
                    require idx < mem[(32 * arg6.length) + 128]
                    mem[_26262 + 32] = mem[(32 * idx) + (32 * arg6.length) + 160]
                    kashiPairs.length++
                    mem[0] = 12
                    kashiPairs[kashiPairs.length].field_0 = mem[_26262 + 12 len 20]
                    kashiPairs[kashiPairs.length].field_256 = mem[_26262 + 32]
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.0x6b2ace87 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _26596 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_26596] == mem[_26596 + 12 len 20]
                    require mem[_26596 + 12 len 20] == arg5
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.asset() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _27828 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_27828] == mem[_27828 + 12 len 20]
                    require mem[_27828 + 12 len 20] == wantAddress
                    idx = idx + 1
                    continue 
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = arg5
                require ext_code.size(wantAddress)
                staticcall wantAddress.0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(this.address), arg5
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _26704 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_26704]:
                    revert with 0, 'SafeERC20: approve from non-zero to non-zero allowance'
                _27439 = mem[64]
                mem[mem[64] + 36] = arg5
                mem[mem[64] + 68] = -1
                _27738 = mem[64]
                mem[mem[64]] = 68
                mem[mem[64] + 32 len 4] = approve(address arg1, uint256 arg2)
                mem[64] = mem[64] + 164
                mem[_27439 + 100] = 32
                mem[_27439 + 132] = 'SafeERC20: low-level call failed'
                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                if not ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                _28420 = mem[_27738]
                mem[_27439 + 164 len ceil32(mem[_27738])] = mem[_27738 + 32 len ceil32(mem[_27738])]
                if ceil32(_28420) > _28420:
                    mem[_28420 + _27439 + 164] = 0
                call wantAddress with:
                     gas gas_remaining wei
                    args mem[_27439 + 168 len _28420 - 4]
                if not return_data.size:
                    if not ext_call.success:
                        if mem[96]:
                            revert with memory
                              from 128
                               len mem[96]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if mem[96]:
                        require mem[96] >= 32
                        require mem[128] == bool(mem[128])
                        if not mem[128]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                else:
                    mem[_27439 + 196 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        require mem[_27439 + 196] == bool(mem[_27439 + 196])
                        if not mem[_27439 + 196]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
            else:
                mem[64] = (32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + 420
                mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + 356] = 28
                mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + 388] = 'StrategyKashiMultiPairLender'
                mem[0] = 15
                bool(name.length) = 0
                name.length.field_1 = 28
                name.length.field_8 = 'StrategyKashiMultiPairLender' / 256
                idx = 0
                while name.length + 31 / 32 > idx:
                    name[idx].field_0 = 0
                    idx = idx + 1
                    continue 
                bentoBoxAddress = arg5
                idx = 0
                while idx < arg6.length:
                    _22051 = mem[64]
                    mem[64] = mem[64] + 64
                    require idx < mem[96]
                    mem[_22051] = mem[(32 * idx) + 140 len 20]
                    require idx < mem[(32 * arg6.length) + 128]
                    mem[_22051 + 32] = mem[(32 * idx) + (32 * arg6.length) + 160]
                    kashiPairs.length++
                    mem[0] = 12
                    kashiPairs[kashiPairs.length].field_0 = mem[_22051 + 12 len 20]
                    kashiPairs[kashiPairs.length].field_256 = mem[_22051 + 32]
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.0x6b2ace87 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _22516 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_22516] == mem[_22516 + 12 len 20]
                    require mem[_22516 + 12 len 20] == arg5
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.asset() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _23182 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_23182] == mem[_23182 + 12 len 20]
                    require mem[_23182 + 12 len 20] == wantAddress
                    idx = idx + 1
                    continue 
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = arg5
                require ext_code.size(wantAddress)
                staticcall wantAddress.0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(this.address), arg5
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _22613 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_22613]:
                    revert with 0, 'SafeERC20: approve from non-zero to non-zero allowance'
                _22862 = mem[64]
                mem[mem[64] + 36] = arg5
                mem[mem[64] + 68] = -1
                _22968 = mem[64]
                mem[mem[64]] = 68
                mem[mem[64] + 32 len 4] = approve(address arg1, uint256 arg2)
                mem[64] = mem[64] + 164
                mem[_22862 + 100] = 32
                mem[_22862 + 132] = 'SafeERC20: low-level call failed'
                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                if not ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                _23470 = mem[_22968]
                mem[_22862 + 164 len ceil32(mem[_22968])] = mem[_22968 + 32 len ceil32(mem[_22968])]
                if ceil32(_23470) > _23470:
                    mem[_23470 + _22862 + 164] = 0
                call wantAddress with:
                     gas gas_remaining wei
                    args mem[_22862 + 168 len _23470 - 4]
                if not return_data.size:
                    if not ext_call.success:
                        if mem[96]:
                            revert with memory
                              from 128
                               len mem[96]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if mem[96]:
                        require mem[96] >= 32
                        require mem[128] == bool(mem[128])
                        if not mem[128]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                else:
                    mem[_22862 + 196 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        require mem[_22862 + 196] == bool(mem[_22862 + 196])
                        if not mem[_22862 + 196]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 356] = return_data.size
        mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 388 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if not return_data.size:
            strategistAddress = arg2
            rewardsAddress = arg3
            keeperAddress = arg4
            minReportDelay = 0
            maxReportDelay = 24 * 3600
            profitFactor = 100
            debtThreshold = 0
            mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 361] = arg3
            mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 393] = -1
            require ext_code.size(vaultAddress)
            call vaultAddress.approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(arg3), -1
            mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 357] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 357
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            require not bentoBoxAddress
            require arg6.length <= 5
            require arg6.length == arg7.length
            if arg8.length:
                mem[0] = 15
                name[].field_0 = Array(len=arg8.length, data=arg8[all])
                bentoBoxAddress = arg5
                idx = 0
                while idx < arg6.length:
                    _26270 = mem[64]
                    mem[64] = mem[64] + 64
                    require idx < mem[96]
                    mem[_26270] = mem[(32 * idx) + 140 len 20]
                    require idx < mem[(32 * arg6.length) + 128]
                    mem[_26270 + 32] = mem[(32 * idx) + (32 * arg6.length) + 160]
                    kashiPairs.length++
                    mem[0] = 12
                    kashiPairs[kashiPairs.length].field_0 = mem[_26270 + 12 len 20]
                    kashiPairs[kashiPairs.length].field_256 = mem[_26270 + 32]
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.0x6b2ace87 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _26598 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_26598] == mem[_26598 + 12 len 20]
                    require mem[_26598 + 12 len 20] == arg5
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.asset() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _27830 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_27830] == mem[_27830 + 12 len 20]
                    require mem[_27830 + 12 len 20] == wantAddress
                    idx = idx + 1
                    continue 
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = arg5
                require ext_code.size(wantAddress)
                staticcall wantAddress.0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(this.address), arg5
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _26722 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_26722]:
                    revert with 0, 'SafeERC20: approve from non-zero to non-zero allowance'
                _27443 = mem[64]
                mem[mem[64] + 36] = arg5
                mem[mem[64] + 68] = -1
                _27744 = mem[64]
                mem[mem[64]] = 68
                mem[mem[64] + 32 len 4] = approve(address arg1, uint256 arg2)
                mem[64] = mem[64] + 164
                mem[_27443 + 100] = 32
                mem[_27443 + 132] = 'SafeERC20: low-level call failed'
                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                if not ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                _28422 = mem[_27744]
                mem[_27443 + 164 len ceil32(mem[_27744])] = mem[_27744 + 32 len ceil32(mem[_27744])]
                if ceil32(_28422) > _28422:
                    mem[_28422 + _27443 + 164] = 0
                call wantAddress with:
                     gas gas_remaining wei
                    args mem[_27443 + 168 len _28422 - 4]
                if not return_data.size:
                    if not ext_call.success:
                        if mem[96]:
                            revert with memory
                              from 128
                               len mem[96]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if mem[96]:
                        require mem[96] >= 32
                        require mem[128] == bool(mem[128])
                        if not mem[128]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                else:
                    mem[_27443 + 196 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        require mem[_27443 + 196] == bool(mem[_27443 + 196])
                        if not mem[_27443 + 196]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
            else:
                mem[64] = (32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 421
                mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 357] = 28
                mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 389] = 'StrategyKashiMultiPairLender'
                mem[0] = 15
                bool(name.length) = 0
                name.length.field_1 = 28
                name.length.field_8 = 'StrategyKashiMultiPairLender' / 256
                idx = 0
                while name.length + 31 / 32 > idx:
                    name[idx].field_0 = 0
                    idx = idx + 1
                    continue 
                bentoBoxAddress = arg5
                idx = 0
                while idx < arg6.length:
                    _22059 = mem[64]
                    mem[64] = mem[64] + 64
                    require idx < mem[96]
                    mem[_22059] = mem[(32 * idx) + 140 len 20]
                    require idx < mem[(32 * arg6.length) + 128]
                    mem[_22059 + 32] = mem[(32 * idx) + (32 * arg6.length) + 160]
                    kashiPairs.length++
                    mem[0] = 12
                    kashiPairs[kashiPairs.length].field_0 = mem[_22059 + 12 len 20]
                    kashiPairs[kashiPairs.length].field_256 = mem[_22059 + 32]
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.0x6b2ace87 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _22524 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_22524] == mem[_22524 + 12 len 20]
                    require mem[_22524 + 12 len 20] == arg5
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.asset() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _23186 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_23186] == mem[_23186 + 12 len 20]
                    require mem[_23186 + 12 len 20] == wantAddress
                    idx = idx + 1
                    continue 
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = arg5
                require ext_code.size(wantAddress)
                staticcall wantAddress.0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(this.address), arg5
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _22627 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_22627]:
                    revert with 0, 'SafeERC20: approve from non-zero to non-zero allowance'
                _22872 = mem[64]
                mem[mem[64] + 36] = arg5
                mem[mem[64] + 68] = -1
                _22980 = mem[64]
                mem[mem[64]] = 68
                mem[mem[64] + 32 len 4] = approve(address arg1, uint256 arg2)
                mem[64] = mem[64] + 164
                mem[_22872 + 100] = 32
                mem[_22872 + 132] = 'SafeERC20: low-level call failed'
                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                if not ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                _23474 = mem[_22980]
                mem[_22872 + 164 len ceil32(mem[_22980])] = mem[_22980 + 32 len ceil32(mem[_22980])]
                if ceil32(_23474) > _23474:
                    mem[_23474 + _22872 + 164] = 0
                call wantAddress with:
                     gas gas_remaining wei
                    args mem[_22872 + 168 len _23474 - 4]
                if not return_data.size:
                    if not ext_call.success:
                        if mem[96]:
                            revert with memory
                              from 128
                               len mem[96]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if mem[96]:
                        require mem[96] >= 32
                        require mem[128] == bool(mem[128])
                        if not mem[128]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                else:
                    mem[_22872 + 196 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        require mem[_22872 + 196] == bool(mem[_22872 + 196])
                        if not mem[_22872 + 196]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
        else:
            require return_data.size >= 32
            require mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 388] == bool(mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 388])
            if not mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + 388]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
            strategistAddress = arg2
            rewardsAddress = arg3
            keeperAddress = arg4
            minReportDelay = 0
            maxReportDelay = 24 * 3600
            profitFactor = 100
            debtThreshold = 0
            mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 361] = arg3
            mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 393] = -1
            require ext_code.size(vaultAddress)
            call vaultAddress.approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(arg3), -1
            mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 357] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 357
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            require not bentoBoxAddress
            require arg6.length <= 5
            require arg6.length == arg7.length
            if arg8.length:
                mem[0] = 15
                name[].field_0 = Array(len=arg8.length, data=arg8[all])
                bentoBoxAddress = arg5
                idx = 0
                while idx < arg6.length:
                    _26278 = mem[64]
                    mem[64] = mem[64] + 64
                    require idx < mem[96]
                    mem[_26278] = mem[(32 * idx) + 140 len 20]
                    require idx < mem[(32 * arg6.length) + 128]
                    mem[_26278 + 32] = mem[(32 * idx) + (32 * arg6.length) + 160]
                    kashiPairs.length++
                    mem[0] = 12
                    kashiPairs[kashiPairs.length].field_0 = mem[_26278 + 12 len 20]
                    kashiPairs[kashiPairs.length].field_256 = mem[_26278 + 32]
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.0x6b2ace87 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _26600 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_26600] == mem[_26600 + 12 len 20]
                    require mem[_26600 + 12 len 20] == arg5
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.asset() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _27832 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_27832] == mem[_27832 + 12 len 20]
                    require mem[_27832 + 12 len 20] == wantAddress
                    idx = idx + 1
                    continue 
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = arg5
                require ext_code.size(wantAddress)
                staticcall wantAddress.0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(this.address), arg5
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _26740 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_26740]:
                    revert with 0, 'SafeERC20: approve from non-zero to non-zero allowance'
                _27447 = mem[64]
                mem[mem[64] + 36] = arg5
                mem[mem[64] + 68] = -1
                _27750 = mem[64]
                mem[mem[64]] = 68
                mem[mem[64] + 32 len 4] = approve(address arg1, uint256 arg2)
                mem[64] = mem[64] + 164
                mem[_27447 + 100] = 32
                mem[_27447 + 132] = 'SafeERC20: low-level call failed'
                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                if not ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                _28424 = mem[_27750]
                mem[_27447 + 164 len ceil32(mem[_27750])] = mem[_27750 + 32 len ceil32(mem[_27750])]
                if ceil32(_28424) > _28424:
                    mem[_28424 + _27447 + 164] = 0
                call wantAddress with:
                     gas gas_remaining wei
                    args mem[_27447 + 168 len _28424 - 4]
                if not return_data.size:
                    if not ext_call.success:
                        if mem[96]:
                            revert with memory
                              from 128
                               len mem[96]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if mem[96]:
                        require mem[96] >= 32
                        require mem[128] == bool(mem[128])
                        if not mem[128]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                else:
                    mem[_27447 + 196 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        require mem[_27447 + 196] == bool(mem[_27447 + 196])
                        if not mem[_27447 + 196]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
            else:
                mem[64] = (32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 421
                mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 357] = 28
                mem[(32 * arg6.length) + (32 * arg7.length) + ceil32(arg8.length) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 389] = 'StrategyKashiMultiPairLender'
                mem[0] = 15
                bool(name.length) = 0
                name.length.field_1 = 28
                name.length.field_8 = 'StrategyKashiMultiPairLender' / 256
                idx = 0
                while name.length + 31 / 32 > idx:
                    name[idx].field_0 = 0
                    idx = idx + 1
                    continue 
                bentoBoxAddress = arg5
                idx = 0
                while idx < arg6.length:
                    _22067 = mem[64]
                    mem[64] = mem[64] + 64
                    require idx < mem[96]
                    mem[_22067] = mem[(32 * idx) + 140 len 20]
                    require idx < mem[(32 * arg6.length) + 128]
                    mem[_22067 + 32] = mem[(32 * idx) + (32 * arg6.length) + 160]
                    kashiPairs.length++
                    mem[0] = 12
                    kashiPairs[kashiPairs.length].field_0 = mem[_22067 + 12 len 20]
                    kashiPairs[kashiPairs.length].field_256 = mem[_22067 + 32]
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.0x6b2ace87 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _22532 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_22532] == mem[_22532 + 12 len 20]
                    require mem[_22532 + 12 len 20] == arg5
                    require idx < kashiPairs.length
                    mem[0] = 12
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.asset() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _23190 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_23190] == mem[_23190 + 12 len 20]
                    require mem[_23190 + 12 len 20] == wantAddress
                    idx = idx + 1
                    continue 
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = arg5
                require ext_code.size(wantAddress)
                staticcall wantAddress.0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(this.address), arg5
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _22641 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_22641]:
                    revert with 0, 'SafeERC20: approve from non-zero to non-zero allowance'
                _22882 = mem[64]
                mem[mem[64] + 36] = arg5
                mem[mem[64] + 68] = -1
                _22992 = mem[64]
                mem[mem[64]] = 68
                mem[mem[64] + 32 len 4] = approve(address arg1, uint256 arg2)
                mem[64] = mem[64] + 164
                mem[_22882 + 100] = 32
                mem[_22882 + 132] = 'SafeERC20: low-level call failed'
                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                if not ext_code.hash(wantAddress):
                    revert with 0, 'Address: call to non-contract'
                _23478 = mem[_22992]
                mem[_22882 + 164 len ceil32(mem[_22992])] = mem[_22992 + 32 len ceil32(mem[_22992])]
                if ceil32(_23478) > _23478:
                    mem[_23478 + _22882 + 164] = 0
                call wantAddress with:
                     gas gas_remaining wei
                    args mem[_22882 + 168 len _23478 - 4]
                if not return_data.size:
                    if not ext_call.success:
                        if mem[96]:
                            revert with memory
                              from 128
                               len mem[96]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if mem[96]:
                        require mem[96] >= 32
                        require mem[128] == bool(mem[128])
                        if not mem[128]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                else:
                    mem[_22882 + 196 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        require mem[_22882 + 196] == bool(mem[_22882 + 196])
                        if not mem[_22882 + 196]:
                            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
}

function tend() payable {
    require ext_code.size(vaultAddress)
    if msg.sender == keeperAddress:
        staticcall vaultAddress.debtOutstanding() with:
                gas gas_remaining wei
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not uint8(stor11.field_0):
            mem[ceil32(return_data.size) + 100] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] <= dustThreshold:
                mem[(2 * ceil32(return_data.size)) + 100] = wantAddress
                mem[(2 * ceil32(return_data.size)) + 132] = this.address
                require ext_code.size(bentoBoxAddress)
                staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wantAddress, this.address
                mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                if not dustThreshold:
                    if ext_call.return_data[0] > 0:
                        idx = 0
                        s = 0
                        t = 0
                        u = 0
                        v = 0
                        while idx < kashiPairs.length:
                            _1361 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1361] = 0
                            mem[_1361 + 32] = 0
                            mem[0] = 12
                            _1385 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1385] = kashiPairs[idx].field_0
                            mem[_1385 + 32] = kashiPairs[idx].field_256
                            require ext_code.size(kashiPairs[idx].field_0)
                            staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1481 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 96
                            _1521 = mem[_1481]
                            require mem[_1481] == mem[_1481 + 24 len 8]
                            require mem[_1481 + 32] == mem[_1481 + 56 len 8]
                            require mem[_1481 + 64] == mem[_1481 + 80 len 16]
                            require ext_code.size(kashiPairs[idx].field_0)
                            staticcall kashiPairs[idx].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1721 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _1741 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_1721] == mem[_1721 + 16 len 16]
                            mem[_1741] = mem[_1721]
                            require mem[_1721 + 32] == mem[_1721 + 48 len 16]
                            mem[_1741 + 32] = mem[_1721 + 32]
                            _1803 = mem[_1741]
                            require ext_code.size(kashiPairs[idx].field_0)
                            staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1861 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _1881 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_1861] == mem[_1861 + 16 len 16]
                            mem[_1881] = mem[_1861]
                            require mem[_1861 + 32] == mem[_1861 + 48 len 16]
                            mem[_1881 + 32] = mem[_1861 + 32]
                            _1941 = mem[_1881]
                            if ext_call.return_data[0] + uint128(_1803) < uint128(_1803):
                                revert with 0, 'SafeMath: addition overflow'
                            mem[mem[64] + 4] = this.address
                            mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1803)
                            mem[mem[64] + 68] = 0
                            require ext_code.size(bentoBoxAddress)
                            staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args address(this.address), ext_call.return_data[0] + uint128(_1803), 0
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2041 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _2061 = mem[_2041]
                            if uint128(_1941) + mem[_2041] < mem[_2041]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not uint128(_1941):
                                _2141 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2141] = 26
                                mem[_2141 + 32] = 'SafeMath: division by zero'
                                if not uint128(_1941) + _2061:
                                    _2183 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2183 + 68] = mem[idx + _2141 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2183 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2183 + -mem[64] + 100
                                if 0 / uint128(_1941) + _2061 <= s:
                                    if uint64(_1521) <= t:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 0 / uint128(_1941) + _2061 >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 0 / uint128(_1941) + _2061 <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                else:
                                    if 0 / uint128(_1941) + _2061 <= 8 * 10^17:
                                        if s >= 7 * 10^17:
                                            if uint64(_1521) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1941) + _2061 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1941) + _2061 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                idx = idx + 1
                                s = 0 / uint128(_1941) + _2061
                                t = uint64(_1521)
                                u = kashiPairs[idx].field_256
                                v = kashiPairs[idx].field_0
                                continue 
                            if 10^18 * uint128(_1941) / uint128(_1941) != 10^18:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _2182 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2182] = 26
                            mem[_2182 + 32] = 'SafeMath: division by zero'
                            if not uint128(_1941) + _2061:
                                _2222 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _2222 + 68] = mem[idx + _2182 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2222 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _2222 + -mem[64] + 100
                            if 10^18 * uint128(_1941) / uint128(_1941) + _2061 <= s:
                                if uint64(_1521) <= t:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if 10^18 * uint128(_1941) / uint128(_1941) + _2061 >= 8 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if 10^18 * uint128(_1941) / uint128(_1941) + _2061 <= 7 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if s >= 8 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if s <= 7 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                            else:
                                if 10^18 * uint128(_1941) / uint128(_1941) + _2061 <= 8 * 10^17:
                                    if s >= 7 * 10^17:
                                        if uint64(_1521) <= t:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1941) / uint128(_1941) + _2061 >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1941) / uint128(_1941) + _2061 <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                            idx = idx + 1
                            s = 10^18 * uint128(_1941) / uint128(_1941) + _2061
                            t = uint64(_1521)
                            u = kashiPairs[idx].field_256
                            v = kashiPairs[idx].field_0
                            continue 
                        require ext_code.size(bentoBoxAddress)
                        call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                             gas gas_remaining wei
                            args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(address(v))
                        call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                             gas gas_remaining wei
                            args address(this.address), 1, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                else:
                    mem[(4 * ceil32(return_data.size)) + 100] = this.address
                    mem[(4 * ceil32(return_data.size)) + 132] = dustThreshold
                    mem[(4 * ceil32(return_data.size)) + 164] = 1
                    require ext_code.size(bentoBoxAddress)
                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(this.address), dustThreshold, 1
                    mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (6 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    if ext_call.return_data[0] > ext_call.return_data[0]:
                        idx = 0
                        s = 0
                        t = 0
                        u = 0
                        v = 0
                        while idx < kashiPairs.length:
                            _1360 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1360] = 0
                            mem[_1360 + 32] = 0
                            mem[0] = 12
                            _1381 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1381] = kashiPairs[idx].field_0
                            mem[_1381 + 32] = kashiPairs[idx].field_256
                            require ext_code.size(kashiPairs[idx].field_0)
                            staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1480 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 96
                            _1520 = mem[_1480]
                            require mem[_1480] == mem[_1480 + 24 len 8]
                            require mem[_1480 + 32] == mem[_1480 + 56 len 8]
                            require mem[_1480 + 64] == mem[_1480 + 80 len 16]
                            require ext_code.size(kashiPairs[idx].field_0)
                            staticcall kashiPairs[idx].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1720 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _1740 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_1720] == mem[_1720 + 16 len 16]
                            mem[_1740] = mem[_1720]
                            require mem[_1720 + 32] == mem[_1720 + 48 len 16]
                            mem[_1740 + 32] = mem[_1720 + 32]
                            _1800 = mem[_1740]
                            require ext_code.size(kashiPairs[idx].field_0)
                            staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1860 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _1880 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_1860] == mem[_1860 + 16 len 16]
                            mem[_1880] = mem[_1860]
                            require mem[_1860 + 32] == mem[_1860 + 48 len 16]
                            mem[_1880 + 32] = mem[_1860 + 32]
                            _1940 = mem[_1880]
                            if ext_call.return_data[0] + uint128(_1800) < uint128(_1800):
                                revert with 0, 'SafeMath: addition overflow'
                            mem[mem[64] + 4] = this.address
                            mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1800)
                            mem[mem[64] + 68] = 0
                            require ext_code.size(bentoBoxAddress)
                            staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args address(this.address), ext_call.return_data[0] + uint128(_1800), 0
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2040 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _2060 = mem[_2040]
                            if uint128(_1940) + mem[_2040] < mem[_2040]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not uint128(_1940):
                                _2140 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2140] = 26
                                mem[_2140 + 32] = 'SafeMath: division by zero'
                                if not uint128(_1940) + _2060:
                                    _2181 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2181 + 68] = mem[idx + _2140 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2181 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2181 + -mem[64] + 100
                                if 0 / uint128(_1940) + _2060 <= s:
                                    if uint64(_1520) <= t:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 0 / uint128(_1940) + _2060 >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 0 / uint128(_1940) + _2060 <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                else:
                                    if 0 / uint128(_1940) + _2060 <= 8 * 10^17:
                                        if s >= 7 * 10^17:
                                            if uint64(_1520) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1940) + _2060 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1940) + _2060 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                idx = idx + 1
                                s = 0 / uint128(_1940) + _2060
                                t = uint64(_1520)
                                u = kashiPairs[idx].field_256
                                v = kashiPairs[idx].field_0
                                continue 
                            if 10^18 * uint128(_1940) / uint128(_1940) != 10^18:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _2180 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2180] = 26
                            mem[_2180 + 32] = 'SafeMath: division by zero'
                            if not uint128(_1940) + _2060:
                                _2220 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _2220 + 68] = mem[idx + _2180 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2220 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _2220 + -mem[64] + 100
                            if 10^18 * uint128(_1940) / uint128(_1940) + _2060 <= s:
                                if uint64(_1520) <= t:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if 10^18 * uint128(_1940) / uint128(_1940) + _2060 >= 8 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if 10^18 * uint128(_1940) / uint128(_1940) + _2060 <= 7 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if s >= 8 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if s <= 7 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                            else:
                                if 10^18 * uint128(_1940) / uint128(_1940) + _2060 <= 8 * 10^17:
                                    if s >= 7 * 10^17:
                                        if uint64(_1520) <= t:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1940) / uint128(_1940) + _2060 >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1940) / uint128(_1940) + _2060 <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                            idx = idx + 1
                            s = 10^18 * uint128(_1940) / uint128(_1940) + _2060
                            t = uint64(_1520)
                            u = kashiPairs[idx].field_256
                            v = kashiPairs[idx].field_0
                            continue 
                        require ext_code.size(bentoBoxAddress)
                        call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                             gas gas_remaining wei
                            args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(address(v))
                        call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                             gas gas_remaining wei
                            args address(this.address), 1, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
            else:
                mem[(2 * ceil32(return_data.size)) + 132] = this.address
                mem[(2 * ceil32(return_data.size)) + 164] = this.address
                mem[(2 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                mem[(2 * ceil32(return_data.size)) + 228] = 0
                require ext_code.size(bentoBoxAddress)
                call bentoBoxAddress.deposit(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args wantAddress, address(this.address), address(this.address), ext_call.return_data[0], 0
                mem[(2 * ceil32(return_data.size)) + 96 len 64] = ext_call.return_data[0 len 64]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 64
                mem[(4 * ceil32(return_data.size)) + 100] = wantAddress
                mem[(4 * ceil32(return_data.size)) + 132] = this.address
                require ext_code.size(bentoBoxAddress)
                staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wantAddress, this.address
                mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (6 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                if not dustThreshold:
                    if ext_call.return_data[0] > 0:
                        idx = 0
                        s = 0
                        t = 0
                        u = 0
                        v = 0
                        while idx < kashiPairs.length:
                            _1363 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1363] = 0
                            mem[_1363 + 32] = 0
                            mem[0] = 12
                            _1393 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1393] = kashiPairs[idx].field_0
                            mem[_1393 + 32] = kashiPairs[idx].field_256
                            require ext_code.size(kashiPairs[idx].field_0)
                            staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1483 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 96
                            _1523 = mem[_1483]
                            require mem[_1483] == mem[_1483 + 24 len 8]
                            require mem[_1483 + 32] == mem[_1483 + 56 len 8]
                            require mem[_1483 + 64] == mem[_1483 + 80 len 16]
                            require ext_code.size(kashiPairs[idx].field_0)
                            staticcall kashiPairs[idx].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1723 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _1743 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_1723] == mem[_1723 + 16 len 16]
                            mem[_1743] = mem[_1723]
                            require mem[_1723 + 32] == mem[_1723 + 48 len 16]
                            mem[_1743 + 32] = mem[_1723 + 32]
                            _1809 = mem[_1743]
                            require ext_code.size(kashiPairs[idx].field_0)
                            staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1863 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _1883 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_1863] == mem[_1863 + 16 len 16]
                            mem[_1883] = mem[_1863]
                            require mem[_1863 + 32] == mem[_1863 + 48 len 16]
                            mem[_1883 + 32] = mem[_1863 + 32]
                            _1943 = mem[_1883]
                            if ext_call.return_data[0] + uint128(_1809) < uint128(_1809):
                                revert with 0, 'SafeMath: addition overflow'
                            mem[mem[64] + 4] = this.address
                            mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1809)
                            mem[mem[64] + 68] = 0
                            require ext_code.size(bentoBoxAddress)
                            staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args address(this.address), ext_call.return_data[0] + uint128(_1809), 0
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2043 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _2063 = mem[_2043]
                            if uint128(_1943) + mem[_2043] < mem[_2043]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not uint128(_1943):
                                _2143 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2143] = 26
                                mem[_2143 + 32] = 'SafeMath: division by zero'
                                if not uint128(_1943) + _2063:
                                    _2187 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2187 + 68] = mem[idx + _2143 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2187 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2187 + -mem[64] + 100
                                if 0 / uint128(_1943) + _2063 <= s:
                                    if uint64(_1523) <= t:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 0 / uint128(_1943) + _2063 >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 0 / uint128(_1943) + _2063 <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                else:
                                    if 0 / uint128(_1943) + _2063 <= 8 * 10^17:
                                        if s >= 7 * 10^17:
                                            if uint64(_1523) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1943) + _2063 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1943) + _2063 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                idx = idx + 1
                                s = 0 / uint128(_1943) + _2063
                                t = uint64(_1523)
                                u = kashiPairs[idx].field_256
                                v = kashiPairs[idx].field_0
                                continue 
                            if 10^18 * uint128(_1943) / uint128(_1943) != 10^18:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _2186 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2186] = 26
                            mem[_2186 + 32] = 'SafeMath: division by zero'
                            if not uint128(_1943) + _2063:
                                _2226 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _2226 + 68] = mem[idx + _2186 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2226 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _2226 + -mem[64] + 100
                            if 10^18 * uint128(_1943) / uint128(_1943) + _2063 <= s:
                                if uint64(_1523) <= t:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if 10^18 * uint128(_1943) / uint128(_1943) + _2063 >= 8 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if 10^18 * uint128(_1943) / uint128(_1943) + _2063 <= 7 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if s >= 8 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if s <= 7 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                            else:
                                if 10^18 * uint128(_1943) / uint128(_1943) + _2063 <= 8 * 10^17:
                                    if s >= 7 * 10^17:
                                        if uint64(_1523) <= t:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1943) / uint128(_1943) + _2063 >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1943) / uint128(_1943) + _2063 <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                            idx = idx + 1
                            s = 10^18 * uint128(_1943) / uint128(_1943) + _2063
                            t = uint64(_1523)
                            u = kashiPairs[idx].field_256
                            v = kashiPairs[idx].field_0
                            continue 
                        require ext_code.size(bentoBoxAddress)
                        call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                             gas gas_remaining wei
                            args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(address(v))
                        call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                             gas gas_remaining wei
                            args address(this.address), 1, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                else:
                    mem[(6 * ceil32(return_data.size)) + 100] = this.address
                    mem[(6 * ceil32(return_data.size)) + 132] = dustThreshold
                    mem[(6 * ceil32(return_data.size)) + 164] = 1
                    require ext_code.size(bentoBoxAddress)
                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(this.address), dustThreshold, 1
                    mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (7 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    if ext_call.return_data[0] > ext_call.return_data[0]:
                        idx = 0
                        s = 0
                        t = 0
                        u = 0
                        v = 0
                        while idx < kashiPairs.length:
                            _1362 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1362] = 0
                            mem[_1362 + 32] = 0
                            mem[0] = 12
                            _1389 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1389] = kashiPairs[idx].field_0
                            mem[_1389 + 32] = kashiPairs[idx].field_256
                            require ext_code.size(kashiPairs[idx].field_0)
                            staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1482 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 96
                            _1522 = mem[_1482]
                            require mem[_1482] == mem[_1482 + 24 len 8]
                            require mem[_1482 + 32] == mem[_1482 + 56 len 8]
                            require mem[_1482 + 64] == mem[_1482 + 80 len 16]
                            require ext_code.size(kashiPairs[idx].field_0)
                            staticcall kashiPairs[idx].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1722 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _1742 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_1722] == mem[_1722 + 16 len 16]
                            mem[_1742] = mem[_1722]
                            require mem[_1722 + 32] == mem[_1722 + 48 len 16]
                            mem[_1742 + 32] = mem[_1722 + 32]
                            _1806 = mem[_1742]
                            require ext_code.size(kashiPairs[idx].field_0)
                            staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1862 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _1882 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_1862] == mem[_1862 + 16 len 16]
                            mem[_1882] = mem[_1862]
                            require mem[_1862 + 32] == mem[_1862 + 48 len 16]
                            mem[_1882 + 32] = mem[_1862 + 32]
                            _1942 = mem[_1882]
                            if ext_call.return_data[0] + uint128(_1806) < uint128(_1806):
                                revert with 0, 'SafeMath: addition overflow'
                            mem[mem[64] + 4] = this.address
                            mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1806)
                            mem[mem[64] + 68] = 0
                            require ext_code.size(bentoBoxAddress)
                            staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args address(this.address), ext_call.return_data[0] + uint128(_1806), 0
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2042 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _2062 = mem[_2042]
                            if uint128(_1942) + mem[_2042] < mem[_2042]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not uint128(_1942):
                                _2142 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2142] = 26
                                mem[_2142 + 32] = 'SafeMath: division by zero'
                                if not uint128(_1942) + _2062:
                                    _2185 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2185 + 68] = mem[idx + _2142 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2185 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2185 + -mem[64] + 100
                                if 0 / uint128(_1942) + _2062 <= s:
                                    if uint64(_1522) <= t:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 0 / uint128(_1942) + _2062 >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 0 / uint128(_1942) + _2062 <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                else:
                                    if 0 / uint128(_1942) + _2062 <= 8 * 10^17:
                                        if s >= 7 * 10^17:
                                            if uint64(_1522) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1942) + _2062 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1942) + _2062 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                idx = idx + 1
                                s = 0 / uint128(_1942) + _2062
                                t = uint64(_1522)
                                u = kashiPairs[idx].field_256
                                v = kashiPairs[idx].field_0
                                continue 
                            if 10^18 * uint128(_1942) / uint128(_1942) != 10^18:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _2184 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2184] = 26
                            mem[_2184 + 32] = 'SafeMath: division by zero'
                            if not uint128(_1942) + _2062:
                                _2224 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _2224 + 68] = mem[idx + _2184 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2224 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _2224 + -mem[64] + 100
                            if 10^18 * uint128(_1942) / uint128(_1942) + _2062 <= s:
                                if uint64(_1522) <= t:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if 10^18 * uint128(_1942) / uint128(_1942) + _2062 >= 8 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if 10^18 * uint128(_1942) / uint128(_1942) + _2062 <= 7 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if s >= 8 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                                if s <= 7 * 10^17:
                                    idx = idx + 1
                                    s = s
                                    t = t
                                    u = u
                                    v = v
                                    continue 
                            else:
                                if 10^18 * uint128(_1942) / uint128(_1942) + _2062 <= 8 * 10^17:
                                    if s >= 7 * 10^17:
                                        if uint64(_1522) <= t:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1942) / uint128(_1942) + _2062 >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1942) / uint128(_1942) + _2062 <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                            idx = idx + 1
                            s = 10^18 * uint128(_1942) / uint128(_1942) + _2062
                            t = uint64(_1522)
                            u = kashiPairs[idx].field_256
                            v = kashiPairs[idx].field_0
                            continue 
                        require ext_code.size(bentoBoxAddress)
                        call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                             gas gas_remaining wei
                            args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(address(v))
                        call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                             gas gas_remaining wei
                            args address(this.address), 1, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
    else:
        if msg.sender == strategistAddress:
            staticcall vaultAddress.debtOutstanding() with:
                    gas gas_remaining wei
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not uint8(stor11.field_0):
                mem[ceil32(return_data.size) + 100] = this.address
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] <= dustThreshold:
                    mem[(2 * ceil32(return_data.size)) + 100] = wantAddress
                    mem[(2 * ceil32(return_data.size)) + 132] = this.address
                    require ext_code.size(bentoBoxAddress)
                    staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args wantAddress, this.address
                    mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    if not dustThreshold:
                        if ext_call.return_data[0] > 0:
                            idx = 0
                            s = 0
                            t = 0
                            u = 0
                            v = 0
                            while idx < kashiPairs.length:
                                _1365 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_1365] = 0
                                mem[_1365 + 32] = 0
                                mem[0] = 12
                                _1401 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_1401] = kashiPairs[idx].field_0
                                mem[_1401 + 32] = kashiPairs[idx].field_256
                                require ext_code.size(kashiPairs[idx].field_0)
                                staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1485 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 96
                                _1525 = mem[_1485]
                                require mem[_1485] == mem[_1485 + 24 len 8]
                                require mem[_1485 + 32] == mem[_1485 + 56 len 8]
                                require mem[_1485 + 64] == mem[_1485 + 80 len 16]
                                require ext_code.size(kashiPairs[idx].field_0)
                                staticcall kashiPairs[idx].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1725 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _1745 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_1725] == mem[_1725 + 16 len 16]
                                mem[_1745] = mem[_1725]
                                require mem[_1725 + 32] == mem[_1725 + 48 len 16]
                                mem[_1745 + 32] = mem[_1725 + 32]
                                _1815 = mem[_1745]
                                require ext_code.size(kashiPairs[idx].field_0)
                                staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1865 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _1885 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_1865] == mem[_1865 + 16 len 16]
                                mem[_1885] = mem[_1865]
                                require mem[_1865 + 32] == mem[_1865 + 48 len 16]
                                mem[_1885 + 32] = mem[_1865 + 32]
                                _1945 = mem[_1885]
                                if ext_call.return_data[0] + uint128(_1815) < uint128(_1815):
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1815)
                                mem[mem[64] + 68] = 0
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), ext_call.return_data[0] + uint128(_1815), 0
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2045 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _2065 = mem[_2045]
                                if uint128(_1945) + mem[_2045] < mem[_2045]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not uint128(_1945):
                                    _2145 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_2145] = 26
                                    mem[_2145 + 32] = 'SafeMath: division by zero'
                                    if not uint128(_1945) + _2065:
                                        _2191 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _2191 + 68] = mem[idx + _2145 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_2191 + 94] = 0
                                        revert with memory
                                          from mem[64]
                                           len _2191 + -mem[64] + 100
                                    if 0 / uint128(_1945) + _2065 <= s:
                                        if uint64(_1525) <= t:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 0 / uint128(_1945) + _2065 >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 0 / uint128(_1945) + _2065 <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                    else:
                                        if 0 / uint128(_1945) + _2065 <= 8 * 10^17:
                                            if s >= 7 * 10^17:
                                                if uint64(_1525) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1945) + _2065 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1945) + _2065 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                    idx = idx + 1
                                    s = 0 / uint128(_1945) + _2065
                                    t = uint64(_1525)
                                    u = kashiPairs[idx].field_256
                                    v = kashiPairs[idx].field_0
                                    continue 
                                if 10^18 * uint128(_1945) / uint128(_1945) != 10^18:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _2190 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2190] = 26
                                mem[_2190 + 32] = 'SafeMath: division by zero'
                                if not uint128(_1945) + _2065:
                                    _2230 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2230 + 68] = mem[idx + _2190 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2230 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2230 + -mem[64] + 100
                                if 10^18 * uint128(_1945) / uint128(_1945) + _2065 <= s:
                                    if uint64(_1525) <= t:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 10^18 * uint128(_1945) / uint128(_1945) + _2065 >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 10^18 * uint128(_1945) / uint128(_1945) + _2065 <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                else:
                                    if 10^18 * uint128(_1945) / uint128(_1945) + _2065 <= 8 * 10^17:
                                        if s >= 7 * 10^17:
                                            if uint64(_1525) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1945) / uint128(_1945) + _2065 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1945) / uint128(_1945) + _2065 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                idx = idx + 1
                                s = 10^18 * uint128(_1945) / uint128(_1945) + _2065
                                t = uint64(_1525)
                                u = kashiPairs[idx].field_256
                                v = kashiPairs[idx].field_0
                                continue 
                            require ext_code.size(bentoBoxAddress)
                            call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                 gas gas_remaining wei
                                args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(address(v))
                            call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                 gas gas_remaining wei
                                args address(this.address), 1, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                    else:
                        mem[(4 * ceil32(return_data.size)) + 100] = this.address
                        mem[(4 * ceil32(return_data.size)) + 132] = dustThreshold
                        mem[(4 * ceil32(return_data.size)) + 164] = 1
                        require ext_code.size(bentoBoxAddress)
                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(this.address), dustThreshold, 1
                        mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (6 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        if ext_call.return_data[0] > ext_call.return_data[0]:
                            idx = 0
                            s = 0
                            t = 0
                            u = 0
                            v = 0
                            while idx < kashiPairs.length:
                                _1364 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_1364] = 0
                                mem[_1364 + 32] = 0
                                mem[0] = 12
                                _1397 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_1397] = kashiPairs[idx].field_0
                                mem[_1397 + 32] = kashiPairs[idx].field_256
                                require ext_code.size(kashiPairs[idx].field_0)
                                staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1484 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 96
                                _1524 = mem[_1484]
                                require mem[_1484] == mem[_1484 + 24 len 8]
                                require mem[_1484 + 32] == mem[_1484 + 56 len 8]
                                require mem[_1484 + 64] == mem[_1484 + 80 len 16]
                                require ext_code.size(kashiPairs[idx].field_0)
                                staticcall kashiPairs[idx].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1724 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _1744 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_1724] == mem[_1724 + 16 len 16]
                                mem[_1744] = mem[_1724]
                                require mem[_1724 + 32] == mem[_1724 + 48 len 16]
                                mem[_1744 + 32] = mem[_1724 + 32]
                                _1812 = mem[_1744]
                                require ext_code.size(kashiPairs[idx].field_0)
                                staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1864 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _1884 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_1864] == mem[_1864 + 16 len 16]
                                mem[_1884] = mem[_1864]
                                require mem[_1864 + 32] == mem[_1864 + 48 len 16]
                                mem[_1884 + 32] = mem[_1864 + 32]
                                _1944 = mem[_1884]
                                if ext_call.return_data[0] + uint128(_1812) < uint128(_1812):
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1812)
                                mem[mem[64] + 68] = 0
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), ext_call.return_data[0] + uint128(_1812), 0
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2044 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _2064 = mem[_2044]
                                if uint128(_1944) + mem[_2044] < mem[_2044]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not uint128(_1944):
                                    _2144 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_2144] = 26
                                    mem[_2144 + 32] = 'SafeMath: division by zero'
                                    if not uint128(_1944) + _2064:
                                        _2189 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _2189 + 68] = mem[idx + _2144 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_2189 + 94] = 0
                                        revert with memory
                                          from mem[64]
                                           len _2189 + -mem[64] + 100
                                    if 0 / uint128(_1944) + _2064 <= s:
                                        if uint64(_1524) <= t:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 0 / uint128(_1944) + _2064 >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 0 / uint128(_1944) + _2064 <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                    else:
                                        if 0 / uint128(_1944) + _2064 <= 8 * 10^17:
                                            if s >= 7 * 10^17:
                                                if uint64(_1524) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1944) + _2064 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1944) + _2064 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                    idx = idx + 1
                                    s = 0 / uint128(_1944) + _2064
                                    t = uint64(_1524)
                                    u = kashiPairs[idx].field_256
                                    v = kashiPairs[idx].field_0
                                    continue 
                                if 10^18 * uint128(_1944) / uint128(_1944) != 10^18:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _2188 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2188] = 26
                                mem[_2188 + 32] = 'SafeMath: division by zero'
                                if not uint128(_1944) + _2064:
                                    _2228 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2228 + 68] = mem[idx + _2188 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2228 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2228 + -mem[64] + 100
                                if 10^18 * uint128(_1944) / uint128(_1944) + _2064 <= s:
                                    if uint64(_1524) <= t:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 10^18 * uint128(_1944) / uint128(_1944) + _2064 >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 10^18 * uint128(_1944) / uint128(_1944) + _2064 <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                else:
                                    if 10^18 * uint128(_1944) / uint128(_1944) + _2064 <= 8 * 10^17:
                                        if s >= 7 * 10^17:
                                            if uint64(_1524) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1944) / uint128(_1944) + _2064 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1944) / uint128(_1944) + _2064 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                idx = idx + 1
                                s = 10^18 * uint128(_1944) / uint128(_1944) + _2064
                                t = uint64(_1524)
                                u = kashiPairs[idx].field_256
                                v = kashiPairs[idx].field_0
                                continue 
                            require ext_code.size(bentoBoxAddress)
                            call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                 gas gas_remaining wei
                                args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(address(v))
                            call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                 gas gas_remaining wei
                                args address(this.address), 1, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                else:
                    mem[(2 * ceil32(return_data.size)) + 132] = this.address
                    mem[(2 * ceil32(return_data.size)) + 164] = this.address
                    mem[(2 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                    mem[(2 * ceil32(return_data.size)) + 228] = 0
                    require ext_code.size(bentoBoxAddress)
                    call bentoBoxAddress.deposit(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args wantAddress, address(this.address), address(this.address), ext_call.return_data[0], 0
                    mem[(2 * ceil32(return_data.size)) + 96 len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 64
                    mem[(4 * ceil32(return_data.size)) + 100] = wantAddress
                    mem[(4 * ceil32(return_data.size)) + 132] = this.address
                    require ext_code.size(bentoBoxAddress)
                    staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args wantAddress, this.address
                    mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (6 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    if not dustThreshold:
                        if ext_call.return_data[0] > 0:
                            idx = 0
                            s = 0
                            t = 0
                            u = 0
                            v = 0
                            while idx < kashiPairs.length:
                                _1367 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_1367] = 0
                                mem[_1367 + 32] = 0
                                mem[0] = 12
                                _1409 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_1409] = kashiPairs[idx].field_0
                                mem[_1409 + 32] = kashiPairs[idx].field_256
                                require ext_code.size(kashiPairs[idx].field_0)
                                staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1487 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 96
                                _1527 = mem[_1487]
                                require mem[_1487] == mem[_1487 + 24 len 8]
                                require mem[_1487 + 32] == mem[_1487 + 56 len 8]
                                require mem[_1487 + 64] == mem[_1487 + 80 len 16]
                                require ext_code.size(kashiPairs[idx].field_0)
                                staticcall kashiPairs[idx].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1727 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _1747 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_1727] == mem[_1727 + 16 len 16]
                                mem[_1747] = mem[_1727]
                                require mem[_1727 + 32] == mem[_1727 + 48 len 16]
                                mem[_1747 + 32] = mem[_1727 + 32]
                                _1821 = mem[_1747]
                                require ext_code.size(kashiPairs[idx].field_0)
                                staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1867 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _1887 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_1867] == mem[_1867 + 16 len 16]
                                mem[_1887] = mem[_1867]
                                require mem[_1867 + 32] == mem[_1867 + 48 len 16]
                                mem[_1887 + 32] = mem[_1867 + 32]
                                _1947 = mem[_1887]
                                if ext_call.return_data[0] + uint128(_1821) < uint128(_1821):
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1821)
                                mem[mem[64] + 68] = 0
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), ext_call.return_data[0] + uint128(_1821), 0
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2047 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _2067 = mem[_2047]
                                if uint128(_1947) + mem[_2047] < mem[_2047]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not uint128(_1947):
                                    _2147 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_2147] = 26
                                    mem[_2147 + 32] = 'SafeMath: division by zero'
                                    if not uint128(_1947) + _2067:
                                        _2195 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _2195 + 68] = mem[idx + _2147 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_2195 + 94] = 0
                                        revert with memory
                                          from mem[64]
                                           len _2195 + -mem[64] + 100
                                    if 0 / uint128(_1947) + _2067 <= s:
                                        if uint64(_1527) <= t:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 0 / uint128(_1947) + _2067 >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 0 / uint128(_1947) + _2067 <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                    else:
                                        if 0 / uint128(_1947) + _2067 <= 8 * 10^17:
                                            if s >= 7 * 10^17:
                                                if uint64(_1527) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1947) + _2067 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1947) + _2067 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                    idx = idx + 1
                                    s = 0 / uint128(_1947) + _2067
                                    t = uint64(_1527)
                                    u = kashiPairs[idx].field_256
                                    v = kashiPairs[idx].field_0
                                    continue 
                                if 10^18 * uint128(_1947) / uint128(_1947) != 10^18:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _2194 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2194] = 26
                                mem[_2194 + 32] = 'SafeMath: division by zero'
                                if not uint128(_1947) + _2067:
                                    _2234 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2234 + 68] = mem[idx + _2194 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2234 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2234 + -mem[64] + 100
                                if 10^18 * uint128(_1947) / uint128(_1947) + _2067 <= s:
                                    if uint64(_1527) <= t:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 10^18 * uint128(_1947) / uint128(_1947) + _2067 >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 10^18 * uint128(_1947) / uint128(_1947) + _2067 <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                else:
                                    if 10^18 * uint128(_1947) / uint128(_1947) + _2067 <= 8 * 10^17:
                                        if s >= 7 * 10^17:
                                            if uint64(_1527) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1947) / uint128(_1947) + _2067 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1947) / uint128(_1947) + _2067 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                idx = idx + 1
                                s = 10^18 * uint128(_1947) / uint128(_1947) + _2067
                                t = uint64(_1527)
                                u = kashiPairs[idx].field_256
                                v = kashiPairs[idx].field_0
                                continue 
                            require ext_code.size(bentoBoxAddress)
                            call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                 gas gas_remaining wei
                                args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(address(v))
                            call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                 gas gas_remaining wei
                                args address(this.address), 1, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                    else:
                        mem[(6 * ceil32(return_data.size)) + 100] = this.address
                        mem[(6 * ceil32(return_data.size)) + 132] = dustThreshold
                        mem[(6 * ceil32(return_data.size)) + 164] = 1
                        require ext_code.size(bentoBoxAddress)
                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(this.address), dustThreshold, 1
                        mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (7 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        if ext_call.return_data[0] > ext_call.return_data[0]:
                            idx = 0
                            s = 0
                            t = 0
                            u = 0
                            v = 0
                            while idx < kashiPairs.length:
                                _1366 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_1366] = 0
                                mem[_1366 + 32] = 0
                                mem[0] = 12
                                _1405 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_1405] = kashiPairs[idx].field_0
                                mem[_1405 + 32] = kashiPairs[idx].field_256
                                require ext_code.size(kashiPairs[idx].field_0)
                                staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1486 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 96
                                _1526 = mem[_1486]
                                require mem[_1486] == mem[_1486 + 24 len 8]
                                require mem[_1486 + 32] == mem[_1486 + 56 len 8]
                                require mem[_1486 + 64] == mem[_1486 + 80 len 16]
                                require ext_code.size(kashiPairs[idx].field_0)
                                staticcall kashiPairs[idx].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1726 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _1746 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_1726] == mem[_1726 + 16 len 16]
                                mem[_1746] = mem[_1726]
                                require mem[_1726 + 32] == mem[_1726 + 48 len 16]
                                mem[_1746 + 32] = mem[_1726 + 32]
                                _1818 = mem[_1746]
                                require ext_code.size(kashiPairs[idx].field_0)
                                staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1866 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _1886 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_1866] == mem[_1866 + 16 len 16]
                                mem[_1886] = mem[_1866]
                                require mem[_1866 + 32] == mem[_1866 + 48 len 16]
                                mem[_1886 + 32] = mem[_1866 + 32]
                                _1946 = mem[_1886]
                                if ext_call.return_data[0] + uint128(_1818) < uint128(_1818):
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1818)
                                mem[mem[64] + 68] = 0
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), ext_call.return_data[0] + uint128(_1818), 0
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2046 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _2066 = mem[_2046]
                                if uint128(_1946) + mem[_2046] < mem[_2046]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not uint128(_1946):
                                    _2146 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_2146] = 26
                                    mem[_2146 + 32] = 'SafeMath: division by zero'
                                    if not uint128(_1946) + _2066:
                                        _2193 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _2193 + 68] = mem[idx + _2146 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_2193 + 94] = 0
                                        revert with memory
                                          from mem[64]
                                           len _2193 + -mem[64] + 100
                                    if 0 / uint128(_1946) + _2066 <= s:
                                        if uint64(_1526) <= t:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 0 / uint128(_1946) + _2066 >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 0 / uint128(_1946) + _2066 <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                    else:
                                        if 0 / uint128(_1946) + _2066 <= 8 * 10^17:
                                            if s >= 7 * 10^17:
                                                if uint64(_1526) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1946) + _2066 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1946) + _2066 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                    idx = idx + 1
                                    s = 0 / uint128(_1946) + _2066
                                    t = uint64(_1526)
                                    u = kashiPairs[idx].field_256
                                    v = kashiPairs[idx].field_0
                                    continue 
                                if 10^18 * uint128(_1946) / uint128(_1946) != 10^18:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _2192 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2192] = 26
                                mem[_2192 + 32] = 'SafeMath: division by zero'
                                if not uint128(_1946) + _2066:
                                    _2232 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2232 + 68] = mem[idx + _2192 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2232 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2232 + -mem[64] + 100
                                if 10^18 * uint128(_1946) / uint128(_1946) + _2066 <= s:
                                    if uint64(_1526) <= t:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 10^18 * uint128(_1946) / uint128(_1946) + _2066 >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if 10^18 * uint128(_1946) / uint128(_1946) + _2066 <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s >= 8 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                    if s <= 7 * 10^17:
                                        idx = idx + 1
                                        s = s
                                        t = t
                                        u = u
                                        v = v
                                        continue 
                                else:
                                    if 10^18 * uint128(_1946) / uint128(_1946) + _2066 <= 8 * 10^17:
                                        if s >= 7 * 10^17:
                                            if uint64(_1526) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1946) / uint128(_1946) + _2066 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1946) / uint128(_1946) + _2066 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                idx = idx + 1
                                s = 10^18 * uint128(_1946) / uint128(_1946) + _2066
                                t = uint64(_1526)
                                u = kashiPairs[idx].field_256
                                v = kashiPairs[idx].field_0
                                continue 
                            require ext_code.size(bentoBoxAddress)
                            call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                 gas gas_remaining wei
                                args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(address(v))
                            call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                 gas gas_remaining wei
                                args address(this.address), 1, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
        else:
            staticcall vaultAddress.governance() with:
                    gas gas_remaining wei
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(vaultAddress)
            if msg.sender == ext_call.return_data[12 len 20]:
                staticcall vaultAddress.debtOutstanding() with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not uint8(stor11.field_0):
                    mem[(2 * ceil32(return_data.size)) + 100] = this.address
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] <= dustThreshold:
                        mem[(4 * ceil32(return_data.size)) + 100] = wantAddress
                        mem[(4 * ceil32(return_data.size)) + 132] = this.address
                        require ext_code.size(bentoBoxAddress)
                        staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wantAddress, this.address
                        mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (6 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        if not dustThreshold:
                            if ext_call.return_data[0] > 0:
                                idx = 0
                                s = 0
                                t = 0
                                u = 0
                                v = 0
                                while idx < kashiPairs.length:
                                    _1369 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_1369] = 0
                                    mem[_1369 + 32] = 0
                                    mem[0] = 12
                                    _1417 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_1417] = kashiPairs[idx].field_0
                                    mem[_1417 + 32] = kashiPairs[idx].field_256
                                    require ext_code.size(kashiPairs[idx].field_0)
                                    staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1489 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 96
                                    _1529 = mem[_1489]
                                    require mem[_1489] == mem[_1489 + 24 len 8]
                                    require mem[_1489 + 32] == mem[_1489 + 56 len 8]
                                    require mem[_1489 + 64] == mem[_1489 + 80 len 16]
                                    require ext_code.size(kashiPairs[idx].field_0)
                                    staticcall kashiPairs[idx].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1729 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _1749 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_1729] == mem[_1729 + 16 len 16]
                                    mem[_1749] = mem[_1729]
                                    require mem[_1729 + 32] == mem[_1729 + 48 len 16]
                                    mem[_1749 + 32] = mem[_1729 + 32]
                                    _1827 = mem[_1749]
                                    require ext_code.size(kashiPairs[idx].field_0)
                                    staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1869 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _1889 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_1869] == mem[_1869 + 16 len 16]
                                    mem[_1889] = mem[_1869]
                                    require mem[_1869 + 32] == mem[_1869 + 48 len 16]
                                    mem[_1889 + 32] = mem[_1869 + 32]
                                    _1949 = mem[_1889]
                                    if ext_call.return_data[0] + uint128(_1827) < uint128(_1827):
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1827)
                                    mem[mem[64] + 68] = 0
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), ext_call.return_data[0] + uint128(_1827), 0
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _2049 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _2069 = mem[_2049]
                                    if uint128(_1949) + mem[_2049] < mem[_2049]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not uint128(_1949):
                                        _2149 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_2149] = 26
                                        mem[_2149 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_1949) + _2069:
                                            _2199 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 26
                                            idx = 0
                                            while idx < 26:
                                                mem[idx + _2199 + 68] = mem[idx + _2149 + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_2199 + 94] = 0
                                            revert with memory
                                              from mem[64]
                                               len _2199 + -mem[64] + 100
                                        if 0 / uint128(_1949) + _2069 <= s:
                                            if uint64(_1529) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1949) + _2069 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1949) + _2069 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                        else:
                                            if 0 / uint128(_1949) + _2069 <= 8 * 10^17:
                                                if s >= 7 * 10^17:
                                                    if uint64(_1529) <= t:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 0 / uint128(_1949) + _2069 >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 0 / uint128(_1949) + _2069 <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                        idx = idx + 1
                                        s = 0 / uint128(_1949) + _2069
                                        t = uint64(_1529)
                                        u = kashiPairs[idx].field_256
                                        v = kashiPairs[idx].field_0
                                        continue 
                                    if 10^18 * uint128(_1949) / uint128(_1949) != 10^18:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _2198 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_2198] = 26
                                    mem[_2198 + 32] = 'SafeMath: division by zero'
                                    if not uint128(_1949) + _2069:
                                        _2238 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _2238 + 68] = mem[idx + _2198 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_2238 + 94] = 0
                                        revert with memory
                                          from mem[64]
                                           len _2238 + -mem[64] + 100
                                    if 10^18 * uint128(_1949) / uint128(_1949) + _2069 <= s:
                                        if uint64(_1529) <= t:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1949) / uint128(_1949) + _2069 >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1949) / uint128(_1949) + _2069 <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                    else:
                                        if 10^18 * uint128(_1949) / uint128(_1949) + _2069 <= 8 * 10^17:
                                            if s >= 7 * 10^17:
                                                if uint64(_1529) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 10^18 * uint128(_1949) / uint128(_1949) + _2069 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 10^18 * uint128(_1949) / uint128(_1949) + _2069 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                    idx = idx + 1
                                    s = 10^18 * uint128(_1949) / uint128(_1949) + _2069
                                    t = uint64(_1529)
                                    u = kashiPairs[idx].field_256
                                    v = kashiPairs[idx].field_0
                                    continue 
                                require ext_code.size(bentoBoxAddress)
                                call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                     gas gas_remaining wei
                                    args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(address(v))
                                call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                     gas gas_remaining wei
                                    args address(this.address), 1, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                        else:
                            mem[(6 * ceil32(return_data.size)) + 100] = this.address
                            mem[(6 * ceil32(return_data.size)) + 132] = dustThreshold
                            mem[(6 * ceil32(return_data.size)) + 164] = 1
                            require ext_code.size(bentoBoxAddress)
                            staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args address(this.address), dustThreshold, 1
                            mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = (7 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            if ext_call.return_data[0] > ext_call.return_data[0]:
                                idx = 0
                                s = 0
                                t = 0
                                u = 0
                                v = 0
                                while idx < kashiPairs.length:
                                    _1368 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_1368] = 0
                                    mem[_1368 + 32] = 0
                                    mem[0] = 12
                                    _1413 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_1413] = kashiPairs[idx].field_0
                                    mem[_1413 + 32] = kashiPairs[idx].field_256
                                    require ext_code.size(kashiPairs[idx].field_0)
                                    staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1488 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 96
                                    _1528 = mem[_1488]
                                    require mem[_1488] == mem[_1488 + 24 len 8]
                                    require mem[_1488 + 32] == mem[_1488 + 56 len 8]
                                    require mem[_1488 + 64] == mem[_1488 + 80 len 16]
                                    require ext_code.size(kashiPairs[idx].field_0)
                                    staticcall kashiPairs[idx].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1728 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _1748 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_1728] == mem[_1728 + 16 len 16]
                                    mem[_1748] = mem[_1728]
                                    require mem[_1728 + 32] == mem[_1728 + 48 len 16]
                                    mem[_1748 + 32] = mem[_1728 + 32]
                                    _1824 = mem[_1748]
                                    require ext_code.size(kashiPairs[idx].field_0)
                                    staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1868 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _1888 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_1868] == mem[_1868 + 16 len 16]
                                    mem[_1888] = mem[_1868]
                                    require mem[_1868 + 32] == mem[_1868 + 48 len 16]
                                    mem[_1888 + 32] = mem[_1868 + 32]
                                    _1948 = mem[_1888]
                                    if ext_call.return_data[0] + uint128(_1824) < uint128(_1824):
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1824)
                                    mem[mem[64] + 68] = 0
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), ext_call.return_data[0] + uint128(_1824), 0
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _2048 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _2068 = mem[_2048]
                                    if uint128(_1948) + mem[_2048] < mem[_2048]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not uint128(_1948):
                                        _2148 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_2148] = 26
                                        mem[_2148 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_1948) + _2068:
                                            _2197 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 26
                                            idx = 0
                                            while idx < 26:
                                                mem[idx + _2197 + 68] = mem[idx + _2148 + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_2197 + 94] = 0
                                            revert with memory
                                              from mem[64]
                                               len _2197 + -mem[64] + 100
                                        if 0 / uint128(_1948) + _2068 <= s:
                                            if uint64(_1528) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1948) + _2068 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1948) + _2068 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                        else:
                                            if 0 / uint128(_1948) + _2068 <= 8 * 10^17:
                                                if s >= 7 * 10^17:
                                                    if uint64(_1528) <= t:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 0 / uint128(_1948) + _2068 >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 0 / uint128(_1948) + _2068 <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                        idx = idx + 1
                                        s = 0 / uint128(_1948) + _2068
                                        t = uint64(_1528)
                                        u = kashiPairs[idx].field_256
                                        v = kashiPairs[idx].field_0
                                        continue 
                                    if 10^18 * uint128(_1948) / uint128(_1948) != 10^18:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _2196 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_2196] = 26
                                    mem[_2196 + 32] = 'SafeMath: division by zero'
                                    if not uint128(_1948) + _2068:
                                        _2236 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _2236 + 68] = mem[idx + _2196 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_2236 + 94] = 0
                                        revert with memory
                                          from mem[64]
                                           len _2236 + -mem[64] + 100
                                    if 10^18 * uint128(_1948) / uint128(_1948) + _2068 <= s:
                                        if uint64(_1528) <= t:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1948) / uint128(_1948) + _2068 >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1948) / uint128(_1948) + _2068 <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                    else:
                                        if 10^18 * uint128(_1948) / uint128(_1948) + _2068 <= 8 * 10^17:
                                            if s >= 7 * 10^17:
                                                if uint64(_1528) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 10^18 * uint128(_1948) / uint128(_1948) + _2068 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 10^18 * uint128(_1948) / uint128(_1948) + _2068 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                    idx = idx + 1
                                    s = 10^18 * uint128(_1948) / uint128(_1948) + _2068
                                    t = uint64(_1528)
                                    u = kashiPairs[idx].field_256
                                    v = kashiPairs[idx].field_0
                                    continue 
                                require ext_code.size(bentoBoxAddress)
                                call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                     gas gas_remaining wei
                                    args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(address(v))
                                call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                     gas gas_remaining wei
                                    args address(this.address), 1, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                    else:
                        mem[(4 * ceil32(return_data.size)) + 132] = this.address
                        mem[(4 * ceil32(return_data.size)) + 164] = this.address
                        mem[(4 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                        mem[(4 * ceil32(return_data.size)) + 228] = 0
                        require ext_code.size(bentoBoxAddress)
                        call bentoBoxAddress.deposit(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                             gas gas_remaining wei
                            args wantAddress, address(this.address), address(this.address), ext_call.return_data[0], 0
                        mem[(4 * ceil32(return_data.size)) + 96 len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        mem[(6 * ceil32(return_data.size)) + 100] = wantAddress
                        mem[(6 * ceil32(return_data.size)) + 132] = this.address
                        require ext_code.size(bentoBoxAddress)
                        staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wantAddress, this.address
                        mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (7 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        if not dustThreshold:
                            if ext_call.return_data[0] > 0:
                                idx = 0
                                s = 0
                                t = 0
                                u = 0
                                v = 0
                                while idx < kashiPairs.length:
                                    _1371 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_1371] = 0
                                    mem[_1371 + 32] = 0
                                    mem[0] = 12
                                    _1425 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_1425] = kashiPairs[idx].field_0
                                    mem[_1425 + 32] = kashiPairs[idx].field_256
                                    require ext_code.size(kashiPairs[idx].field_0)
                                    staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1491 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 96
                                    _1531 = mem[_1491]
                                    require mem[_1491] == mem[_1491 + 24 len 8]
                                    require mem[_1491 + 32] == mem[_1491 + 56 len 8]
                                    require mem[_1491 + 64] == mem[_1491 + 80 len 16]
                                    require ext_code.size(kashiPairs[idx].field_0)
                                    staticcall kashiPairs[idx].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1731 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _1751 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_1731] == mem[_1731 + 16 len 16]
                                    mem[_1751] = mem[_1731]
                                    require mem[_1731 + 32] == mem[_1731 + 48 len 16]
                                    mem[_1751 + 32] = mem[_1731 + 32]
                                    _1833 = mem[_1751]
                                    require ext_code.size(kashiPairs[idx].field_0)
                                    staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1871 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _1891 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_1871] == mem[_1871 + 16 len 16]
                                    mem[_1891] = mem[_1871]
                                    require mem[_1871 + 32] == mem[_1871 + 48 len 16]
                                    mem[_1891 + 32] = mem[_1871 + 32]
                                    _1951 = mem[_1891]
                                    if ext_call.return_data[0] + uint128(_1833) < uint128(_1833):
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1833)
                                    mem[mem[64] + 68] = 0
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), ext_call.return_data[0] + uint128(_1833), 0
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _2051 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _2071 = mem[_2051]
                                    if uint128(_1951) + mem[_2051] < mem[_2051]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not uint128(_1951):
                                        _2151 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_2151] = 26
                                        mem[_2151 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_1951) + _2071:
                                            _2203 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 26
                                            idx = 0
                                            while idx < 26:
                                                mem[idx + _2203 + 68] = mem[idx + _2151 + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_2203 + 94] = 0
                                            revert with memory
                                              from mem[64]
                                               len _2203 + -mem[64] + 100
                                        if 0 / uint128(_1951) + _2071 <= s:
                                            if uint64(_1531) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1951) + _2071 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1951) + _2071 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                        else:
                                            if 0 / uint128(_1951) + _2071 <= 8 * 10^17:
                                                if s >= 7 * 10^17:
                                                    if uint64(_1531) <= t:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 0 / uint128(_1951) + _2071 >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 0 / uint128(_1951) + _2071 <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                        idx = idx + 1
                                        s = 0 / uint128(_1951) + _2071
                                        t = uint64(_1531)
                                        u = kashiPairs[idx].field_256
                                        v = kashiPairs[idx].field_0
                                        continue 
                                    if 10^18 * uint128(_1951) / uint128(_1951) != 10^18:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _2202 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_2202] = 26
                                    mem[_2202 + 32] = 'SafeMath: division by zero'
                                    if not uint128(_1951) + _2071:
                                        _2242 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _2242 + 68] = mem[idx + _2202 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_2242 + 94] = 0
                                        revert with memory
                                          from mem[64]
                                           len _2242 + -mem[64] + 100
                                    if 10^18 * uint128(_1951) / uint128(_1951) + _2071 <= s:
                                        if uint64(_1531) <= t:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1951) / uint128(_1951) + _2071 >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1951) / uint128(_1951) + _2071 <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                    else:
                                        if 10^18 * uint128(_1951) / uint128(_1951) + _2071 <= 8 * 10^17:
                                            if s >= 7 * 10^17:
                                                if uint64(_1531) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 10^18 * uint128(_1951) / uint128(_1951) + _2071 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 10^18 * uint128(_1951) / uint128(_1951) + _2071 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                    idx = idx + 1
                                    s = 10^18 * uint128(_1951) / uint128(_1951) + _2071
                                    t = uint64(_1531)
                                    u = kashiPairs[idx].field_256
                                    v = kashiPairs[idx].field_0
                                    continue 
                                require ext_code.size(bentoBoxAddress)
                                call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                     gas gas_remaining wei
                                    args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(address(v))
                                call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                     gas gas_remaining wei
                                    args address(this.address), 1, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                        else:
                            mem[(7 * ceil32(return_data.size)) + 100] = this.address
                            mem[(7 * ceil32(return_data.size)) + 132] = dustThreshold
                            mem[(7 * ceil32(return_data.size)) + 164] = 1
                            require ext_code.size(bentoBoxAddress)
                            staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args address(this.address), dustThreshold, 1
                            mem[(7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = (8 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            if ext_call.return_data[0] > ext_call.return_data[0]:
                                idx = 0
                                s = 0
                                t = 0
                                u = 0
                                v = 0
                                while idx < kashiPairs.length:
                                    _1370 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_1370] = 0
                                    mem[_1370 + 32] = 0
                                    mem[0] = 12
                                    _1421 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_1421] = kashiPairs[idx].field_0
                                    mem[_1421 + 32] = kashiPairs[idx].field_256
                                    require ext_code.size(kashiPairs[idx].field_0)
                                    staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1490 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 96
                                    _1530 = mem[_1490]
                                    require mem[_1490] == mem[_1490 + 24 len 8]
                                    require mem[_1490 + 32] == mem[_1490 + 56 len 8]
                                    require mem[_1490 + 64] == mem[_1490 + 80 len 16]
                                    require ext_code.size(kashiPairs[idx].field_0)
                                    staticcall kashiPairs[idx].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1730 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _1750 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_1730] == mem[_1730 + 16 len 16]
                                    mem[_1750] = mem[_1730]
                                    require mem[_1730 + 32] == mem[_1730 + 48 len 16]
                                    mem[_1750 + 32] = mem[_1730 + 32]
                                    _1830 = mem[_1750]
                                    require ext_code.size(kashiPairs[idx].field_0)
                                    staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1870 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _1890 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_1870] == mem[_1870 + 16 len 16]
                                    mem[_1890] = mem[_1870]
                                    require mem[_1870 + 32] == mem[_1870 + 48 len 16]
                                    mem[_1890 + 32] = mem[_1870 + 32]
                                    _1950 = mem[_1890]
                                    if ext_call.return_data[0] + uint128(_1830) < uint128(_1830):
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1830)
                                    mem[mem[64] + 68] = 0
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), ext_call.return_data[0] + uint128(_1830), 0
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _2050 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _2070 = mem[_2050]
                                    if uint128(_1950) + mem[_2050] < mem[_2050]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not uint128(_1950):
                                        _2150 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_2150] = 26
                                        mem[_2150 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_1950) + _2070:
                                            _2201 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 26
                                            idx = 0
                                            while idx < 26:
                                                mem[idx + _2201 + 68] = mem[idx + _2150 + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_2201 + 94] = 0
                                            revert with memory
                                              from mem[64]
                                               len _2201 + -mem[64] + 100
                                        if 0 / uint128(_1950) + _2070 <= s:
                                            if uint64(_1530) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1950) + _2070 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 0 / uint128(_1950) + _2070 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                        else:
                                            if 0 / uint128(_1950) + _2070 <= 8 * 10^17:
                                                if s >= 7 * 10^17:
                                                    if uint64(_1530) <= t:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 0 / uint128(_1950) + _2070 >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 0 / uint128(_1950) + _2070 <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                        idx = idx + 1
                                        s = 0 / uint128(_1950) + _2070
                                        t = uint64(_1530)
                                        u = kashiPairs[idx].field_256
                                        v = kashiPairs[idx].field_0
                                        continue 
                                    if 10^18 * uint128(_1950) / uint128(_1950) != 10^18:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _2200 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_2200] = 26
                                    mem[_2200 + 32] = 'SafeMath: division by zero'
                                    if not uint128(_1950) + _2070:
                                        _2240 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _2240 + 68] = mem[idx + _2200 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_2240 + 94] = 0
                                        revert with memory
                                          from mem[64]
                                           len _2240 + -mem[64] + 100
                                    if 10^18 * uint128(_1950) / uint128(_1950) + _2070 <= s:
                                        if uint64(_1530) <= t:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1950) / uint128(_1950) + _2070 >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if 10^18 * uint128(_1950) / uint128(_1950) + _2070 <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s >= 8 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                        if s <= 7 * 10^17:
                                            idx = idx + 1
                                            s = s
                                            t = t
                                            u = u
                                            v = v
                                            continue 
                                    else:
                                        if 10^18 * uint128(_1950) / uint128(_1950) + _2070 <= 8 * 10^17:
                                            if s >= 7 * 10^17:
                                                if uint64(_1530) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 10^18 * uint128(_1950) / uint128(_1950) + _2070 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 10^18 * uint128(_1950) / uint128(_1950) + _2070 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                    idx = idx + 1
                                    s = 10^18 * uint128(_1950) / uint128(_1950) + _2070
                                    t = uint64(_1530)
                                    u = kashiPairs[idx].field_256
                                    v = kashiPairs[idx].field_0
                                    continue 
                                require ext_code.size(bentoBoxAddress)
                                call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                     gas gas_remaining wei
                                    args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(address(v))
                                call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                     gas gas_remaining wei
                                    args address(this.address), 1, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
            else:
                staticcall vaultAddress.guardian() with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(vaultAddress)
                if msg.sender == ext_call.return_data[12 len 20]:
                    staticcall vaultAddress.debtOutstanding() with:
                            gas gas_remaining wei
                    mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not uint8(stor11.field_0):
                        mem[(4 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= dustThreshold:
                            mem[(6 * ceil32(return_data.size)) + 100] = wantAddress
                            mem[(6 * ceil32(return_data.size)) + 132] = this.address
                            require ext_code.size(bentoBoxAddress)
                            staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args wantAddress, this.address
                            mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = (7 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            if not dustThreshold:
                                if ext_call.return_data[0] > 0:
                                    idx = 0
                                    s = 0
                                    t = 0
                                    u = 0
                                    v = 0
                                    while idx < kashiPairs.length:
                                        _1373 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1373] = 0
                                        mem[_1373 + 32] = 0
                                        mem[0] = 12
                                        _1433 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1433] = kashiPairs[idx].field_0
                                        mem[_1433 + 32] = kashiPairs[idx].field_256
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1493 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 96
                                        _1533 = mem[_1493]
                                        require mem[_1493] == mem[_1493 + 24 len 8]
                                        require mem[_1493 + 32] == mem[_1493 + 56 len 8]
                                        require mem[_1493 + 64] == mem[_1493 + 80 len 16]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalAsset() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1733 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1753 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1733] == mem[_1733 + 16 len 16]
                                        mem[_1753] = mem[_1733]
                                        require mem[_1733 + 32] == mem[_1733 + 48 len 16]
                                        mem[_1753 + 32] = mem[_1733 + 32]
                                        _1839 = mem[_1753]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1873 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1893 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1873] == mem[_1873 + 16 len 16]
                                        mem[_1893] = mem[_1873]
                                        require mem[_1873 + 32] == mem[_1873 + 48 len 16]
                                        mem[_1893 + 32] = mem[_1873 + 32]
                                        _1953 = mem[_1893]
                                        if ext_call.return_data[0] + uint128(_1839) < uint128(_1839):
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1839)
                                        mem[mem[64] + 68] = 0
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), ext_call.return_data[0] + uint128(_1839), 0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _2053 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _2073 = mem[_2053]
                                        if uint128(_1953) + mem[_2053] < mem[_2053]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not uint128(_1953):
                                            _2153 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_2153] = 26
                                            mem[_2153 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_1953) + _2073:
                                                _2207 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 26
                                                idx = 0
                                                while idx < 26:
                                                    mem[idx + _2207 + 68] = mem[idx + _2153 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_2207 + 94] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _2207 + -mem[64] + 100
                                            if 0 / uint128(_1953) + _2073 <= s:
                                                if uint64(_1533) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1953) + _2073 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1953) + _2073 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                            else:
                                                if 0 / uint128(_1953) + _2073 <= 8 * 10^17:
                                                    if s >= 7 * 10^17:
                                                        if uint64(_1533) <= t:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1953) + _2073 >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1953) + _2073 <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                            idx = idx + 1
                                            s = 0 / uint128(_1953) + _2073
                                            t = uint64(_1533)
                                            u = kashiPairs[idx].field_256
                                            v = kashiPairs[idx].field_0
                                            continue 
                                        if 10^18 * uint128(_1953) / uint128(_1953) != 10^18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _2206 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_2206] = 26
                                        mem[_2206 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_1953) + _2073:
                                            _2246 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 26
                                            idx = 0
                                            while idx < 26:
                                                mem[idx + _2246 + 68] = mem[idx + _2206 + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_2246 + 94] = 0
                                            revert with memory
                                              from mem[64]
                                               len _2246 + -mem[64] + 100
                                        if 10^18 * uint128(_1953) / uint128(_1953) + _2073 <= s:
                                            if uint64(_1533) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1953) / uint128(_1953) + _2073 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1953) / uint128(_1953) + _2073 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                        else:
                                            if 10^18 * uint128(_1953) / uint128(_1953) + _2073 <= 8 * 10^17:
                                                if s >= 7 * 10^17:
                                                    if uint64(_1533) <= t:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1953) / uint128(_1953) + _2073 >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1953) / uint128(_1953) + _2073 <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                        idx = idx + 1
                                        s = 10^18 * uint128(_1953) / uint128(_1953) + _2073
                                        t = uint64(_1533)
                                        u = kashiPairs[idx].field_256
                                        v = kashiPairs[idx].field_0
                                        continue 
                                    require ext_code.size(bentoBoxAddress)
                                    call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                         gas gas_remaining wei
                                        args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(address(v))
                                    call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                         gas gas_remaining wei
                                        args address(this.address), 1, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                            else:
                                mem[(7 * ceil32(return_data.size)) + 100] = this.address
                                mem[(7 * ceil32(return_data.size)) + 132] = dustThreshold
                                mem[(7 * ceil32(return_data.size)) + 164] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), dustThreshold, 1
                                mem[(7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = (8 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    idx = 0
                                    s = 0
                                    t = 0
                                    u = 0
                                    v = 0
                                    while idx < kashiPairs.length:
                                        _1372 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1372] = 0
                                        mem[_1372 + 32] = 0
                                        mem[0] = 12
                                        _1429 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1429] = kashiPairs[idx].field_0
                                        mem[_1429 + 32] = kashiPairs[idx].field_256
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1492 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 96
                                        _1532 = mem[_1492]
                                        require mem[_1492] == mem[_1492 + 24 len 8]
                                        require mem[_1492 + 32] == mem[_1492 + 56 len 8]
                                        require mem[_1492 + 64] == mem[_1492 + 80 len 16]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalAsset() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1732 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1752 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1732] == mem[_1732 + 16 len 16]
                                        mem[_1752] = mem[_1732]
                                        require mem[_1732 + 32] == mem[_1732 + 48 len 16]
                                        mem[_1752 + 32] = mem[_1732 + 32]
                                        _1836 = mem[_1752]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1872 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1892 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1872] == mem[_1872 + 16 len 16]
                                        mem[_1892] = mem[_1872]
                                        require mem[_1872 + 32] == mem[_1872 + 48 len 16]
                                        mem[_1892 + 32] = mem[_1872 + 32]
                                        _1952 = mem[_1892]
                                        if ext_call.return_data[0] + uint128(_1836) < uint128(_1836):
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1836)
                                        mem[mem[64] + 68] = 0
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), ext_call.return_data[0] + uint128(_1836), 0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _2052 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _2072 = mem[_2052]
                                        if uint128(_1952) + mem[_2052] < mem[_2052]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not uint128(_1952):
                                            _2152 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_2152] = 26
                                            mem[_2152 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_1952) + _2072:
                                                _2205 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 26
                                                idx = 0
                                                while idx < 26:
                                                    mem[idx + _2205 + 68] = mem[idx + _2152 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_2205 + 94] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _2205 + -mem[64] + 100
                                            if 0 / uint128(_1952) + _2072 <= s:
                                                if uint64(_1532) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1952) + _2072 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1952) + _2072 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                            else:
                                                if 0 / uint128(_1952) + _2072 <= 8 * 10^17:
                                                    if s >= 7 * 10^17:
                                                        if uint64(_1532) <= t:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1952) + _2072 >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1952) + _2072 <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                            idx = idx + 1
                                            s = 0 / uint128(_1952) + _2072
                                            t = uint64(_1532)
                                            u = kashiPairs[idx].field_256
                                            v = kashiPairs[idx].field_0
                                            continue 
                                        if 10^18 * uint128(_1952) / uint128(_1952) != 10^18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _2204 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_2204] = 26
                                        mem[_2204 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_1952) + _2072:
                                            _2244 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 26
                                            idx = 0
                                            while idx < 26:
                                                mem[idx + _2244 + 68] = mem[idx + _2204 + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_2244 + 94] = 0
                                            revert with memory
                                              from mem[64]
                                               len _2244 + -mem[64] + 100
                                        if 10^18 * uint128(_1952) / uint128(_1952) + _2072 <= s:
                                            if uint64(_1532) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1952) / uint128(_1952) + _2072 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1952) / uint128(_1952) + _2072 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                        else:
                                            if 10^18 * uint128(_1952) / uint128(_1952) + _2072 <= 8 * 10^17:
                                                if s >= 7 * 10^17:
                                                    if uint64(_1532) <= t:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1952) / uint128(_1952) + _2072 >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1952) / uint128(_1952) + _2072 <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                        idx = idx + 1
                                        s = 10^18 * uint128(_1952) / uint128(_1952) + _2072
                                        t = uint64(_1532)
                                        u = kashiPairs[idx].field_256
                                        v = kashiPairs[idx].field_0
                                        continue 
                                    require ext_code.size(bentoBoxAddress)
                                    call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                         gas gas_remaining wei
                                        args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(address(v))
                                    call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                         gas gas_remaining wei
                                        args address(this.address), 1, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                        else:
                            mem[(6 * ceil32(return_data.size)) + 132] = this.address
                            mem[(6 * ceil32(return_data.size)) + 164] = this.address
                            mem[(6 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                            mem[(6 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(bentoBoxAddress)
                            call bentoBoxAddress.deposit(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args wantAddress, address(this.address), address(this.address), ext_call.return_data[0], 0
                            mem[(6 * ceil32(return_data.size)) + 96 len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 64
                            mem[(7 * ceil32(return_data.size)) + 100] = wantAddress
                            mem[(7 * ceil32(return_data.size)) + 132] = this.address
                            require ext_code.size(bentoBoxAddress)
                            staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args wantAddress, this.address
                            mem[(7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = (8 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            if not dustThreshold:
                                if ext_call.return_data[0] > 0:
                                    idx = 0
                                    s = 0
                                    t = 0
                                    u = 0
                                    v = 0
                                    while idx < kashiPairs.length:
                                        _1375 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1375] = 0
                                        mem[_1375 + 32] = 0
                                        mem[0] = 12
                                        _1441 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1441] = kashiPairs[idx].field_0
                                        mem[_1441 + 32] = kashiPairs[idx].field_256
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1495 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 96
                                        _1535 = mem[_1495]
                                        require mem[_1495] == mem[_1495 + 24 len 8]
                                        require mem[_1495 + 32] == mem[_1495 + 56 len 8]
                                        require mem[_1495 + 64] == mem[_1495 + 80 len 16]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalAsset() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1735 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1755 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1735] == mem[_1735 + 16 len 16]
                                        mem[_1755] = mem[_1735]
                                        require mem[_1735 + 32] == mem[_1735 + 48 len 16]
                                        mem[_1755 + 32] = mem[_1735 + 32]
                                        _1845 = mem[_1755]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1875 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1895 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1875] == mem[_1875 + 16 len 16]
                                        mem[_1895] = mem[_1875]
                                        require mem[_1875 + 32] == mem[_1875 + 48 len 16]
                                        mem[_1895 + 32] = mem[_1875 + 32]
                                        _1955 = mem[_1895]
                                        if ext_call.return_data[0] + uint128(_1845) < uint128(_1845):
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1845)
                                        mem[mem[64] + 68] = 0
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), ext_call.return_data[0] + uint128(_1845), 0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _2055 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _2075 = mem[_2055]
                                        if uint128(_1955) + mem[_2055] < mem[_2055]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not uint128(_1955):
                                            _2155 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_2155] = 26
                                            mem[_2155 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_1955) + _2075:
                                                _2211 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 26
                                                idx = 0
                                                while idx < 26:
                                                    mem[idx + _2211 + 68] = mem[idx + _2155 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_2211 + 94] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _2211 + -mem[64] + 100
                                            if 0 / uint128(_1955) + _2075 <= s:
                                                if uint64(_1535) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1955) + _2075 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1955) + _2075 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                            else:
                                                if 0 / uint128(_1955) + _2075 <= 8 * 10^17:
                                                    if s >= 7 * 10^17:
                                                        if uint64(_1535) <= t:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1955) + _2075 >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1955) + _2075 <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                            idx = idx + 1
                                            s = 0 / uint128(_1955) + _2075
                                            t = uint64(_1535)
                                            u = kashiPairs[idx].field_256
                                            v = kashiPairs[idx].field_0
                                            continue 
                                        if 10^18 * uint128(_1955) / uint128(_1955) != 10^18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _2210 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_2210] = 26
                                        mem[_2210 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_1955) + _2075:
                                            _2250 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 26
                                            idx = 0
                                            while idx < 26:
                                                mem[idx + _2250 + 68] = mem[idx + _2210 + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_2250 + 94] = 0
                                            revert with memory
                                              from mem[64]
                                               len _2250 + -mem[64] + 100
                                        if 10^18 * uint128(_1955) / uint128(_1955) + _2075 <= s:
                                            if uint64(_1535) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1955) / uint128(_1955) + _2075 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1955) / uint128(_1955) + _2075 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                        else:
                                            if 10^18 * uint128(_1955) / uint128(_1955) + _2075 <= 8 * 10^17:
                                                if s >= 7 * 10^17:
                                                    if uint64(_1535) <= t:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1955) / uint128(_1955) + _2075 >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1955) / uint128(_1955) + _2075 <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                        idx = idx + 1
                                        s = 10^18 * uint128(_1955) / uint128(_1955) + _2075
                                        t = uint64(_1535)
                                        u = kashiPairs[idx].field_256
                                        v = kashiPairs[idx].field_0
                                        continue 
                                    require ext_code.size(bentoBoxAddress)
                                    call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                         gas gas_remaining wei
                                        args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(address(v))
                                    call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                         gas gas_remaining wei
                                        args address(this.address), 1, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                            else:
                                mem[(8 * ceil32(return_data.size)) + 100] = this.address
                                mem[(8 * ceil32(return_data.size)) + 132] = dustThreshold
                                mem[(8 * ceil32(return_data.size)) + 164] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), dustThreshold, 1
                                mem[(8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = (10 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    idx = 0
                                    s = 0
                                    t = 0
                                    u = 0
                                    v = 0
                                    while idx < kashiPairs.length:
                                        _1374 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1374] = 0
                                        mem[_1374 + 32] = 0
                                        mem[0] = 12
                                        _1437 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1437] = kashiPairs[idx].field_0
                                        mem[_1437 + 32] = kashiPairs[idx].field_256
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1494 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 96
                                        _1534 = mem[_1494]
                                        require mem[_1494] == mem[_1494 + 24 len 8]
                                        require mem[_1494 + 32] == mem[_1494 + 56 len 8]
                                        require mem[_1494 + 64] == mem[_1494 + 80 len 16]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalAsset() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1734 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1754 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1734] == mem[_1734 + 16 len 16]
                                        mem[_1754] = mem[_1734]
                                        require mem[_1734 + 32] == mem[_1734 + 48 len 16]
                                        mem[_1754 + 32] = mem[_1734 + 32]
                                        _1842 = mem[_1754]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1874 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1894 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1874] == mem[_1874 + 16 len 16]
                                        mem[_1894] = mem[_1874]
                                        require mem[_1874 + 32] == mem[_1874 + 48 len 16]
                                        mem[_1894 + 32] = mem[_1874 + 32]
                                        _1954 = mem[_1894]
                                        if ext_call.return_data[0] + uint128(_1842) < uint128(_1842):
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1842)
                                        mem[mem[64] + 68] = 0
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), ext_call.return_data[0] + uint128(_1842), 0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _2054 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _2074 = mem[_2054]
                                        if uint128(_1954) + mem[_2054] < mem[_2054]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not uint128(_1954):
                                            _2154 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_2154] = 26
                                            mem[_2154 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_1954) + _2074:
                                                _2209 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 26
                                                idx = 0
                                                while idx < 26:
                                                    mem[idx + _2209 + 68] = mem[idx + _2154 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_2209 + 94] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _2209 + -mem[64] + 100
                                            if 0 / uint128(_1954) + _2074 <= s:
                                                if uint64(_1534) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1954) + _2074 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1954) + _2074 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                            else:
                                                if 0 / uint128(_1954) + _2074 <= 8 * 10^17:
                                                    if s >= 7 * 10^17:
                                                        if uint64(_1534) <= t:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1954) + _2074 >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1954) + _2074 <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                            idx = idx + 1
                                            s = 0 / uint128(_1954) + _2074
                                            t = uint64(_1534)
                                            u = kashiPairs[idx].field_256
                                            v = kashiPairs[idx].field_0
                                            continue 
                                        if 10^18 * uint128(_1954) / uint128(_1954) != 10^18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _2208 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_2208] = 26
                                        mem[_2208 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_1954) + _2074:
                                            _2248 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 26
                                            idx = 0
                                            while idx < 26:
                                                mem[idx + _2248 + 68] = mem[idx + _2208 + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_2248 + 94] = 0
                                            revert with memory
                                              from mem[64]
                                               len _2248 + -mem[64] + 100
                                        if 10^18 * uint128(_1954) / uint128(_1954) + _2074 <= s:
                                            if uint64(_1534) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1954) / uint128(_1954) + _2074 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1954) / uint128(_1954) + _2074 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                        else:
                                            if 10^18 * uint128(_1954) / uint128(_1954) + _2074 <= 8 * 10^17:
                                                if s >= 7 * 10^17:
                                                    if uint64(_1534) <= t:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1954) / uint128(_1954) + _2074 >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1954) / uint128(_1954) + _2074 <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                        idx = idx + 1
                                        s = 10^18 * uint128(_1954) / uint128(_1954) + _2074
                                        t = uint64(_1534)
                                        u = kashiPairs[idx].field_256
                                        v = kashiPairs[idx].field_0
                                        continue 
                                    require ext_code.size(bentoBoxAddress)
                                    call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                         gas gas_remaining wei
                                        args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(address(v))
                                    call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                         gas gas_remaining wei
                                        args address(this.address), 1, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                else:
                    staticcall vaultAddress.management() with:
                            gas gas_remaining wei
                    mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != msg.sender:
                        revert with 0, '!authorized'
                    require ext_code.size(vaultAddress)
                    staticcall vaultAddress.debtOutstanding() with:
                            gas gas_remaining wei
                    mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not uint8(stor11.field_0):
                        mem[(6 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= dustThreshold:
                            mem[(7 * ceil32(return_data.size)) + 100] = wantAddress
                            mem[(7 * ceil32(return_data.size)) + 132] = this.address
                            require ext_code.size(bentoBoxAddress)
                            staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args wantAddress, this.address
                            mem[(7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = (8 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            if not dustThreshold:
                                if ext_call.return_data[0] > 0:
                                    idx = 0
                                    s = 0
                                    t = 0
                                    u = 0
                                    v = 0
                                    while idx < kashiPairs.length:
                                        _1377 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1377] = 0
                                        mem[_1377 + 32] = 0
                                        mem[0] = 12
                                        _1449 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1449] = kashiPairs[idx].field_0
                                        mem[_1449 + 32] = kashiPairs[idx].field_256
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1497 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 96
                                        _1537 = mem[_1497]
                                        require mem[_1497] == mem[_1497 + 24 len 8]
                                        require mem[_1497 + 32] == mem[_1497 + 56 len 8]
                                        require mem[_1497 + 64] == mem[_1497 + 80 len 16]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalAsset() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1737 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1757 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1737] == mem[_1737 + 16 len 16]
                                        mem[_1757] = mem[_1737]
                                        require mem[_1737 + 32] == mem[_1737 + 48 len 16]
                                        mem[_1757 + 32] = mem[_1737 + 32]
                                        _1851 = mem[_1757]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1877 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1897 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1877] == mem[_1877 + 16 len 16]
                                        mem[_1897] = mem[_1877]
                                        require mem[_1877 + 32] == mem[_1877 + 48 len 16]
                                        mem[_1897 + 32] = mem[_1877 + 32]
                                        _1957 = mem[_1897]
                                        if ext_call.return_data[0] + uint128(_1851) < uint128(_1851):
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1851)
                                        mem[mem[64] + 68] = 0
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), ext_call.return_data[0] + uint128(_1851), 0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _2057 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _2077 = mem[_2057]
                                        if uint128(_1957) + mem[_2057] < mem[_2057]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not uint128(_1957):
                                            _2157 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_2157] = 26
                                            mem[_2157 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_1957) + _2077:
                                                _2215 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 26
                                                idx = 0
                                                while idx < 26:
                                                    mem[idx + _2215 + 68] = mem[idx + _2157 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_2215 + 94] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _2215 + -mem[64] + 100
                                            if 0 / uint128(_1957) + _2077 <= s:
                                                if uint64(_1537) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1957) + _2077 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1957) + _2077 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                            else:
                                                if 0 / uint128(_1957) + _2077 <= 8 * 10^17:
                                                    if s >= 7 * 10^17:
                                                        if uint64(_1537) <= t:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1957) + _2077 >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1957) + _2077 <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                            idx = idx + 1
                                            s = 0 / uint128(_1957) + _2077
                                            t = uint64(_1537)
                                            u = kashiPairs[idx].field_256
                                            v = kashiPairs[idx].field_0
                                            continue 
                                        if 10^18 * uint128(_1957) / uint128(_1957) != 10^18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _2214 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_2214] = 26
                                        mem[_2214 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_1957) + _2077:
                                            _2254 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 26
                                            idx = 0
                                            while idx < 26:
                                                mem[idx + _2254 + 68] = mem[idx + _2214 + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_2254 + 94] = 0
                                            revert with memory
                                              from mem[64]
                                               len _2254 + -mem[64] + 100
                                        if 10^18 * uint128(_1957) / uint128(_1957) + _2077 <= s:
                                            if uint64(_1537) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1957) / uint128(_1957) + _2077 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1957) / uint128(_1957) + _2077 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                        else:
                                            if 10^18 * uint128(_1957) / uint128(_1957) + _2077 <= 8 * 10^17:
                                                if s >= 7 * 10^17:
                                                    if uint64(_1537) <= t:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1957) / uint128(_1957) + _2077 >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1957) / uint128(_1957) + _2077 <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                        idx = idx + 1
                                        s = 10^18 * uint128(_1957) / uint128(_1957) + _2077
                                        t = uint64(_1537)
                                        u = kashiPairs[idx].field_256
                                        v = kashiPairs[idx].field_0
                                        continue 
                                    require ext_code.size(bentoBoxAddress)
                                    call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                         gas gas_remaining wei
                                        args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(address(v))
                                    call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                         gas gas_remaining wei
                                        args address(this.address), 1, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                            else:
                                mem[(8 * ceil32(return_data.size)) + 100] = this.address
                                mem[(8 * ceil32(return_data.size)) + 132] = dustThreshold
                                mem[(8 * ceil32(return_data.size)) + 164] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), dustThreshold, 1
                                mem[(8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = (10 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    idx = 0
                                    s = 0
                                    t = 0
                                    u = 0
                                    v = 0
                                    while idx < kashiPairs.length:
                                        _1376 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1376] = 0
                                        mem[_1376 + 32] = 0
                                        mem[0] = 12
                                        _1445 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1445] = kashiPairs[idx].field_0
                                        mem[_1445 + 32] = kashiPairs[idx].field_256
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1496 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 96
                                        _1536 = mem[_1496]
                                        require mem[_1496] == mem[_1496 + 24 len 8]
                                        require mem[_1496 + 32] == mem[_1496 + 56 len 8]
                                        require mem[_1496 + 64] == mem[_1496 + 80 len 16]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalAsset() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1736 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1756 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1736] == mem[_1736 + 16 len 16]
                                        mem[_1756] = mem[_1736]
                                        require mem[_1736 + 32] == mem[_1736 + 48 len 16]
                                        mem[_1756 + 32] = mem[_1736 + 32]
                                        _1848 = mem[_1756]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1876 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1896 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1876] == mem[_1876 + 16 len 16]
                                        mem[_1896] = mem[_1876]
                                        require mem[_1876 + 32] == mem[_1876 + 48 len 16]
                                        mem[_1896 + 32] = mem[_1876 + 32]
                                        _1956 = mem[_1896]
                                        if ext_call.return_data[0] + uint128(_1848) < uint128(_1848):
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1848)
                                        mem[mem[64] + 68] = 0
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), ext_call.return_data[0] + uint128(_1848), 0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _2056 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _2076 = mem[_2056]
                                        if uint128(_1956) + mem[_2056] < mem[_2056]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not uint128(_1956):
                                            _2156 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_2156] = 26
                                            mem[_2156 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_1956) + _2076:
                                                _2213 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 26
                                                idx = 0
                                                while idx < 26:
                                                    mem[idx + _2213 + 68] = mem[idx + _2156 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_2213 + 94] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _2213 + -mem[64] + 100
                                            if 0 / uint128(_1956) + _2076 <= s:
                                                if uint64(_1536) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1956) + _2076 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1956) + _2076 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                            else:
                                                if 0 / uint128(_1956) + _2076 <= 8 * 10^17:
                                                    if s >= 7 * 10^17:
                                                        if uint64(_1536) <= t:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1956) + _2076 >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1956) + _2076 <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                            idx = idx + 1
                                            s = 0 / uint128(_1956) + _2076
                                            t = uint64(_1536)
                                            u = kashiPairs[idx].field_256
                                            v = kashiPairs[idx].field_0
                                            continue 
                                        if 10^18 * uint128(_1956) / uint128(_1956) != 10^18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _2212 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_2212] = 26
                                        mem[_2212 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_1956) + _2076:
                                            _2252 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 26
                                            idx = 0
                                            while idx < 26:
                                                mem[idx + _2252 + 68] = mem[idx + _2212 + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_2252 + 94] = 0
                                            revert with memory
                                              from mem[64]
                                               len _2252 + -mem[64] + 100
                                        if 10^18 * uint128(_1956) / uint128(_1956) + _2076 <= s:
                                            if uint64(_1536) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1956) / uint128(_1956) + _2076 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1956) / uint128(_1956) + _2076 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                        else:
                                            if 10^18 * uint128(_1956) / uint128(_1956) + _2076 <= 8 * 10^17:
                                                if s >= 7 * 10^17:
                                                    if uint64(_1536) <= t:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1956) / uint128(_1956) + _2076 >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1956) / uint128(_1956) + _2076 <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                        idx = idx + 1
                                        s = 10^18 * uint128(_1956) / uint128(_1956) + _2076
                                        t = uint64(_1536)
                                        u = kashiPairs[idx].field_256
                                        v = kashiPairs[idx].field_0
                                        continue 
                                    require ext_code.size(bentoBoxAddress)
                                    call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                         gas gas_remaining wei
                                        args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(address(v))
                                    call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                         gas gas_remaining wei
                                        args address(this.address), 1, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                        else:
                            mem[(7 * ceil32(return_data.size)) + 132] = this.address
                            mem[(7 * ceil32(return_data.size)) + 164] = this.address
                            mem[(7 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                            mem[(7 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(bentoBoxAddress)
                            call bentoBoxAddress.deposit(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args wantAddress, address(this.address), address(this.address), ext_call.return_data[0], 0
                            mem[(7 * ceil32(return_data.size)) + 96 len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 64
                            mem[(8 * ceil32(return_data.size)) + 100] = wantAddress
                            mem[(8 * ceil32(return_data.size)) + 132] = this.address
                            require ext_code.size(bentoBoxAddress)
                            staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args wantAddress, this.address
                            mem[(8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = (10 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            if not dustThreshold:
                                if ext_call.return_data[0] > 0:
                                    idx = 0
                                    s = 0
                                    t = 0
                                    u = 0
                                    v = 0
                                    while idx < kashiPairs.length:
                                        _1379 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1379] = 0
                                        mem[_1379 + 32] = 0
                                        mem[0] = 12
                                        _1457 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1457] = kashiPairs[idx].field_0
                                        mem[_1457 + 32] = kashiPairs[idx].field_256
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1499 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 96
                                        _1539 = mem[_1499]
                                        require mem[_1499] == mem[_1499 + 24 len 8]
                                        require mem[_1499 + 32] == mem[_1499 + 56 len 8]
                                        require mem[_1499 + 64] == mem[_1499 + 80 len 16]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalAsset() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1739 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1759 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1739] == mem[_1739 + 16 len 16]
                                        mem[_1759] = mem[_1739]
                                        require mem[_1739 + 32] == mem[_1739 + 48 len 16]
                                        mem[_1759 + 32] = mem[_1739 + 32]
                                        _1857 = mem[_1759]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1879 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1899 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1879] == mem[_1879 + 16 len 16]
                                        mem[_1899] = mem[_1879]
                                        require mem[_1879 + 32] == mem[_1879 + 48 len 16]
                                        mem[_1899 + 32] = mem[_1879 + 32]
                                        _1959 = mem[_1899]
                                        if ext_call.return_data[0] + uint128(_1857) < uint128(_1857):
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1857)
                                        mem[mem[64] + 68] = 0
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), ext_call.return_data[0] + uint128(_1857), 0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _2059 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _2079 = mem[_2059]
                                        if uint128(_1959) + mem[_2059] < mem[_2059]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not uint128(_1959):
                                            _2159 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_2159] = 26
                                            mem[_2159 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_1959) + _2079:
                                                _2219 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 26
                                                idx = 0
                                                while idx < 26:
                                                    mem[idx + _2219 + 68] = mem[idx + _2159 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_2219 + 94] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _2219 + -mem[64] + 100
                                            if 0 / uint128(_1959) + _2079 <= s:
                                                if uint64(_1539) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1959) + _2079 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1959) + _2079 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                            else:
                                                if 0 / uint128(_1959) + _2079 <= 8 * 10^17:
                                                    if s >= 7 * 10^17:
                                                        if uint64(_1539) <= t:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1959) + _2079 >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1959) + _2079 <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                            idx = idx + 1
                                            s = 0 / uint128(_1959) + _2079
                                            t = uint64(_1539)
                                            u = kashiPairs[idx].field_256
                                            v = kashiPairs[idx].field_0
                                            continue 
                                        if 10^18 * uint128(_1959) / uint128(_1959) != 10^18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _2218 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_2218] = 26
                                        mem[_2218 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_1959) + _2079:
                                            _2258 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 26
                                            idx = 0
                                            while idx < 26:
                                                mem[idx + _2258 + 68] = mem[idx + _2218 + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_2258 + 94] = 0
                                            revert with memory
                                              from mem[64]
                                               len _2258 + -mem[64] + 100
                                        if 10^18 * uint128(_1959) / uint128(_1959) + _2079 <= s:
                                            if uint64(_1539) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1959) / uint128(_1959) + _2079 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1959) / uint128(_1959) + _2079 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                        else:
                                            if 10^18 * uint128(_1959) / uint128(_1959) + _2079 <= 8 * 10^17:
                                                if s >= 7 * 10^17:
                                                    if uint64(_1539) <= t:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1959) / uint128(_1959) + _2079 >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1959) / uint128(_1959) + _2079 <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                        idx = idx + 1
                                        s = 10^18 * uint128(_1959) / uint128(_1959) + _2079
                                        t = uint64(_1539)
                                        u = kashiPairs[idx].field_256
                                        v = kashiPairs[idx].field_0
                                        continue 
                                    require ext_code.size(bentoBoxAddress)
                                    call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                         gas gas_remaining wei
                                        args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(address(v))
                                    call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                         gas gas_remaining wei
                                        args address(this.address), 1, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                            else:
                                mem[(10 * ceil32(return_data.size)) + 100] = this.address
                                mem[(10 * ceil32(return_data.size)) + 132] = dustThreshold
                                mem[(10 * ceil32(return_data.size)) + 164] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), dustThreshold, 1
                                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = (11 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    idx = 0
                                    s = 0
                                    t = 0
                                    u = 0
                                    v = 0
                                    while idx < kashiPairs.length:
                                        _1378 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1378] = 0
                                        mem[_1378 + 32] = 0
                                        mem[0] = 12
                                        _1453 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_1453] = kashiPairs[idx].field_0
                                        mem[_1453 + 32] = kashiPairs[idx].field_256
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.accrueInfo() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1498 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 96
                                        _1538 = mem[_1498]
                                        require mem[_1498] == mem[_1498 + 24 len 8]
                                        require mem[_1498 + 32] == mem[_1498 + 56 len 8]
                                        require mem[_1498 + 64] == mem[_1498 + 80 len 16]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalAsset() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1738 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1758 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1738] == mem[_1738 + 16 len 16]
                                        mem[_1758] = mem[_1738]
                                        require mem[_1738 + 32] == mem[_1738 + 48 len 16]
                                        mem[_1758 + 32] = mem[_1738 + 32]
                                        _1854 = mem[_1758]
                                        require ext_code.size(kashiPairs[idx].field_0)
                                        staticcall kashiPairs[idx].field_0.totalBorrow() with:
                                                gas gas_remaining wei
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _1878 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _1898 = mem[64]
                                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                        mem[64] = mem[64] + 64
                                        require mem[_1878] == mem[_1878 + 16 len 16]
                                        mem[_1898] = mem[_1878]
                                        require mem[_1878 + 32] == mem[_1878 + 48 len 16]
                                        mem[_1898 + 32] = mem[_1878 + 32]
                                        _1958 = mem[_1898]
                                        if ext_call.return_data[0] + uint128(_1854) < uint128(_1854):
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = ext_call.return_data[0] + uint128(_1854)
                                        mem[mem[64] + 68] = 0
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), ext_call.return_data[0] + uint128(_1854), 0
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _2058 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _2078 = mem[_2058]
                                        if uint128(_1958) + mem[_2058] < mem[_2058]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not uint128(_1958):
                                            _2158 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_2158] = 26
                                            mem[_2158 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_1958) + _2078:
                                                _2217 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 26
                                                idx = 0
                                                while idx < 26:
                                                    mem[idx + _2217 + 68] = mem[idx + _2158 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_2217 + 94] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _2217 + -mem[64] + 100
                                            if 0 / uint128(_1958) + _2078 <= s:
                                                if uint64(_1538) <= t:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1958) + _2078 >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if 0 / uint128(_1958) + _2078 <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s >= 8 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                                if s <= 7 * 10^17:
                                                    idx = idx + 1
                                                    s = s
                                                    t = t
                                                    u = u
                                                    v = v
                                                    continue 
                                            else:
                                                if 0 / uint128(_1958) + _2078 <= 8 * 10^17:
                                                    if s >= 7 * 10^17:
                                                        if uint64(_1538) <= t:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1958) + _2078 >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if 0 / uint128(_1958) + _2078 <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s >= 8 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                                        if s <= 7 * 10^17:
                                                            idx = idx + 1
                                                            s = s
                                                            t = t
                                                            u = u
                                                            v = v
                                                            continue 
                                            idx = idx + 1
                                            s = 0 / uint128(_1958) + _2078
                                            t = uint64(_1538)
                                            u = kashiPairs[idx].field_256
                                            v = kashiPairs[idx].field_0
                                            continue 
                                        if 10^18 * uint128(_1958) / uint128(_1958) != 10^18:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _2216 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_2216] = 26
                                        mem[_2216 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_1958) + _2078:
                                            _2256 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 26
                                            idx = 0
                                            while idx < 26:
                                                mem[idx + _2256 + 68] = mem[idx + _2216 + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_2256 + 94] = 0
                                            revert with memory
                                              from mem[64]
                                               len _2256 + -mem[64] + 100
                                        if 10^18 * uint128(_1958) / uint128(_1958) + _2078 <= s:
                                            if uint64(_1538) <= t:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1958) / uint128(_1958) + _2078 >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if 10^18 * uint128(_1958) / uint128(_1958) + _2078 <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s >= 8 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                            if s <= 7 * 10^17:
                                                idx = idx + 1
                                                s = s
                                                t = t
                                                u = u
                                                v = v
                                                continue 
                                        else:
                                            if 10^18 * uint128(_1958) / uint128(_1958) + _2078 <= 8 * 10^17:
                                                if s >= 7 * 10^17:
                                                    if uint64(_1538) <= t:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1958) / uint128(_1958) + _2078 >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if 10^18 * uint128(_1958) / uint128(_1958) + _2078 <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s >= 8 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                                    if s <= 7 * 10^17:
                                                        idx = idx + 1
                                                        s = s
                                                        t = t
                                                        u = u
                                                        v = v
                                                        continue 
                                        idx = idx + 1
                                        s = 10^18 * uint128(_1958) / uint128(_1958) + _2078
                                        t = uint64(_1538)
                                        u = kashiPairs[idx].field_256
                                        v = kashiPairs[idx].field_0
                                        continue 
                                    require ext_code.size(bentoBoxAddress)
                                    call bentoBoxAddress.transfer(address arg1, address arg2, address arg3, uint256 arg4) with:
                                         gas gas_remaining wei
                                        args wantAddress, address(this.address), address(v), ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(address(v))
                                    call address(v).addAsset(address arg1, bool arg2, uint256 arg3) with:
                                         gas gas_remaining wei
                                        args address(this.address), 1, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
}

function removeKashiPair(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if msg.sender == strategistAddress:
        mem[96] = 0
        mem[128] = 0
        require arg2 < kashiPairs.length
        mem[0] = 12
        mem[160] = kashiPairs[arg2].field_0
        mem[192] = kashiPairs[arg2].field_256
        require arg1 == kashiPairs[arg2].field_0
        mem[228] = wantAddress
        mem[260] = this.address
        require ext_code.size(bentoBoxAddress)
        staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                gas gas_remaining wei
               args wantAddress, this.address
        mem[224] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 224
        require return_data.size >= 32
        idx = 0
        s = mem[224]
        while idx < kashiPairs.length:
            _8427 = mem[64]
            mem[64] = mem[64] + 64
            mem[_8427] = 0
            mem[_8427 + 32] = 0
            mem[0] = 12
            _8436 = mem[64]
            mem[64] = mem[64] + 64
            mem[_8436] = kashiPairs[idx].field_0
            mem[_8436 + 32] = kashiPairs[idx].field_256
            mem[mem[64] + 4] = this.address
            require ext_code.size(kashiPairs[idx].field_0)
            staticcall kashiPairs[idx].field_0.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8472 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _8481 = mem[_8472]
            _8505 = mem[64]
            mem[64] = mem[64] + 64
            mem[_8505] = 0
            mem[_8505 + 32] = 0
            require ext_code.size(kashiPairs[idx].field_0)
            staticcall kashiPairs[idx].field_0.totalAsset() with:
                    gas gas_remaining wei
            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8524 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 64
            _8540 = mem[64]
            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
            mem[64] = mem[64] + 64
            require mem[_8524] == mem[_8524 + 16 len 16]
            mem[_8540] = mem[_8524]
            require mem[_8524 + 32] == mem[_8524 + 48 len 16]
            mem[_8540 + 32] = mem[_8524 + 32]
            _8623 = mem[64]
            mem[64] = mem[64] + 64
            mem[_8623] = 0
            mem[_8623 + 32] = 0
            require ext_code.size(kashiPairs[idx].field_0)
            staticcall kashiPairs[idx].field_0.totalBorrow() with:
                    gas gas_remaining wei
            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8649 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 64
            _8681 = mem[64]
            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
            mem[64] = mem[64] + 64
            require mem[_8649] == mem[_8649 + 16 len 16]
            mem[_8681] = mem[_8649]
            require mem[_8649 + 32] == mem[_8649 + 48 len 16]
            mem[_8681 + 32] = mem[_8649 + 32]
            _8803 = mem[_8681]
            if not mem[_8681 + 16 len 16]:
                _8855 = mem[_8540]
                if mem[_8540 + 16 len 16] < mem[_8540 + 16 len 16]:
                    revert with 0, 'SafeMath: addition overflow'
                _8923 = mem[_8540 + 32]
                if not _8481:
                    _9010 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_9010] = 26
                    mem[_9010 + 32] = 'SafeMath: division by zero'
                    if uint128(_8923):
                        if (0 / uint128(_8923)) + s < s:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        s = (0 / uint128(_8923)) + s
                        continue 
                    _9078 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _9078 + 68] = mem[idx + _9010 + 32]
                        idx = idx + 32
                        continue 
                    mem[_9078 + 94] = 0
                    revert with memory
                      from mem[64]
                       len _9078 + -mem[64] + 100
                if mem[_8540 + 16 len 16] * _8481 / _8481 != mem[_8540 + 16 len 16]:
                    revert with 0, 'SafeMath: multiplication overflow'
                _9077 = mem[64]
                mem[64] = mem[64] + 64
                mem[_9077] = 26
                mem[_9077 + 32] = 'SafeMath: division by zero'
                if uint128(_8923):
                    if (uint128(_8855) * _8481 / uint128(_8923)) + s < s:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    s = (uint128(_8855) * _8481 / uint128(_8923)) + s
                    continue 
                _9115 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _9115 + 68] = mem[idx + _9077 + 32]
                    idx = idx + 32
                    continue 
                mem[_9115 + 94] = 0
                revert with memory
                  from mem[64]
                   len _9115 + -mem[64] + 100
            mem[mem[64] + 4] = this.address
            mem[mem[64] + 36] = uint128(_8803)
            mem[mem[64] + 68] = 1
            require ext_code.size(bentoBoxAddress)
            staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(this.address), _8803 << 128, 1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8895 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _8922 = mem[_8895]
            _8946 = mem[_8540]
            if mem[_8895] + mem[_8540 + 16 len 16] < mem[_8540 + 16 len 16]:
                revert with 0, 'SafeMath: addition overflow'
            _9042 = mem[_8540 + 32]
            if not _8481:
                _9200 = mem[64]
                mem[64] = mem[64] + 64
                mem[_9200] = 26
                mem[_9200 + 32] = 'SafeMath: division by zero'
                if uint128(_9042):
                    if (0 / uint128(_9042)) + s < s:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    s = (0 / uint128(_9042)) + s
                    continue 
                _9313 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _9313 + 68] = mem[idx + _9200 + 32]
                    idx = idx + 32
                    continue 
                mem[_9313 + 94] = 0
                revert with memory
                  from mem[64]
                   len _9313 + -mem[64] + 100
            if (mem[_8895] * _8481) + (mem[_8540 + 16 len 16] * _8481) / _8481 != mem[_8895] + mem[_8540 + 16 len 16]:
                revert with 0, 'SafeMath: multiplication overflow'
            _9312 = mem[64]
            mem[64] = mem[64] + 64
            mem[_9312] = 26
            mem[_9312 + 32] = 'SafeMath: division by zero'
            if uint128(_9042):
                if ((_8922 * _8481) + (uint128(_8946) * _8481) / uint128(_9042)) + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                s = ((_8922 * _8481) + (uint128(_8946) * _8481) / uint128(_9042)) + s
                continue 
            _9378 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _9378 + 68] = mem[idx + _9312 + 32]
                idx = idx + 32
                continue 
            mem[_9378 + 94] = 0
            revert with memory
              from mem[64]
               len _9378 + -mem[64] + 100
        mem[mem[64] + 4] = this.address
        if not s:
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8471 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _8480 = mem[_8471]
            if mem[_8471] < mem[_8471]:
                revert with 0, 'SafeMath: addition overflow'
            if not mem[_8471]:
                require ext_code.size(kashiPairs[arg2].field_0)
                staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                        gas gas_remaining wei
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8561 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_8561] == mem[_8561 + 24 len 8]
                require mem[_8561 + 32] == mem[_8561 + 56 len 8]
                require mem[_8561 + 64] == mem[_8561 + 80 len 16]
                require ext_code.size(kashiPairs[arg2].field_0)
                if block.timestamp <= mem[_8561 + 56 len 8]:
                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                            gas gas_remaining wei
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8703 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8743 = mem[64]
                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                    mem[64] = mem[64] + 64
                    require mem[_8703] == mem[_8703 + 16 len 16]
                    mem[_8743] = mem[_8703]
                    require mem[_8703 + 32] == mem[_8703 + 48 len 16]
                    mem[_8743 + 32] = mem[_8703 + 32]
                    _8876 = mem[_8743]
                    if 0 > mem[_8743 + 16 len 16]:
                        if mem[_8743 + 16 len 16]:
                            _8963 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8963] = 0
                            mem[_8963 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9036 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9114 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9036] == mem[_9036 + 16 len 16]
                            mem[_9114] = mem[_9036]
                            require mem[_9036 + 32] == mem[_9036 + 48 len 16]
                            mem[_9114 + 32] = mem[_9036 + 32]
                            _9539 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9539] = 0
                            mem[_9539 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9621 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9692 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9621] == mem[_9621 + 16 len 16]
                            mem[_9692] = mem[_9621]
                            require mem[_9621 + 32] == mem[_9621 + 48 len 16]
                            mem[_9692 + 32] = mem[_9621 + 32]
                            _9912 = mem[_9692]
                            if not mem[_9692 + 16 len 16]:
                                _9982 = mem[_9114]
                                if mem[_9114 + 16 len 16] < mem[_9114 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_9114 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10336 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_8876) <= mem[_10336]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_8876)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_10336]
                                else:
                                    _10103 = mem[_9114 + 32]
                                    if not uint128(_8876):
                                        _10283 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10283] = 26
                                        mem[_10283 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_9982):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11362 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / uint128(_9982) <= mem[_11362]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / uint128(_9982)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11362]
                                    else:
                                        if mem[_9114 + 48 len 16] * uint128(_8876) / uint128(_8876) != mem[_9114 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _10390 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10390] = 26
                                        mem[_10390 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_9982):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11654 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10103) * uint128(_8876) / uint128(_9982) <= mem[_11654]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10103) * uint128(_8876) / uint128(_9982)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11654]
                            else:
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = uint128(_9912)
                                mem[mem[64] + 68] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), _9912 << 128, 1
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10022 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _10065 = mem[_10022]
                                _10126 = mem[_9114]
                                if mem[_10022] + mem[_9114 + 16 len 16] < mem[_9114 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_10022] + mem[_9114 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10729 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_8876) <= mem[_10729]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_8876)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_10729]
                                else:
                                    _10335 = mem[_9114 + 32]
                                    if not uint128(_8876):
                                        _10643 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10643] = 26
                                        mem[_10643 + 32] = 'SafeMath: division by zero'
                                        if not _10065 + uint128(_10126):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12301 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / _10065 + uint128(_10126) <= mem[_12301]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / _10065 + uint128(_10126)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12301]
                                    else:
                                        if mem[_9114 + 48 len 16] * uint128(_8876) / uint128(_8876) != mem[_9114 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _10825 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10825] = 26
                                        mem[_10825 + 32] = 'SafeMath: division by zero'
                                        if not _10065 + uint128(_10126):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12690 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10335) * uint128(_8876) / _10065 + uint128(_10126) <= mem[_12690]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10335) * uint128(_8876) / _10065 + uint128(_10126)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12690]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                else:
                    call kashiPairs[arg2].field_0.accrue() with:
                         gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(kashiPairs[arg2].field_0)
                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                            gas gas_remaining wei
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8724 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8768 = mem[64]
                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                    mem[64] = mem[64] + 64
                    require mem[_8724] == mem[_8724 + 16 len 16]
                    mem[_8768] = mem[_8724]
                    require mem[_8724 + 32] == mem[_8724 + 48 len 16]
                    mem[_8768 + 32] = mem[_8724 + 32]
                    _8906 = mem[_8768]
                    if 0 > mem[_8768 + 16 len 16]:
                        if mem[_8768 + 16 len 16]:
                            _9009 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9009] = 0
                            mem[_9009 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9093 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9199 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9093] == mem[_9093 + 16 len 16]
                            mem[_9199] = mem[_9093]
                            require mem[_9093 + 32] == mem[_9093 + 48 len 16]
                            mem[_9199 + 32] = mem[_9093 + 32]
                            _9606 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9606] = 0
                            mem[_9606 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9673 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9753 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9673] == mem[_9673 + 16 len 16]
                            mem[_9753] = mem[_9673]
                            require mem[_9673 + 32] == mem[_9673 + 48 len 16]
                            mem[_9753 + 32] = mem[_9673 + 32]
                            _9945 = mem[_9753]
                            if not mem[_9753 + 16 len 16]:
                                _10025 = mem[_9199]
                                if mem[_9199 + 16 len 16] < mem[_9199 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_9199 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10452 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_8906) <= mem[_10452]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_8906)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_10452]
                                else:
                                    _10166 = mem[_9199 + 32]
                                    if not uint128(_8906):
                                        _10393 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10393] = 26
                                        mem[_10393 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10025):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11660 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / uint128(_10025) <= mem[_11660]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / uint128(_10025)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11660]
                                    else:
                                        if mem[_9199 + 48 len 16] * uint128(_8906) / uint128(_8906) != mem[_9199 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _10512 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10512] = 26
                                        mem[_10512 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10025):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11960 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10166) * uint128(_8906) / uint128(_10025) <= mem[_11960]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10166) * uint128(_8906) / uint128(_10025)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11960]
                            else:
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = uint128(_9945)
                                mem[mem[64] + 68] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), _9945 << 128, 1
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10067 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _10127 = mem[_10067]
                                _10201 = mem[_9199]
                                if mem[_10067] + mem[_9199 + 16 len 16] < mem[_9199 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_10067] + mem[_9199 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10925 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_8906) <= mem[_10925]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_8906)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_10925]
                                else:
                                    _10451 = mem[_9199 + 32]
                                    if not uint128(_8906):
                                        _10828 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10828] = 26
                                        mem[_10828 + 32] = 'SafeMath: division by zero'
                                        if not _10127 + uint128(_10201):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12696 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / _10127 + uint128(_10201) <= mem[_12696]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / _10127 + uint128(_10201)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12696]
                                    else:
                                        if mem[_9199 + 48 len 16] * uint128(_8906) / uint128(_8906) != mem[_9199 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _11027 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11027] = 26
                                        mem[_11027 + 32] = 'SafeMath: division by zero'
                                        if not _10127 + uint128(_10201):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13084 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10451) * uint128(_8906) / _10127 + uint128(_10201) <= mem[_13084]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10451) * uint128(_8906) / _10127 + uint128(_10201)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13084]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
            else:
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = _8480
                mem[mem[64] + 68] = 1
                require ext_code.size(bentoBoxAddress)
                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(this.address), _8480, 1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8547 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8560 = mem[_8547]
                require ext_code.size(kashiPairs[arg2].field_0)
                staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                        gas gas_remaining wei
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8613 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_8613] == mem[_8613 + 24 len 8]
                require mem[_8613 + 32] == mem[_8613 + 56 len 8]
                require mem[_8613 + 64] == mem[_8613 + 80 len 16]
                require ext_code.size(kashiPairs[arg2].field_0)
                if block.timestamp <= mem[_8613 + 56 len 8]:
                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                            gas gas_remaining wei
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8778 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8828 = mem[64]
                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                    mem[64] = mem[64] + 64
                    require mem[_8778] == mem[_8778 + 16 len 16]
                    mem[_8828] = mem[_8778]
                    require mem[_8778 + 32] == mem[_8778 + 48 len 16]
                    mem[_8828 + 32] = mem[_8778 + 32]
                    _8961 = mem[_8828]
                    if _8560 <= mem[_8828 + 16 len 16]:
                        if _8560:
                            _9092 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9092] = 0
                            mem[_9092 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9192 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9338 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9192] == mem[_9192 + 16 len 16]
                            mem[_9338] = mem[_9192]
                            require mem[_9192 + 32] == mem[_9192 + 48 len 16]
                            mem[_9338 + 32] = mem[_9192 + 32]
                            _9672 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9672] = 0
                            mem[_9672 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9749 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9817 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9749] == mem[_9749 + 16 len 16]
                            mem[_9817] = mem[_9749]
                            require mem[_9749 + 32] == mem[_9749 + 48 len 16]
                            mem[_9817 + 32] = mem[_9749 + 32]
                            _10002 = mem[_9817]
                            if not mem[_9817 + 16 len 16]:
                                _10101 = mem[_9338]
                                if mem[_9338 + 16 len 16] < mem[_9338 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_9338 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10636 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if _8560 <= mem[_10636]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), _8560
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_10636]
                                else:
                                    _10277 = mem[_9338 + 32]
                                    if not _8560:
                                        _10567 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10567] = 26
                                        mem[_10567 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10101):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12114 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / uint128(_10101) <= mem[_12114]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / uint128(_10101)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12114]
                                    else:
                                        if mem[_9338 + 48 len 16] * _8560 / _8560 != mem[_9338 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _10720 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10720] = 26
                                        mem[_10720 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10101):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12473 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10277) * _8560 / uint128(_10101) <= mem[_12473]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10277) * _8560 / uint128(_10101)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12473]
                            else:
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = uint128(_10002)
                                mem[mem[64] + 68] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), _10002 << 128, 1
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10161 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _10237 = mem[_10161]
                                _10331 = mem[_9338]
                                if mem[_10161] + mem[_9338 + 16 len 16] < mem[_9338 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_10161] + mem[_9338 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11216 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if _8560 <= mem[_11216]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), _8560
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_11216]
                                else:
                                    _10635 = mem[_9338 + 32]
                                    if not _8560:
                                        _11109 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11109] = 26
                                        mem[_11109 + 32] = 'SafeMath: division by zero'
                                        if not _10237 + uint128(_10331):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13285 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / _10237 + uint128(_10331) <= mem[_13285]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / _10237 + uint128(_10331)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13285]
                                    else:
                                        if mem[_9338 + 48 len 16] * _8560 / _8560 != mem[_9338 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _11346 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11346] = 26
                                        mem[_11346 + 32] = 'SafeMath: division by zero'
                                        if not _10237 + uint128(_10331):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13700 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10635) * _8560 / _10237 + uint128(_10331) <= mem[_13700]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10635) * _8560 / _10237 + uint128(_10331)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13700]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                    else:
                        if mem[_8828 + 16 len 16]:
                            _9113 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9113] = 0
                            mem[_9113 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9253 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9376 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9253] == mem[_9253 + 16 len 16]
                            mem[_9376] = mem[_9253]
                            require mem[_9253 + 32] == mem[_9253 + 48 len 16]
                            mem[_9376 + 32] = mem[_9253 + 32]
                            _9691 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9691] = 0
                            mem[_9691 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9779 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9839 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9779] == mem[_9779 + 16 len 16]
                            mem[_9839] = mem[_9779]
                            require mem[_9779 + 32] == mem[_9779 + 48 len 16]
                            mem[_9839 + 32] = mem[_9779 + 32]
                            _10021 = mem[_9839]
                            if not mem[_9839 + 16 len 16]:
                                _10124 = mem[_9376]
                                if mem[_9376 + 16 len 16] < mem[_9376 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_9376 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10723 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_8961) <= mem[_10723]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_8961)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_10723]
                                else:
                                    _10332 = mem[_9376 + 32]
                                    if not uint128(_8961):
                                        _10639 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10639] = 26
                                        mem[_10639 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10124):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12290 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / uint128(_10124) <= mem[_12290]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / uint128(_10124)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12290]
                                    else:
                                        if mem[_9376 + 48 len 16] * uint128(_8961) / uint128(_8961) != mem[_9376 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _10818 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10818] = 26
                                        mem[_10818 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10124):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12679 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10332) * uint128(_8961) / uint128(_10124) <= mem[_12679]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10332) * uint128(_8961) / uint128(_10124)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12679]
                            else:
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = uint128(_10021)
                                mem[mem[64] + 68] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), _10021 << 128, 1
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10196 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _10278 = mem[_10196]
                                _10386 = mem[_9376]
                                if mem[_10196] + mem[_9376 + 16 len 16] < mem[_9376 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_10196] + mem[_9376 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11349 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_8961) <= mem[_11349]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_8961)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_11349]
                                else:
                                    _10722 = mem[_9376 + 32]
                                    if not uint128(_8961):
                                        _11220 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11220] = 26
                                        mem[_11220 + 32] = 'SafeMath: division by zero'
                                        if not _10278 + uint128(_10386):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13491 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / _10278 + uint128(_10386) <= mem[_13491]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / _10278 + uint128(_10386)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13491]
                                    else:
                                        if mem[_9376 + 48 len 16] * uint128(_8961) / uint128(_8961) != mem[_9376 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _11490 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11490] = 26
                                        mem[_11490 + 32] = 'SafeMath: division by zero'
                                        if not _10278 + uint128(_10386):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13914 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10722) * uint128(_8961) / _10278 + uint128(_10386) <= mem[_13914]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10722) * uint128(_8961) / _10278 + uint128(_10386)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13914]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                else:
                    call kashiPairs[arg2].field_0.accrue() with:
                         gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(kashiPairs[arg2].field_0)
                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                            gas gas_remaining wei
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8810 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8852 = mem[64]
                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                    mem[64] = mem[64] + 64
                    require mem[_8810] == mem[_8810 + 16 len 16]
                    mem[_8852] = mem[_8810]
                    require mem[_8810 + 32] == mem[_8810 + 48 len 16]
                    mem[_8852 + 32] = mem[_8810 + 32]
                    _9005 = mem[_8852]
                    if _8560 <= mem[_8852 + 16 len 16]:
                        if _8560:
                            _9155 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9155] = 0
                            mem[_9155 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9309 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9412 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9309] == mem[_9309 + 16 len 16]
                            mem[_9412] = mem[_9309]
                            require mem[_9309 + 32] == mem[_9309 + 48 len 16]
                            mem[_9412 + 32] = mem[_9309 + 32]
                            _9725 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9725] = 0
                            mem[_9725 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9808 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9862 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9808] == mem[_9808 + 16 len 16]
                            mem[_9862] = mem[_9808]
                            require mem[_9808 + 32] == mem[_9808 + 48 len 16]
                            mem[_9862 + 32] = mem[_9808 + 32]
                            _10049 = mem[_9862]
                            if not mem[_9862 + 16 len 16]:
                                _10164 = mem[_9412]
                                if mem[_9412 + 16 len 16] < mem[_9412 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_9412 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10821 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if _8560 <= mem[_10821]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), _8560
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_10821]
                                else:
                                    _10387 = mem[_9412 + 32]
                                    if not _8560:
                                        _10726 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10726] = 26
                                        mem[_10726 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10164):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12482 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / uint128(_10164) <= mem[_12482]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / uint128(_10164)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12482]
                                    else:
                                        if mem[_9412 + 48 len 16] * _8560 / _8560 != mem[_9412 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _10916 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10916] = 26
                                        mem[_10916 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10164):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12883 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10387) * _8560 / uint128(_10164) <= mem[_12883]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10387) * _8560 / uint128(_10164)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12883]
                            else:
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = uint128(_10049)
                                mem[mem[64] + 68] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), _10049 << 128, 1
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10239 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _10333 = mem[_10239]
                                _10447 = mem[_9412]
                                if mem[_10239] + mem[_9412 + 16 len 16] < mem[_9412 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_10239] + mem[_9412 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11493 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if _8560 <= mem[_11493]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), _8560
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_11493]
                                else:
                                    _10820 = mem[_9412 + 32]
                                    if not _8560:
                                        _11353 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11353] = 26
                                        mem[_11353 + 32] = 'SafeMath: division by zero'
                                        if not _10333 + uint128(_10447):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13710 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / _10333 + uint128(_10447) <= mem[_13710]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / _10333 + uint128(_10447)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13710]
                                    else:
                                        if mem[_9412 + 48 len 16] * _8560 / _8560 != mem[_9412 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _11643 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11643] = 26
                                        mem[_11643 + 32] = 'SafeMath: division by zero'
                                        if not _10333 + uint128(_10447):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14119 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10820) * _8560 / _10333 + uint128(_10447) <= mem[_14119]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10820) * _8560 / _10333 + uint128(_10447)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_14119]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                    else:
                        if mem[_8852 + 16 len 16]:
                            _9198 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9198] = 0
                            mem[_9198 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9339 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9448 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9339] == mem[_9339 + 16 len 16]
                            mem[_9448] = mem[_9339]
                            require mem[_9339 + 32] == mem[_9339 + 48 len 16]
                            mem[_9448 + 32] = mem[_9339 + 32]
                            _9752 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9752] = 0
                            mem[_9752 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9818 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9881 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9818] == mem[_9818 + 16 len 16]
                            mem[_9881] = mem[_9818]
                            require mem[_9818 + 32] == mem[_9818 + 48 len 16]
                            mem[_9881 + 32] = mem[_9818 + 32]
                            _10064 = mem[_9881]
                            if not mem[_9881 + 16 len 16]:
                                _10199 = mem[_9448]
                                if mem[_9448 + 16 len 16] < mem[_9448 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_9448 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10919 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_9005) <= mem[_10919]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_9005)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_10919]
                                else:
                                    _10448 = mem[_9448 + 32]
                                    if not uint128(_9005):
                                        _10824 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10824] = 26
                                        mem[_10824 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10199):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12688 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / uint128(_10199) <= mem[_12688]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / uint128(_10199)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12688]
                                    else:
                                        if mem[_9448 + 48 len 16] * uint128(_9005) / uint128(_9005) != mem[_9448 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _11022 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11022] = 26
                                        mem[_11022 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10199):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13076 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10448) * uint128(_9005) / uint128(_10199) <= mem[_13076]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10448) * uint128(_9005) / uint128(_10199)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13076]
                            else:
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = uint128(_10064)
                                mem[mem[64] + 68] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), _10064 << 128, 1
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10280 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _10388 = mem[_10280]
                                _10509 = mem[_9448]
                                if mem[_10280] + mem[_9448 + 16 len 16] < mem[_9448 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_10280] + mem[_9448 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11646 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_9005) <= mem[_11646]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_9005)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_11646]
                                else:
                                    _10918 = mem[_9448 + 32]
                                    if not uint128(_9005):
                                        _11497 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11497] = 26
                                        mem[_11497 + 32] = 'SafeMath: division by zero'
                                        if not _10388 + uint128(_10509):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13924 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / _10388 + uint128(_10509) <= mem[_13924]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / _10388 + uint128(_10509)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13924]
                                    else:
                                        if mem[_9448 + 48 len 16] * uint128(_9005) / uint128(_9005) != mem[_9448 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _11811 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11811] = 26
                                        mem[_11811 + 32] = 'SafeMath: division by zero'
                                        if not _10388 + uint128(_10509):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14331 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10918) * uint128(_9005) / _10388 + uint128(_10509) <= mem[_14331]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10918) * uint128(_9005) / _10388 + uint128(_10509)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_14331]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
        else:
            mem[mem[64] + 36] = s
            mem[mem[64] + 68] = 1
            require ext_code.size(bentoBoxAddress)
            staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(this.address), s, 1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8455 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _8467 = mem[_8455]
            mem[mem[64] + 4] = this.address
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8495 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _8503 = mem[_8495]
            if _8467 + mem[_8495] < mem[_8495]:
                revert with 0, 'SafeMath: addition overflow'
            if not _8467 + mem[_8495]:
                require ext_code.size(kashiPairs[arg2].field_0)
                staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                        gas gas_remaining wei
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8612 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_8612] == mem[_8612 + 24 len 8]
                require mem[_8612 + 32] == mem[_8612 + 56 len 8]
                require mem[_8612 + 64] == mem[_8612 + 80 len 16]
                require ext_code.size(kashiPairs[arg2].field_0)
                if block.timestamp <= mem[_8612 + 56 len 8]:
                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                            gas gas_remaining wei
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8775 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8827 = mem[64]
                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                    mem[64] = mem[64] + 64
                    require mem[_8775] == mem[_8775 + 16 len 16]
                    mem[_8827] = mem[_8775]
                    require mem[_8775 + 32] == mem[_8775 + 48 len 16]
                    mem[_8827 + 32] = mem[_8775 + 32]
                    _8960 = mem[_8827]
                    if 0 > mem[_8827 + 16 len 16]:
                        if mem[_8827 + 16 len 16]:
                            _9109 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9109] = 0
                            mem[_9109 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9247 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9375 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9247] == mem[_9247 + 16 len 16]
                            mem[_9375] = mem[_9247]
                            require mem[_9247 + 32] == mem[_9247 + 48 len 16]
                            mem[_9375 + 32] = mem[_9247 + 32]
                            _9688 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9688] = 0
                            mem[_9688 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9776 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9838 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9776] == mem[_9776 + 16 len 16]
                            mem[_9838] = mem[_9776]
                            require mem[_9776 + 32] == mem[_9776 + 48 len 16]
                            mem[_9838 + 32] = mem[_9776 + 32]
                            _10020 = mem[_9838]
                            if not mem[_9838 + 16 len 16]:
                                _10121 = mem[_9375]
                                if mem[_9375 + 16 len 16] < mem[_9375 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_9375 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10716 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_8960) <= mem[_10716]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_8960)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_10716]
                                else:
                                    _10330 = mem[_9375 + 32]
                                    if not uint128(_8960):
                                        _10633 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10633] = 26
                                        mem[_10633 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10121):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12279 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / uint128(_10121) <= mem[_12279]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / uint128(_10121)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12279]
                                    else:
                                        if mem[_9375 + 48 len 16] * uint128(_8960) / uint128(_8960) != mem[_9375 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _10812 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10812] = 26
                                        mem[_10812 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10121):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12665 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10330) * uint128(_8960) / uint128(_10121) <= mem[_12665]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10330) * uint128(_8960) / uint128(_10121)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12665]
                            else:
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = uint128(_10020)
                                mem[mem[64] + 68] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), _10020 << 128, 1
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10192 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _10273 = mem[_10192]
                                _10382 = mem[_9375]
                                if mem[_10192] + mem[_9375 + 16 len 16] < mem[_9375 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_10192] + mem[_9375 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11340 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_8960) <= mem[_11340]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_8960)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_11340]
                                else:
                                    _10715 = mem[_9375 + 32]
                                    if not uint128(_8960):
                                        _11211 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11211] = 26
                                        mem[_11211 + 32] = 'SafeMath: division by zero'
                                        if not _10273 + uint128(_10382):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13477 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / _10273 + uint128(_10382) <= mem[_13477]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / _10273 + uint128(_10382)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13477]
                                    else:
                                        if mem[_9375 + 48 len 16] * uint128(_8960) / uint128(_8960) != mem[_9375 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _11480 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11480] = 26
                                        mem[_11480 + 32] = 'SafeMath: division by zero'
                                        if not _10273 + uint128(_10382):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13901 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10715) * uint128(_8960) / _10273 + uint128(_10382) <= mem[_13901]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10715) * uint128(_8960) / _10273 + uint128(_10382)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13901]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                else:
                    call kashiPairs[arg2].field_0.accrue() with:
                         gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(kashiPairs[arg2].field_0)
                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                            gas gas_remaining wei
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8809 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8851 = mem[64]
                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                    mem[64] = mem[64] + 64
                    require mem[_8809] == mem[_8809 + 16 len 16]
                    mem[_8851] = mem[_8809]
                    require mem[_8809 + 32] == mem[_8809 + 48 len 16]
                    mem[_8851 + 32] = mem[_8809 + 32]
                    _9004 = mem[_8851]
                    if 0 > mem[_8851 + 16 len 16]:
                        if mem[_8851 + 16 len 16]:
                            _9191 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9191] = 0
                            mem[_9191 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9336 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9446 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9336] == mem[_9336 + 16 len 16]
                            mem[_9446] = mem[_9336]
                            require mem[_9336 + 32] == mem[_9336 + 48 len 16]
                            mem[_9446 + 32] = mem[_9336 + 32]
                            _9748 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9748] = 0
                            mem[_9748 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9816 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9879 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9816] == mem[_9816 + 16 len 16]
                            mem[_9879] = mem[_9816]
                            require mem[_9816 + 32] == mem[_9816 + 48 len 16]
                            mem[_9879 + 32] = mem[_9816 + 32]
                            _10062 = mem[_9879]
                            if not mem[_9879 + 16 len 16]:
                                _10195 = mem[_9446]
                                if mem[_9446 + 16 len 16] < mem[_9446 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_9446 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10910 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_9004) <= mem[_10910]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_9004)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_10910]
                                else:
                                    _10444 = mem[_9446 + 32]
                                    if not uint128(_9004):
                                        _10815 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10815] = 26
                                        mem[_10815 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10195):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12671 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / uint128(_10195) <= mem[_12671]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / uint128(_10195)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12671]
                                    else:
                                        if mem[_9446 + 48 len 16] * uint128(_9004) / uint128(_9004) != mem[_9446 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _11014 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11014] = 26
                                        mem[_11014 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10195):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13056 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10444) * uint128(_9004) / uint128(_10195) <= mem[_13056]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10444) * uint128(_9004) / uint128(_10195)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13056]
                            else:
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = uint128(_10062)
                                mem[mem[64] + 68] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), _10062 << 128, 1
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10275 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _10383 = mem[_10275]
                                _10504 = mem[_9446]
                                if mem[_10275] + mem[_9446 + 16 len 16] < mem[_9446 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_10275] + mem[_9446 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11632 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_9004) <= mem[_11632]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_9004)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_11632]
                                else:
                                    _10909 = mem[_9446 + 32]
                                    if not uint128(_9004):
                                        _11483 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11483] = 26
                                        mem[_11483 + 32] = 'SafeMath: division by zero'
                                        if not _10383 + uint128(_10504):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13907 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / _10383 + uint128(_10504) <= mem[_13907]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / _10383 + uint128(_10504)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13907]
                                    else:
                                        if mem[_9446 + 48 len 16] * uint128(_9004) / uint128(_9004) != mem[_9446 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _11798 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11798] = 26
                                        mem[_11798 + 32] = 'SafeMath: division by zero'
                                        if not _10383 + uint128(_10504):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14313 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10909) * uint128(_9004) / _10383 + uint128(_10504) <= mem[_14313]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10909) * uint128(_9004) / _10383 + uint128(_10504)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_14313]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
            else:
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = _8467 + _8503
                mem[mem[64] + 68] = 1
                require ext_code.size(bentoBoxAddress)
                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(this.address), _8467 + _8503, 1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8587 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8611 = mem[_8587]
                require ext_code.size(kashiPairs[arg2].field_0)
                staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                        gas gas_remaining wei
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8675 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_8675] == mem[_8675 + 24 len 8]
                require mem[_8675 + 32] == mem[_8675 + 56 len 8]
                require mem[_8675 + 64] == mem[_8675 + 80 len 16]
                require ext_code.size(kashiPairs[arg2].field_0)
                if block.timestamp <= mem[_8675 + 56 len 8]:
                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                            gas gas_remaining wei
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8871 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8919 = mem[64]
                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                    mem[64] = mem[64] + 64
                    require mem[_8871] == mem[_8871 + 16 len 16]
                    mem[_8919] = mem[_8871]
                    require mem[_8871 + 32] == mem[_8871 + 48 len 16]
                    mem[_8919 + 32] = mem[_8871 + 32]
                    _9107 = mem[_8919]
                    if _8611 <= mem[_8919 + 16 len 16]:
                        if _8611:
                            _9335 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9335] = 0
                            mem[_9335 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9439 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9563 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9439] == mem[_9439 + 16 len 16]
                            mem[_9563] = mem[_9439]
                            require mem[_9439 + 32] == mem[_9439 + 48 len 16]
                            mem[_9563 + 32] = mem[_9439 + 32]
                            _9815 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9815] = 0
                            mem[_9815 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9875 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9939 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9875] == mem[_9875 + 16 len 16]
                            mem[_9939] = mem[_9875]
                            require mem[_9875 + 32] == mem[_9875 + 48 len 16]
                            mem[_9939 + 32] = mem[_9875 + 32]
                            _10159 = mem[_9939]
                            if not mem[_9939 + 16 len 16]:
                                _10328 = mem[_9563]
                                if mem[_9563 + 16 len 16] < mem[_9563 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_9563 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11204 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if _8611 <= mem[_11204]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), _8611
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_11204]
                                else:
                                    _10627 = mem[_9563 + 32]
                                    if not _8611:
                                        _11100 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11100] = 26
                                        mem[_11100 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10328):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13263 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / uint128(_10328) <= mem[_13263]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / uint128(_10328)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13263]
                                    else:
                                        if mem[_9563 + 48 len 16] * _8611 / _8611 != mem[_9563 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _11331 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11331] = 26
                                        mem[_11331 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10328):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13675 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10627) * _8611 / uint128(_10328) <= mem[_13675]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10627) * _8611 / uint128(_10328)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13675]
                            else:
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = uint128(_10159)
                                mem[mem[64] + 68] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), _10159 << 128, 1
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10439 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _10559 = mem[_10439]
                                _10711 = mem[_9563]
                                if mem[_10439] + mem[_9563 + 16 len 16] < mem[_9563 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_10439] + mem[_9563 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _12091 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if _8611 <= mem[_12091]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), _8611
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_12091]
                                else:
                                    _11203 = mem[_9563 + 32]
                                    if not _8611:
                                        _11919 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11919] = 26
                                        mem[_11919 + 32] = 'SafeMath: division by zero'
                                        if not _10559 + uint128(_10711):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14517 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / _10559 + uint128(_10711) <= mem[_14517]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / _10559 + uint128(_10711)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_14517]
                                    else:
                                        if mem[_9563 + 48 len 16] * _8611 / _8611 != mem[_9563 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _12263 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_12263] = 26
                                        mem[_12263 + 32] = 'SafeMath: division by zero'
                                        if not _10559 + uint128(_10711):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14924 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_11203) * _8611 / _10559 + uint128(_10711) <= mem[_14924]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_11203) * _8611 / _10559 + uint128(_10711)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_14924]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                    else:
                        if mem[_8919 + 16 len 16]:
                            _9374 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9374] = 0
                            mem[_9374 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9495 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9603 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9495] == mem[_9495 + 16 len 16]
                            mem[_9603] = mem[_9495]
                            require mem[_9495 + 32] == mem[_9495 + 48 len 16]
                            mem[_9603 + 32] = mem[_9495 + 32]
                            _9837 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9837] = 0
                            mem[_9837 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9907 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9967 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9907] == mem[_9907 + 16 len 16]
                            mem[_9967] = mem[_9907]
                            require mem[_9907 + 32] == mem[_9907 + 48 len 16]
                            mem[_9967 + 32] = mem[_9907 + 32]
                            _10191 = mem[_9967]
                            if not mem[_9967 + 16 len 16]:
                                _10380 = mem[_9603]
                                if mem[_9603 + 16 len 16] < mem[_9603 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_9603 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11334 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_9107) <= mem[_11334]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_9107)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_11334]
                                else:
                                    _10712 = mem[_9603 + 32]
                                    if not uint128(_9107):
                                        _11207 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11207] = 26
                                        mem[_11207 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10380):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13466 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / uint128(_10380) <= mem[_13466]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / uint128(_10380)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13466]
                                    else:
                                        if mem[_9603 + 48 len 16] * uint128(_9107) / uint128(_9107) != mem[_9603 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _11473 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11473] = 26
                                        mem[_11473 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10380):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13890 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10712) * uint128(_9107) / uint128(_10380) <= mem[_13890]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10712) * uint128(_9107) / uint128(_10380)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13890]
                            else:
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = uint128(_10191)
                                mem[mem[64] + 68] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), _10191 << 128, 1
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10499 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _10628 = mem[_10499]
                                _10808 = mem[_9603]
                                if mem[_10499] + mem[_9603 + 16 len 16] < mem[_9603 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_10499] + mem[_9603 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _12266 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_9107) <= mem[_12266]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_9107)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_12266]
                                else:
                                    _11333 = mem[_9603 + 32]
                                    if not uint128(_9107):
                                        _12095 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_12095] = 26
                                        mem[_12095 + 32] = 'SafeMath: division by zero'
                                        if not _10628 + uint128(_10808):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14725 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / _10628 + uint128(_10808) <= mem[_14725]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / _10628 + uint128(_10808)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_14725]
                                    else:
                                        if mem[_9603 + 48 len 16] * uint128(_9107) / uint128(_9107) != mem[_9603 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _12451 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_12451] = 26
                                        mem[_12451 + 32] = 'SafeMath: division by zero'
                                        if not _10628 + uint128(_10808):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15112 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_11333) * uint128(_9107) / _10628 + uint128(_10808) <= mem[_15112]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_11333) * uint128(_9107) / _10628 + uint128(_10808)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_15112]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                else:
                    call kashiPairs[arg2].field_0.accrue() with:
                         gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(kashiPairs[arg2].field_0)
                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                            gas gas_remaining wei
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8903 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8943 = mem[64]
                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                    mem[64] = mem[64] + 64
                    require mem[_8903] == mem[_8903 + 16 len 16]
                    mem[_8943] = mem[_8903]
                    require mem[_8903 + 32] == mem[_8903 + 48 len 16]
                    mem[_8943 + 32] = mem[_8903 + 32]
                    _9187 = mem[_8943]
                    if _8611 <= mem[_8943 + 16 len 16]:
                        if _8611:
                            _9411 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9411] = 0
                            mem[_9411 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9535 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9619 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9535] == mem[_9535 + 16 len 16]
                            mem[_9619] = mem[_9535]
                            require mem[_9535 + 32] == mem[_9535 + 48 len 16]
                            mem[_9619 + 32] = mem[_9535 + 32]
                            _9861 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9861] = 0
                            mem[_9861 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9931 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9979 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9931] == mem[_9931 + 16 len 16]
                            mem[_9979] = mem[_9931]
                            require mem[_9931 + 32] == mem[_9931 + 48 len 16]
                            mem[_9979 + 32] = mem[_9931 + 32]
                            _10236 = mem[_9979]
                            if not mem[_9979 + 16 len 16]:
                                _10442 = mem[_9619]
                                if mem[_9619 + 16 len 16] < mem[_9619 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_9619 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11476 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if _8611 <= mem[_11476]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), _8611
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_11476]
                                else:
                                    _10809 = mem[_9619 + 32]
                                    if not _8611:
                                        _11337 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11337] = 26
                                        mem[_11337 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10442):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13684 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / uint128(_10442) <= mem[_13684]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / uint128(_10442)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13684]
                                    else:
                                        if mem[_9619 + 48 len 16] * _8611 / _8611 != mem[_9619 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _11623 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11623] = 26
                                        mem[_11623 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10442):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14096 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10809) * _8611 / uint128(_10442) <= mem[_14096]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10809) * _8611 / uint128(_10442)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_14096]
                            else:
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = uint128(_10236)
                                mem[mem[64] + 68] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), _10236 << 128, 1
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10561 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _10713 = mem[_10561]
                                _10905 = mem[_9619]
                                if mem[_10561] + mem[_9619 + 16 len 16] < mem[_9619 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_10561] + mem[_9619 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _12454 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if _8611 <= mem[_12454]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), _8611
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_12454]
                                else:
                                    _11475 = mem[_9619 + 32]
                                    if not _8611:
                                        _12270 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_12270] = 26
                                        mem[_12270 + 32] = 'SafeMath: division by zero'
                                        if not _10713 + uint128(_10905):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14934 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / _10713 + uint128(_10905) <= mem[_14934]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / _10713 + uint128(_10905)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_14934]
                                    else:
                                        if mem[_9619 + 48 len 16] * _8611 / _8611 != mem[_9619 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _12654 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_12654] = 26
                                        mem[_12654 + 32] = 'SafeMath: division by zero'
                                        if not _10713 + uint128(_10905):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15293 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_11475) * _8611 / _10713 + uint128(_10905) <= mem[_15293]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_11475) * _8611 / _10713 + uint128(_10905)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_15293]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                    else:
                        if mem[_8943 + 16 len 16]:
                            _9445 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9445] = 0
                            mem[_9445 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9564 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _9648 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9564] == mem[_9564 + 16 len 16]
                            mem[_9648] = mem[_9564]
                            require mem[_9564 + 32] == mem[_9564 + 48 len 16]
                            mem[_9648 + 32] = mem[_9564 + 32]
                            _9878 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9878] = 0
                            mem[_9878 + 32] = 0
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9940 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _10000 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_9940] == mem[_9940 + 16 len 16]
                            mem[_10000] = mem[_9940]
                            require mem[_9940 + 32] == mem[_9940 + 48 len 16]
                            mem[_10000 + 32] = mem[_9940 + 32]
                            _10272 = mem[_10000]
                            if not mem[_10000 + 16 len 16]:
                                _10502 = mem[_9648]
                                if mem[_9648 + 16 len 16] < mem[_9648 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_9648 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11626 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_9187) <= mem[_11626]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_9187)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_11626]
                                else:
                                    _10906 = mem[_9648 + 32]
                                    if not uint128(_9187):
                                        _11479 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11479] = 26
                                        mem[_11479 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10502):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _13899 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / uint128(_10502) <= mem[_13899]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / uint128(_10502)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_13899]
                                    else:
                                        if mem[_9648 + 48 len 16] * uint128(_9187) / uint128(_9187) != mem[_9648 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _11793 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_11793] = 26
                                        mem[_11793 + 32] = 'SafeMath: division by zero'
                                        if not uint128(_10502):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14305 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_10906) * uint128(_9187) / uint128(_10502) <= mem[_14305]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_10906) * uint128(_9187) / uint128(_10502)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_14305]
                            else:
                                mem[mem[64] + 4] = this.address
                                mem[mem[64] + 36] = uint128(_10272)
                                mem[mem[64] + 68] = 1
                                require ext_code.size(bentoBoxAddress)
                                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(this.address), _10272 << 128, 1
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10630 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _10810 = mem[_10630]
                                _11011 = mem[_9648]
                                if mem[_10630] + mem[_9648 + 16 len 16] < mem[_9648 + 16 len 16]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not mem[_10630] + mem[_9648 + 16 len 16]:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _12657 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    if uint128(_9187) <= mem[_12657]:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), uint128(_9187)
                                    else:
                                        call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), mem[_12657]
                                else:
                                    _11625 = mem[_9648 + 32]
                                    if not uint128(_9187):
                                        _12458 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_12458] = 26
                                        mem[_12458 + 32] = 'SafeMath: division by zero'
                                        if not _10810 + uint128(_11011):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15122 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if 0 / _10810 + uint128(_11011) <= mem[_15122]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), 0 / _10810 + uint128(_11011)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_15122]
                                    else:
                                        if mem[_9648 + 48 len 16] * uint128(_9187) / uint128(_9187) != mem[_9648 + 48 len 16]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _12861 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_12861] = 26
                                        mem[_12861 + 32] = 'SafeMath: division by zero'
                                        if not _10810 + uint128(_11011):
                                            revert with 0, 'SafeMath: division by zero', 0
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15477 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_11625) * uint128(_9187) / _10810 + uint128(_11011) <= mem[_15477]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_11625) * uint128(_9187) / _10810 + uint128(_11011)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_15477]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
    else:
        require ext_code.size(vaultAddress)
        staticcall vaultAddress.governance() with:
                gas gas_remaining wei
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if msg.sender == ext_call.return_data[12 len 20]:
            mem[ceil32(return_data.size) + 96] = 0
            mem[ceil32(return_data.size) + 128] = 0
            require arg2 < kashiPairs.length
            mem[0] = 12
            mem[ceil32(return_data.size) + 160] = kashiPairs[arg2].field_0
            mem[ceil32(return_data.size) + 192] = kashiPairs[arg2].field_256
            require arg1 == kashiPairs[arg2].field_0
            mem[ceil32(return_data.size) + 228] = wantAddress
            mem[ceil32(return_data.size) + 260] = this.address
            require ext_code.size(bentoBoxAddress)
            staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args wantAddress, this.address
            mem[ceil32(return_data.size) + 224] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 224
            require return_data.size >= 32
            idx = 0
            s = mem[ceil32(return_data.size) + 224]
            while idx < kashiPairs.length:
                _8428 = mem[64]
                mem[64] = mem[64] + 64
                mem[_8428] = 0
                mem[_8428 + 32] = 0
                mem[0] = 12
                _8438 = mem[64]
                mem[64] = mem[64] + 64
                mem[_8438] = kashiPairs[idx].field_0
                mem[_8438 + 32] = kashiPairs[idx].field_256
                mem[mem[64] + 4] = this.address
                require ext_code.size(kashiPairs[idx].field_0)
                staticcall kashiPairs[idx].field_0.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8474 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8484 = mem[_8474]
                _8508 = mem[64]
                mem[64] = mem[64] + 64
                mem[_8508] = 0
                mem[_8508 + 32] = 0
                require ext_code.size(kashiPairs[idx].field_0)
                staticcall kashiPairs[idx].field_0.totalAsset() with:
                        gas gas_remaining wei
                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8526 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 64
                _8542 = mem[64]
                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                mem[64] = mem[64] + 64
                require mem[_8526] == mem[_8526 + 16 len 16]
                mem[_8542] = mem[_8526]
                require mem[_8526 + 32] == mem[_8526 + 48 len 16]
                mem[_8542 + 32] = mem[_8526 + 32]
                _8624 = mem[64]
                mem[64] = mem[64] + 64
                mem[_8624] = 0
                mem[_8624 + 32] = 0
                require ext_code.size(kashiPairs[idx].field_0)
                staticcall kashiPairs[idx].field_0.totalBorrow() with:
                        gas gas_remaining wei
                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8652 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 64
                _8684 = mem[64]
                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                mem[64] = mem[64] + 64
                require mem[_8652] == mem[_8652 + 16 len 16]
                mem[_8684] = mem[_8652]
                require mem[_8652 + 32] == mem[_8652 + 48 len 16]
                mem[_8684 + 32] = mem[_8652 + 32]
                _8804 = mem[_8684]
                if not mem[_8684 + 16 len 16]:
                    _8860 = mem[_8542]
                    if mem[_8542 + 16 len 16] < mem[_8542 + 16 len 16]:
                        revert with 0, 'SafeMath: addition overflow'
                    _8929 = mem[_8542 + 32]
                    if not _8484:
                        _9018 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_9018] = 26
                        mem[_9018 + 32] = 'SafeMath: division by zero'
                        if uint128(_8929):
                            if (0 / uint128(_8929)) + s < s:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            s = (0 / uint128(_8929)) + s
                            continue 
                        _9082 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _9082 + 68] = mem[idx + _9018 + 32]
                            idx = idx + 32
                            continue 
                        mem[_9082 + 94] = 0
                        revert with memory
                          from mem[64]
                           len _9082 + -mem[64] + 100
                    if mem[_8542 + 16 len 16] * _8484 / _8484 != mem[_8542 + 16 len 16]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    _9081 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_9081] = 26
                    mem[_9081 + 32] = 'SafeMath: division by zero'
                    if uint128(_8929):
                        if (uint128(_8860) * _8484 / uint128(_8929)) + s < s:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        s = (uint128(_8860) * _8484 / uint128(_8929)) + s
                        continue 
                    _9125 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _9125 + 68] = mem[idx + _9081 + 32]
                        idx = idx + 32
                        continue 
                    mem[_9125 + 94] = 0
                    revert with memory
                      from mem[64]
                       len _9125 + -mem[64] + 100
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = uint128(_8804)
                mem[mem[64] + 68] = 1
                require ext_code.size(bentoBoxAddress)
                staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(this.address), _8804 << 128, 1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8897 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8928 = mem[_8897]
                _8950 = mem[_8542]
                if mem[_8897] + mem[_8542 + 16 len 16] < mem[_8542 + 16 len 16]:
                    revert with 0, 'SafeMath: addition overflow'
                _9052 = mem[_8542 + 32]
                if not _8484:
                    _9215 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_9215] = 26
                    mem[_9215 + 32] = 'SafeMath: division by zero'
                    if uint128(_9052):
                        if (0 / uint128(_9052)) + s < s:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        s = (0 / uint128(_9052)) + s
                        continue 
                    _9320 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _9320 + 68] = mem[idx + _9215 + 32]
                        idx = idx + 32
                        continue 
                    mem[_9320 + 94] = 0
                    revert with memory
                      from mem[64]
                       len _9320 + -mem[64] + 100
                if (mem[_8897] * _8484) + (mem[_8542 + 16 len 16] * _8484) / _8484 != mem[_8897] + mem[_8542 + 16 len 16]:
                    revert with 0, 'SafeMath: multiplication overflow'
                _9319 = mem[64]
                mem[64] = mem[64] + 64
                mem[_9319] = 26
                mem[_9319 + 32] = 'SafeMath: division by zero'
                if uint128(_9052):
                    if ((_8928 * _8484) + (uint128(_8950) * _8484) / uint128(_9052)) + s < s:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    s = ((_8928 * _8484) + (uint128(_8950) * _8484) / uint128(_9052)) + s
                    continue 
                _9387 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _9387 + 68] = mem[idx + _9319 + 32]
                    idx = idx + 32
                    continue 
                mem[_9387 + 94] = 0
                revert with memory
                  from mem[64]
                   len _9387 + -mem[64] + 100
            mem[mem[64] + 4] = this.address
            if not s:
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8473 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8483 = mem[_8473]
                if mem[_8473] < mem[_8473]:
                    revert with 0, 'SafeMath: addition overflow'
                if not mem[_8473]:
                    require ext_code.size(kashiPairs[arg2].field_0)
                    staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                            gas gas_remaining wei
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8565 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    require mem[_8565] == mem[_8565 + 24 len 8]
                    require mem[_8565 + 32] == mem[_8565 + 56 len 8]
                    require mem[_8565 + 64] == mem[_8565 + 80 len 16]
                    require ext_code.size(kashiPairs[arg2].field_0)
                    if block.timestamp <= mem[_8565 + 56 len 8]:
                        staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                gas gas_remaining wei
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8706 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8744 = mem[64]
                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                        mem[64] = mem[64] + 64
                        require mem[_8706] == mem[_8706 + 16 len 16]
                        mem[_8744] = mem[_8706]
                        require mem[_8706 + 32] == mem[_8706 + 48 len 16]
                        mem[_8744 + 32] = mem[_8706 + 32]
                        _8882 = mem[_8744]
                        if 0 > mem[_8744 + 16 len 16]:
                            if mem[_8744 + 16 len 16]:
                                _8968 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8968] = 0
                                mem[_8968 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9046 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9124 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9046] == mem[_9046 + 16 len 16]
                                mem[_9124] = mem[_9046]
                                require mem[_9046 + 32] == mem[_9046 + 48 len 16]
                                mem[_9124 + 32] = mem[_9046 + 32]
                                _9546 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9546] = 0
                                mem[_9546 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9628 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9700 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9628] == mem[_9628 + 16 len 16]
                                mem[_9700] = mem[_9628]
                                require mem[_9628 + 32] == mem[_9628 + 48 len 16]
                                mem[_9700 + 32] = mem[_9628 + 32]
                                _9918 = mem[_9700]
                                if not mem[_9700 + 16 len 16]:
                                    _9987 = mem[_9124]
                                    if mem[_9124 + 16 len 16] < mem[_9124 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_9124 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10349 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_8882) <= mem[_10349]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_8882)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_10349]
                                    else:
                                        _10108 = mem[_9124 + 32]
                                        if not uint128(_8882):
                                            _10297 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10297] = 26
                                            mem[_10297 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_9987):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11397 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / uint128(_9987) <= mem[_11397]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / uint128(_9987)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11397]
                                        else:
                                            if mem[_9124 + 48 len 16] * uint128(_8882) / uint128(_8882) != mem[_9124 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _10405 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10405] = 26
                                            mem[_10405 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_9987):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11696 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10108) * uint128(_8882) / uint128(_9987) <= mem[_11696]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10108) * uint128(_8882) / uint128(_9987)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11696]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = uint128(_9918)
                                    mem[mem[64] + 68] = 1
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), _9918 << 128, 1
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10029 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10075 = mem[_10029]
                                    _10136 = mem[_9124]
                                    if mem[_10029] + mem[_9124 + 16 len 16] < mem[_9124 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_10029] + mem[_9124 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10753 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_8882) <= mem[_10753]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_8882)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_10753]
                                    else:
                                        _10348 = mem[_9124 + 32]
                                        if not uint128(_8882):
                                            _10664 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10664] = 26
                                            mem[_10664 + 32] = 'SafeMath: division by zero'
                                            if not _10075 + uint128(_10136):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12347 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / _10075 + uint128(_10136) <= mem[_12347]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / _10075 + uint128(_10136)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12347]
                                        else:
                                            if mem[_9124 + 48 len 16] * uint128(_8882) / uint128(_8882) != mem[_9124 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _10849 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10849] = 26
                                            mem[_10849 + 32] = 'SafeMath: division by zero'
                                            if not _10075 + uint128(_10136):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12741 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10348) * uint128(_8882) / _10075 + uint128(_10136) <= mem[_12741]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10348) * uint128(_8882) / _10075 + uint128(_10136)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12741]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                    else:
                        call kashiPairs[arg2].field_0.accrue() with:
                             gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                gas gas_remaining wei
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8730 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8770 = mem[64]
                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                        mem[64] = mem[64] + 64
                        require mem[_8730] == mem[_8730 + 16 len 16]
                        mem[_8770] = mem[_8730]
                        require mem[_8730 + 32] == mem[_8730 + 48 len 16]
                        mem[_8770 + 32] = mem[_8730 + 32]
                        _8910 = mem[_8770]
                        if 0 > mem[_8770 + 16 len 16]:
                            if mem[_8770 + 16 len 16]:
                                _9017 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9017] = 0
                                mem[_9017 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9097 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9214 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9097] == mem[_9097 + 16 len 16]
                                mem[_9214] = mem[_9097]
                                require mem[_9097 + 32] == mem[_9097 + 48 len 16]
                                mem[_9214 + 32] = mem[_9097 + 32]
                                _9610 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9610] = 0
                                mem[_9610 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9677 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9760 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9677] == mem[_9677 + 16 len 16]
                                mem[_9760] = mem[_9677]
                                require mem[_9677 + 32] == mem[_9677 + 48 len 16]
                                mem[_9760 + 32] = mem[_9677 + 32]
                                _9952 = mem[_9760]
                                if not mem[_9760 + 16 len 16]:
                                    _10032 = mem[_9214]
                                    if mem[_9214 + 16 len 16] < mem[_9214 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_9214 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10467 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_8910) <= mem[_10467]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_8910)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_10467]
                                    else:
                                        _10174 = mem[_9214 + 32]
                                        if not uint128(_8910):
                                            _10408 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10408] = 26
                                            mem[_10408 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10032):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11702 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / uint128(_10032) <= mem[_11702]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / uint128(_10032)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11702]
                                        else:
                                            if mem[_9214 + 48 len 16] * uint128(_8910) / uint128(_8910) != mem[_9214 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _10527 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10527] = 26
                                            mem[_10527 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10032):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12003 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10174) * uint128(_8910) / uint128(_10032) <= mem[_12003]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10174) * uint128(_8910) / uint128(_10032)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12003]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = uint128(_9952)
                                    mem[mem[64] + 68] = 1
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), _9952 << 128, 1
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10077 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10137 = mem[_10077]
                                    _10212 = mem[_9214]
                                    if mem[_10077] + mem[_9214 + 16 len 16] < mem[_9214 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_10077] + mem[_9214 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10951 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_8910) <= mem[_10951]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_8910)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_10951]
                                    else:
                                        _10466 = mem[_9214 + 32]
                                        if not uint128(_8910):
                                            _10852 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10852] = 26
                                            mem[_10852 + 32] = 'SafeMath: division by zero'
                                            if not _10137 + uint128(_10212):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12747 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / _10137 + uint128(_10212) <= mem[_12747]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / _10137 + uint128(_10212)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12747]
                                        else:
                                            if mem[_9214 + 48 len 16] * uint128(_8910) / uint128(_8910) != mem[_9214 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _11050 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11050] = 26
                                            mem[_11050 + 32] = 'SafeMath: division by zero'
                                            if not _10137 + uint128(_10212):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13141 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10466) * uint128(_8910) / _10137 + uint128(_10212) <= mem[_13141]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10466) * uint128(_8910) / _10137 + uint128(_10212)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13141]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                else:
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = _8483
                    mem[mem[64] + 68] = 1
                    require ext_code.size(bentoBoxAddress)
                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(this.address), _8483, 1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8550 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8564 = mem[_8550]
                    require ext_code.size(kashiPairs[arg2].field_0)
                    staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                            gas gas_remaining wei
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8616 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    require mem[_8616] == mem[_8616 + 24 len 8]
                    require mem[_8616 + 32] == mem[_8616 + 56 len 8]
                    require mem[_8616 + 64] == mem[_8616 + 80 len 16]
                    require ext_code.size(kashiPairs[arg2].field_0)
                    if block.timestamp <= mem[_8616 + 56 len 8]:
                        staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                gas gas_remaining wei
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8785 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8832 = mem[64]
                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                        mem[64] = mem[64] + 64
                        require mem[_8785] == mem[_8785 + 16 len 16]
                        mem[_8832] = mem[_8785]
                        require mem[_8785 + 32] == mem[_8785 + 48 len 16]
                        mem[_8832 + 32] = mem[_8785 + 32]
                        _8966 = mem[_8832]
                        if _8564 <= mem[_8832 + 16 len 16]:
                            if _8564:
                                _9096 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9096] = 0
                                mem[_9096 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9207 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9347 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9207] == mem[_9207 + 16 len 16]
                                mem[_9347] = mem[_9207]
                                require mem[_9207 + 32] == mem[_9207 + 48 len 16]
                                mem[_9347 + 32] = mem[_9207 + 32]
                                _9676 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9676] = 0
                                mem[_9676 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9756 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9822 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9756] == mem[_9756 + 16 len 16]
                                mem[_9822] = mem[_9756]
                                require mem[_9756 + 32] == mem[_9756 + 48 len 16]
                                mem[_9822 + 32] = mem[_9756 + 32]
                                _10007 = mem[_9822]
                                if not mem[_9822 + 16 len 16]:
                                    _10106 = mem[_9347]
                                    if mem[_9347 + 16 len 16] < mem[_9347 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_9347 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10657 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if _8564 <= mem[_10657]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), _8564
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_10657]
                                    else:
                                        _10291 = mem[_9347 + 32]
                                        if not _8564:
                                            _10584 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10584] = 26
                                            mem[_10584 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10106):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12157 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / uint128(_10106) <= mem[_12157]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / uint128(_10106)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12157]
                                        else:
                                            if mem[_9347 + 48 len 16] * _8564 / _8564 != mem[_9347 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _10744 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10744] = 26
                                            mem[_10744 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10106):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12523 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10291) * _8564 / uint128(_10106) <= mem[_12523]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10291) * _8564 / uint128(_10106)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12523]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = uint128(_10007)
                                    mem[mem[64] + 68] = 1
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), _10007 << 128, 1
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10169 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10246 = mem[_10169]
                                    _10344 = mem[_9347]
                                    if mem[_10169] + mem[_9347 + 16 len 16] < mem[_9347 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_10169] + mem[_9347 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11248 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if _8564 <= mem[_11248]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), _8564
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11248]
                                    else:
                                        _10656 = mem[_9347 + 32]
                                        if not _8564:
                                            _11135 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11135] = 26
                                            mem[_11135 + 32] = 'SafeMath: division by zero'
                                            if not _10246 + uint128(_10344):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13335 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / _10246 + uint128(_10344) <= mem[_13335]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / _10246 + uint128(_10344)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13335]
                                        else:
                                            if mem[_9347 + 48 len 16] * _8564 / _8564 != mem[_9347 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _11381 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11381] = 26
                                            mem[_11381 + 32] = 'SafeMath: division by zero'
                                            if not _10246 + uint128(_10344):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13753 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10656) * _8564 / _10246 + uint128(_10344) <= mem[_13753]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10656) * _8564 / _10246 + uint128(_10344)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13753]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                        else:
                            if mem[_8832 + 16 len 16]:
                                _9123 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9123] = 0
                                mem[_9123 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9268 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9385 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9268] == mem[_9268 + 16 len 16]
                                mem[_9385] = mem[_9268]
                                require mem[_9268 + 32] == mem[_9268 + 48 len 16]
                                mem[_9385 + 32] = mem[_9268 + 32]
                                _9699 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9699] = 0
                                mem[_9699 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9787 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9845 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9787] == mem[_9787 + 16 len 16]
                                mem[_9845] = mem[_9787]
                                require mem[_9787 + 32] == mem[_9787 + 48 len 16]
                                mem[_9845 + 32] = mem[_9787 + 32]
                                _10028 = mem[_9845]
                                if not mem[_9845 + 16 len 16]:
                                    _10134 = mem[_9385]
                                    if mem[_9385 + 16 len 16] < mem[_9385 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_9385 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10747 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_8966) <= mem[_10747]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_8966)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_10747]
                                    else:
                                        _10345 = mem[_9385 + 32]
                                        if not uint128(_8966):
                                            _10660 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10660] = 26
                                            mem[_10660 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10134):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12336 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / uint128(_10134) <= mem[_12336]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / uint128(_10134)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12336]
                                        else:
                                            if mem[_9385 + 48 len 16] * uint128(_8966) / uint128(_8966) != mem[_9385 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _10842 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10842] = 26
                                            mem[_10842 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10134):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12730 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10345) * uint128(_8966) / uint128(_10134) <= mem[_12730]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10345) * uint128(_8966) / uint128(_10134)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12730]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = uint128(_10028)
                                    mem[mem[64] + 68] = 1
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), _10028 << 128, 1
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10207 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10292 = mem[_10207]
                                    _10401 = mem[_9385]
                                    if mem[_10207] + mem[_9385 + 16 len 16] < mem[_9385 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_10207] + mem[_9385 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11384 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_8966) <= mem[_11384]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_8966)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11384]
                                    else:
                                        _10746 = mem[_9385 + 32]
                                        if not uint128(_8966):
                                            _11252 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11252] = 26
                                            mem[_11252 + 32] = 'SafeMath: division by zero'
                                            if not _10292 + uint128(_10401):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13544 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / _10292 + uint128(_10401) <= mem[_13544]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / _10292 + uint128(_10401)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13544]
                                        else:
                                            if mem[_9385 + 48 len 16] * uint128(_8966) / uint128(_8966) != mem[_9385 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _11527 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11527] = 26
                                            mem[_11527 + 32] = 'SafeMath: division by zero'
                                            if not _10292 + uint128(_10401):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13964 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10746) * uint128(_8966) / _10292 + uint128(_10401) <= mem[_13964]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10746) * uint128(_8966) / _10292 + uint128(_10401)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13964]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                    else:
                        call kashiPairs[arg2].field_0.accrue() with:
                             gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                gas gas_remaining wei
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8815 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8857 = mem[64]
                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                        mem[64] = mem[64] + 64
                        require mem[_8815] == mem[_8815 + 16 len 16]
                        mem[_8857] = mem[_8815]
                        require mem[_8815 + 32] == mem[_8815 + 48 len 16]
                        mem[_8857 + 32] = mem[_8815 + 32]
                        _9013 = mem[_8857]
                        if _8564 <= mem[_8857 + 16 len 16]:
                            if _8564:
                                _9165 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9165] = 0
                                mem[_9165 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9316 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9420 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9316] == mem[_9316 + 16 len 16]
                                mem[_9420] = mem[_9316]
                                require mem[_9316 + 32] == mem[_9316 + 48 len 16]
                                mem[_9420 + 32] = mem[_9316 + 32]
                                _9732 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9732] = 0
                                mem[_9732 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9810 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9866 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9810] == mem[_9810 + 16 len 16]
                                mem[_9866] = mem[_9810]
                                require mem[_9810 + 32] == mem[_9810 + 48 len 16]
                                mem[_9866 + 32] = mem[_9810 + 32]
                                _10052 = mem[_9866]
                                if not mem[_9866 + 16 len 16]:
                                    _10172 = mem[_9420]
                                    if mem[_9420 + 16 len 16] < mem[_9420 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_9420 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10845 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if _8564 <= mem[_10845]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), _8564
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_10845]
                                    else:
                                        _10402 = mem[_9420 + 32]
                                        if not _8564:
                                            _10750 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10750] = 26
                                            mem[_10750 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10172):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12532 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / uint128(_10172) <= mem[_12532]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / uint128(_10172)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12532]
                                        else:
                                            if mem[_9420 + 48 len 16] * _8564 / _8564 != mem[_9420 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _10942 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10942] = 26
                                            mem[_10942 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10172):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12928 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10402) * _8564 / uint128(_10172) <= mem[_12928]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10402) * _8564 / uint128(_10172)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12928]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = uint128(_10052)
                                    mem[mem[64] + 68] = 1
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), _10052 << 128, 1
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10248 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10346 = mem[_10248]
                                    _10462 = mem[_9420]
                                    if mem[_10248] + mem[_9420 + 16 len 16] < mem[_9420 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_10248] + mem[_9420 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11530 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if _8564 <= mem[_11530]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), _8564
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11530]
                                    else:
                                        _10844 = mem[_9420 + 32]
                                        if not _8564:
                                            _11388 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11388] = 26
                                            mem[_11388 + 32] = 'SafeMath: division by zero'
                                            if not _10346 + uint128(_10462):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13763 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / _10346 + uint128(_10462) <= mem[_13763]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / _10346 + uint128(_10462)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13763]
                                        else:
                                            if mem[_9420 + 48 len 16] * _8564 / _8564 != mem[_9420 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _11685 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11685] = 26
                                            mem[_11685 + 32] = 'SafeMath: division by zero'
                                            if not _10346 + uint128(_10462):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14170 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10844) * _8564 / _10346 + uint128(_10462) <= mem[_14170]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10844) * _8564 / _10346 + uint128(_10462)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_14170]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                        else:
                            if mem[_8857 + 16 len 16]:
                                _9213 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9213] = 0
                                mem[_9213 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9348 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9462 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9348] == mem[_9348 + 16 len 16]
                                mem[_9462] = mem[_9348]
                                require mem[_9348 + 32] == mem[_9348 + 48 len 16]
                                mem[_9462 + 32] = mem[_9348 + 32]
                                _9759 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9759] = 0
                                mem[_9759 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9823 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9889 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9823] == mem[_9823 + 16 len 16]
                                mem[_9889] = mem[_9823]
                                require mem[_9823 + 32] == mem[_9823 + 48 len 16]
                                mem[_9889 + 32] = mem[_9823 + 32]
                                _10074 = mem[_9889]
                                if not mem[_9889 + 16 len 16]:
                                    _10210 = mem[_9462]
                                    if mem[_9462 + 16 len 16] < mem[_9462 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_9462 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10945 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_9013) <= mem[_10945]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_9013)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_10945]
                                    else:
                                        _10463 = mem[_9462 + 32]
                                        if not uint128(_9013):
                                            _10848 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10848] = 26
                                            mem[_10848 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10210):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12739 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / uint128(_10210) <= mem[_12739]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / uint128(_10210)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12739]
                                        else:
                                            if mem[_9462 + 48 len 16] * uint128(_9013) / uint128(_9013) != mem[_9462 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _11045 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11045] = 26
                                            mem[_11045 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10210):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13133 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10463) * uint128(_9013) / uint128(_10210) <= mem[_13133]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10463) * uint128(_9013) / uint128(_10210)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13133]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = uint128(_10074)
                                    mem[mem[64] + 68] = 1
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), _10074 << 128, 1
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10294 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10403 = mem[_10294]
                                    _10524 = mem[_9462]
                                    if mem[_10294] + mem[_9462 + 16 len 16] < mem[_9462 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_10294] + mem[_9462 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11688 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_9013) <= mem[_11688]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_9013)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11688]
                                    else:
                                        _10944 = mem[_9462 + 32]
                                        if not uint128(_9013):
                                            _11534 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11534] = 26
                                            mem[_11534 + 32] = 'SafeMath: division by zero'
                                            if not _10403 + uint128(_10524):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13974 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / _10403 + uint128(_10524) <= mem[_13974]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / _10403 + uint128(_10524)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13974]
                                        else:
                                            if mem[_9462 + 48 len 16] * uint128(_9013) / uint128(_9013) != mem[_9462 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _11844 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11844] = 26
                                            mem[_11844 + 32] = 'SafeMath: division by zero'
                                            if not _10403 + uint128(_10524):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14388 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10944) * uint128(_9013) / _10403 + uint128(_10524) <= mem[_14388]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10944) * uint128(_9013) / _10403 + uint128(_10524)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_14388]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
            else:
                mem[mem[64] + 36] = s
                mem[mem[64] + 68] = 1
                require ext_code.size(bentoBoxAddress)
                staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(this.address), s, 1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8456 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8468 = mem[_8456]
                mem[mem[64] + 4] = this.address
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8497 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8506 = mem[_8497]
                if _8468 + mem[_8497] < mem[_8497]:
                    revert with 0, 'SafeMath: addition overflow'
                if not _8468 + mem[_8497]:
                    require ext_code.size(kashiPairs[arg2].field_0)
                    staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                            gas gas_remaining wei
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8615 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    require mem[_8615] == mem[_8615 + 24 len 8]
                    require mem[_8615 + 32] == mem[_8615 + 56 len 8]
                    require mem[_8615 + 64] == mem[_8615 + 80 len 16]
                    require ext_code.size(kashiPairs[arg2].field_0)
                    if block.timestamp <= mem[_8615 + 56 len 8]:
                        staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                gas gas_remaining wei
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8782 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8831 = mem[64]
                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                        mem[64] = mem[64] + 64
                        require mem[_8782] == mem[_8782 + 16 len 16]
                        mem[_8831] = mem[_8782]
                        require mem[_8782 + 32] == mem[_8782 + 48 len 16]
                        mem[_8831 + 32] = mem[_8782 + 32]
                        _8965 = mem[_8831]
                        if 0 > mem[_8831 + 16 len 16]:
                            if mem[_8831 + 16 len 16]:
                                _9119 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9119] = 0
                                mem[_9119 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9262 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9384 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9262] == mem[_9262 + 16 len 16]
                                mem[_9384] = mem[_9262]
                                require mem[_9262 + 32] == mem[_9262 + 48 len 16]
                                mem[_9384 + 32] = mem[_9262 + 32]
                                _9696 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9696] = 0
                                mem[_9696 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9784 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9844 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9784] == mem[_9784 + 16 len 16]
                                mem[_9844] = mem[_9784]
                                require mem[_9784 + 32] == mem[_9784 + 48 len 16]
                                mem[_9844 + 32] = mem[_9784 + 32]
                                _10027 = mem[_9844]
                                if not mem[_9844 + 16 len 16]:
                                    _10131 = mem[_9384]
                                    if mem[_9384 + 16 len 16] < mem[_9384 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_9384 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10740 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_8965) <= mem[_10740]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_8965)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_10740]
                                    else:
                                        _10343 = mem[_9384 + 32]
                                        if not uint128(_8965):
                                            _10654 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10654] = 26
                                            mem[_10654 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10131):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12325 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / uint128(_10131) <= mem[_12325]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / uint128(_10131)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12325]
                                        else:
                                            if mem[_9384 + 48 len 16] * uint128(_8965) / uint128(_8965) != mem[_9384 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _10836 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10836] = 26
                                            mem[_10836 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10131):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12716 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10343) * uint128(_8965) / uint128(_10131) <= mem[_12716]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10343) * uint128(_8965) / uint128(_10131)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12716]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = uint128(_10027)
                                    mem[mem[64] + 68] = 1
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), _10027 << 128, 1
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10203 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10287 = mem[_10203]
                                    _10397 = mem[_9384]
                                    if mem[_10203] + mem[_9384 + 16 len 16] < mem[_9384 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_10203] + mem[_9384 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11375 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_8965) <= mem[_11375]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_8965)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11375]
                                    else:
                                        _10739 = mem[_9384 + 32]
                                        if not uint128(_8965):
                                            _11243 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11243] = 26
                                            mem[_11243 + 32] = 'SafeMath: division by zero'
                                            if not _10287 + uint128(_10397):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13530 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / _10287 + uint128(_10397) <= mem[_13530]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / _10287 + uint128(_10397)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13530]
                                        else:
                                            if mem[_9384 + 48 len 16] * uint128(_8965) / uint128(_8965) != mem[_9384 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _11517 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11517] = 26
                                            mem[_11517 + 32] = 'SafeMath: division by zero'
                                            if not _10287 + uint128(_10397):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13951 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10739) * uint128(_8965) / _10287 + uint128(_10397) <= mem[_13951]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10739) * uint128(_8965) / _10287 + uint128(_10397)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13951]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                    else:
                        call kashiPairs[arg2].field_0.accrue() with:
                             gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                gas gas_remaining wei
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8814 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8856 = mem[64]
                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                        mem[64] = mem[64] + 64
                        require mem[_8814] == mem[_8814 + 16 len 16]
                        mem[_8856] = mem[_8814]
                        require mem[_8814 + 32] == mem[_8814 + 48 len 16]
                        mem[_8856 + 32] = mem[_8814 + 32]
                        _9012 = mem[_8856]
                        if 0 > mem[_8856 + 16 len 16]:
                            if mem[_8856 + 16 len 16]:
                                _9206 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9206] = 0
                                mem[_9206 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9345 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9460 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9345] == mem[_9345 + 16 len 16]
                                mem[_9460] = mem[_9345]
                                require mem[_9345 + 32] == mem[_9345 + 48 len 16]
                                mem[_9460 + 32] = mem[_9345 + 32]
                                _9755 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9755] = 0
                                mem[_9755 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9821 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9887 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9821] == mem[_9821 + 16 len 16]
                                mem[_9887] = mem[_9821]
                                require mem[_9821 + 32] == mem[_9821 + 48 len 16]
                                mem[_9887 + 32] = mem[_9821 + 32]
                                _10072 = mem[_9887]
                                if not mem[_9887 + 16 len 16]:
                                    _10206 = mem[_9460]
                                    if mem[_9460 + 16 len 16] < mem[_9460 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_9460 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10936 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_9012) <= mem[_10936]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_9012)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_10936]
                                    else:
                                        _10459 = mem[_9460 + 32]
                                        if not uint128(_9012):
                                            _10839 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10839] = 26
                                            mem[_10839 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10206):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12722 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / uint128(_10206) <= mem[_12722]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / uint128(_10206)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12722]
                                        else:
                                            if mem[_9460 + 48 len 16] * uint128(_9012) / uint128(_9012) != mem[_9460 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _11037 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11037] = 26
                                            mem[_11037 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10206):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13113 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10459) * uint128(_9012) / uint128(_10206) <= mem[_13113]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10459) * uint128(_9012) / uint128(_10206)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13113]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = uint128(_10072)
                                    mem[mem[64] + 68] = 1
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), _10072 << 128, 1
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10289 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10398 = mem[_10289]
                                    _10519 = mem[_9460]
                                    if mem[_10289] + mem[_9460 + 16 len 16] < mem[_9460 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_10289] + mem[_9460 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11674 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_9012) <= mem[_11674]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_9012)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11674]
                                    else:
                                        _10935 = mem[_9460 + 32]
                                        if not uint128(_9012):
                                            _11520 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11520] = 26
                                            mem[_11520 + 32] = 'SafeMath: division by zero'
                                            if not _10398 + uint128(_10519):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13957 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / _10398 + uint128(_10519) <= mem[_13957]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / _10398 + uint128(_10519)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13957]
                                        else:
                                            if mem[_9460 + 48 len 16] * uint128(_9012) / uint128(_9012) != mem[_9460 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _11831 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11831] = 26
                                            mem[_11831 + 32] = 'SafeMath: division by zero'
                                            if not _10398 + uint128(_10519):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14370 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10935) * uint128(_9012) / _10398 + uint128(_10519) <= mem[_14370]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10935) * uint128(_9012) / _10398 + uint128(_10519)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_14370]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                else:
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = _8468 + _8506
                    mem[mem[64] + 68] = 1
                    require ext_code.size(bentoBoxAddress)
                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(this.address), _8468 + _8506, 1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8592 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8614 = mem[_8592]
                    require ext_code.size(kashiPairs[arg2].field_0)
                    staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                            gas gas_remaining wei
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8676 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    require mem[_8676] == mem[_8676 + 24 len 8]
                    require mem[_8676 + 32] == mem[_8676 + 56 len 8]
                    require mem[_8676 + 64] == mem[_8676 + 80 len 16]
                    require ext_code.size(kashiPairs[arg2].field_0)
                    if block.timestamp <= mem[_8676 + 56 len 8]:
                        staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                gas gas_remaining wei
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8877 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8925 = mem[64]
                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                        mem[64] = mem[64] + 64
                        require mem[_8877] == mem[_8877 + 16 len 16]
                        mem[_8925] = mem[_8877]
                        require mem[_8877 + 32] == mem[_8877 + 48 len 16]
                        mem[_8925 + 32] = mem[_8877 + 32]
                        _9117 = mem[_8925]
                        if _8614 <= mem[_8925 + 16 len 16]:
                            if _8614:
                                _9344 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9344] = 0
                                mem[_9344 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9453 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9573 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9453] == mem[_9453 + 16 len 16]
                                mem[_9573] = mem[_9453]
                                require mem[_9453 + 32] == mem[_9453 + 48 len 16]
                                mem[_9573 + 32] = mem[_9453 + 32]
                                _9820 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9820] = 0
                                mem[_9820 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9883 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9946 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9883] == mem[_9883 + 16 len 16]
                                mem[_9946] = mem[_9883]
                                require mem[_9883 + 32] == mem[_9883 + 48 len 16]
                                mem[_9946 + 32] = mem[_9883 + 32]
                                _10167 = mem[_9946]
                                if not mem[_9946 + 16 len 16]:
                                    _10341 = mem[_9573]
                                    if mem[_9573 + 16 len 16] < mem[_9573 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_9573 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11236 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if _8614 <= mem[_11236]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), _8614
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11236]
                                    else:
                                        _10648 = mem[_9573 + 32]
                                        if not _8614:
                                            _11126 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11126] = 26
                                            mem[_11126 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10341):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13313 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / uint128(_10341) <= mem[_13313]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / uint128(_10341)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13313]
                                        else:
                                            if mem[_9573 + 48 len 16] * _8614 / _8614 != mem[_9573 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _11366 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11366] = 26
                                            mem[_11366 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10341):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13728 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10648) * _8614 / uint128(_10341) <= mem[_13728]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10648) * _8614 / uint128(_10341)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13728]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = uint128(_10167)
                                    mem[mem[64] + 68] = 1
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), _10167 << 128, 1
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10454 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10576 = mem[_10454]
                                    _10735 = mem[_9573]
                                    if mem[_10454] + mem[_9573 + 16 len 16] < mem[_9573 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_10454] + mem[_9573 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12134 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if _8614 <= mem[_12134]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), _8614
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12134]
                                    else:
                                        _11235 = mem[_9573 + 32]
                                        if not _8614:
                                            _11962 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11962] = 26
                                            mem[_11962 + 32] = 'SafeMath: division by zero'
                                            if not _10576 + uint128(_10735):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14568 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / _10576 + uint128(_10735) <= mem[_14568]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / _10576 + uint128(_10735)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_14568]
                                        else:
                                            if mem[_9573 + 48 len 16] * _8614 / _8614 != mem[_9573 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _12309 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_12309] = 26
                                            mem[_12309 + 32] = 'SafeMath: division by zero'
                                            if not _10576 + uint128(_10735):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14970 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_11235) * _8614 / _10576 + uint128(_10735) <= mem[_14970]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_11235) * _8614 / _10576 + uint128(_10735)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_14970]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                        else:
                            if mem[_8925 + 16 len 16]:
                                _9383 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9383] = 0
                                mem[_9383 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9505 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9607 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9505] == mem[_9505 + 16 len 16]
                                mem[_9607] = mem[_9505]
                                require mem[_9505 + 32] == mem[_9505 + 48 len 16]
                                mem[_9607 + 32] = mem[_9505 + 32]
                                _9843 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9843] = 0
                                mem[_9843 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9913 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9970 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9913] == mem[_9913 + 16 len 16]
                                mem[_9970] = mem[_9913]
                                require mem[_9913 + 32] == mem[_9913 + 48 len 16]
                                mem[_9970 + 32] = mem[_9913 + 32]
                                _10202 = mem[_9970]
                                if not mem[_9970 + 16 len 16]:
                                    _10395 = mem[_9607]
                                    if mem[_9607 + 16 len 16] < mem[_9607 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_9607 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11369 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_9117) <= mem[_11369]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_9117)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11369]
                                    else:
                                        _10736 = mem[_9607 + 32]
                                        if not uint128(_9117):
                                            _11239 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11239] = 26
                                            mem[_11239 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10395):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13519 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / uint128(_10395) <= mem[_13519]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / uint128(_10395)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13519]
                                        else:
                                            if mem[_9607 + 48 len 16] * uint128(_9117) / uint128(_9117) != mem[_9607 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _11510 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11510] = 26
                                            mem[_11510 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10395):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13940 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10736) * uint128(_9117) / uint128(_10395) <= mem[_13940]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10736) * uint128(_9117) / uint128(_10395)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13940]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = uint128(_10202)
                                    mem[mem[64] + 68] = 1
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), _10202 << 128, 1
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10514 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10649 = mem[_10514]
                                    _10832 = mem[_9607]
                                    if mem[_10514] + mem[_9607 + 16 len 16] < mem[_9607 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_10514] + mem[_9607 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12312 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_9117) <= mem[_12312]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_9117)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12312]
                                    else:
                                        _11368 = mem[_9607 + 32]
                                        if not uint128(_9117):
                                            _12138 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_12138] = 26
                                            mem[_12138 + 32] = 'SafeMath: division by zero'
                                            if not _10649 + uint128(_10832):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14776 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / _10649 + uint128(_10832) <= mem[_14776]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / _10649 + uint128(_10832)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_14776]
                                        else:
                                            if mem[_9607 + 48 len 16] * uint128(_9117) / uint128(_9117) != mem[_9607 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _12501 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_12501] = 26
                                            mem[_12501 + 32] = 'SafeMath: division by zero'
                                            if not _10649 + uint128(_10832):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15156 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_11368) * uint128(_9117) / _10649 + uint128(_10832) <= mem[_15156]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_11368) * uint128(_9117) / _10649 + uint128(_10832)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_15156]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                    else:
                        call kashiPairs[arg2].field_0.accrue() with:
                             gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                gas gas_remaining wei
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8907 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8947 = mem[64]
                        require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                        mem[64] = mem[64] + 64
                        require mem[_8907] == mem[_8907 + 16 len 16]
                        mem[_8947] = mem[_8907]
                        require mem[_8907 + 32] == mem[_8907 + 48 len 16]
                        mem[_8947 + 32] = mem[_8907 + 32]
                        _9202 = mem[_8947]
                        if _8614 <= mem[_8947 + 16 len 16]:
                            if _8614:
                                _9419 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9419] = 0
                                mem[_9419 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9542 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9626 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9542] == mem[_9542 + 16 len 16]
                                mem[_9626] = mem[_9542]
                                require mem[_9542 + 32] == mem[_9542 + 48 len 16]
                                mem[_9626 + 32] = mem[_9542 + 32]
                                _9865 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9865] = 0
                                mem[_9865 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9933 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9984 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9933] == mem[_9933 + 16 len 16]
                                mem[_9984] = mem[_9933]
                                require mem[_9933 + 32] == mem[_9933 + 48 len 16]
                                mem[_9984 + 32] = mem[_9933 + 32]
                                _10245 = mem[_9984]
                                if not mem[_9984 + 16 len 16]:
                                    _10457 = mem[_9626]
                                    if mem[_9626 + 16 len 16] < mem[_9626 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_9626 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11513 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if _8614 <= mem[_11513]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), _8614
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11513]
                                    else:
                                        _10833 = mem[_9626 + 32]
                                        if not _8614:
                                            _11372 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11372] = 26
                                            mem[_11372 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10457):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13737 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / uint128(_10457) <= mem[_13737]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / uint128(_10457)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13737]
                                        else:
                                            if mem[_9626 + 48 len 16] * _8614 / _8614 != mem[_9626 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _11665 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11665] = 26
                                            mem[_11665 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10457):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14147 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10833) * _8614 / uint128(_10457) <= mem[_14147]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10833) * _8614 / uint128(_10457)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_14147]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = uint128(_10245)
                                    mem[mem[64] + 68] = 1
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), _10245 << 128, 1
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10578 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10737 = mem[_10578]
                                    _10931 = mem[_9626]
                                    if mem[_10578] + mem[_9626 + 16 len 16] < mem[_9626 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_10578] + mem[_9626 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12504 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if _8614 <= mem[_12504]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), _8614
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12504]
                                    else:
                                        _11512 = mem[_9626 + 32]
                                        if not _8614:
                                            _12316 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_12316] = 26
                                            mem[_12316 + 32] = 'SafeMath: division by zero'
                                            if not _10737 + uint128(_10931):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14980 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / _10737 + uint128(_10931) <= mem[_14980]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / _10737 + uint128(_10931)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_14980]
                                        else:
                                            if mem[_9626 + 48 len 16] * _8614 / _8614 != mem[_9626 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _12705 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_12705] = 26
                                            mem[_12705 + 32] = 'SafeMath: division by zero'
                                            if not _10737 + uint128(_10931):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15338 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_11512) * _8614 / _10737 + uint128(_10931) <= mem[_15338]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_11512) * _8614 / _10737 + uint128(_10931)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_15338]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                        else:
                            if mem[_8947 + 16 len 16]:
                                _9459 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9459] = 0
                                mem[_9459 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9574 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _9654 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9574] == mem[_9574 + 16 len 16]
                                mem[_9654] = mem[_9574]
                                require mem[_9574 + 32] == mem[_9574 + 48 len 16]
                                mem[_9654 + 32] = mem[_9574 + 32]
                                _9886 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_9886] = 0
                                mem[_9886 + 32] = 0
                                require ext_code.size(kashiPairs[arg2].field_0)
                                staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                        gas gas_remaining wei
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9947 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _10005 = mem[64]
                                require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                mem[64] = mem[64] + 64
                                require mem[_9947] == mem[_9947 + 16 len 16]
                                mem[_10005] = mem[_9947]
                                require mem[_9947 + 32] == mem[_9947 + 48 len 16]
                                mem[_10005 + 32] = mem[_9947 + 32]
                                _10286 = mem[_10005]
                                if not mem[_10005 + 16 len 16]:
                                    _10517 = mem[_9654]
                                    if mem[_9654 + 16 len 16] < mem[_9654 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_9654 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11668 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_9202) <= mem[_11668]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_9202)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_11668]
                                    else:
                                        _10932 = mem[_9654 + 32]
                                        if not uint128(_9202):
                                            _11516 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11516] = 26
                                            mem[_11516 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10517):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _13949 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / uint128(_10517) <= mem[_13949]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / uint128(_10517)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_13949]
                                        else:
                                            if mem[_9654 + 48 len 16] * uint128(_9202) / uint128(_9202) != mem[_9654 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _11826 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_11826] = 26
                                            mem[_11826 + 32] = 'SafeMath: division by zero'
                                            if not uint128(_10517):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14362 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_10932) * uint128(_9202) / uint128(_10517) <= mem[_14362]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_10932) * uint128(_9202) / uint128(_10517)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_14362]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    mem[mem[64] + 36] = uint128(_10286)
                                    mem[mem[64] + 68] = 1
                                    require ext_code.size(bentoBoxAddress)
                                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(this.address), _10286 << 128, 1
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10651 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10834 = mem[_10651]
                                    _11034 = mem[_9654]
                                    if mem[_10651] + mem[_9654 + 16 len 16] < mem[_9654 + 16 len 16]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not mem[_10651] + mem[_9654 + 16 len 16]:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12708 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require ext_code.size(kashiPairs[arg2].field_0)
                                        if uint128(_9202) <= mem[_12708]:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), uint128(_9202)
                                        else:
                                            call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(this.address), mem[_12708]
                                    else:
                                        _11667 = mem[_9654 + 32]
                                        if not uint128(_9202):
                                            _12508 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_12508] = 26
                                            mem[_12508 + 32] = 'SafeMath: division by zero'
                                            if not _10834 + uint128(_11034):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15166 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if 0 / _10834 + uint128(_11034) <= mem[_15166]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), 0 / _10834 + uint128(_11034)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_15166]
                                        else:
                                            if mem[_9654 + 48 len 16] * uint128(_9202) / uint128(_9202) != mem[_9654 + 48 len 16]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            _12906 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_12906] = 26
                                            mem[_12906 + 32] = 'SafeMath: division by zero'
                                            if not _10834 + uint128(_11034):
                                                revert with 0, 'SafeMath: division by zero', 0
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15527 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_11667) * uint128(_9202) / _10834 + uint128(_11034) <= mem[_15527]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_11667) * uint128(_9202) / _10834 + uint128(_11034)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_15527]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
        else:
            require ext_code.size(vaultAddress)
            staticcall vaultAddress.guardian() with:
                    gas gas_remaining wei
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if msg.sender == ext_call.return_data[12 len 20]:
                mem[(2 * ceil32(return_data.size)) + 96] = 0
                mem[(2 * ceil32(return_data.size)) + 128] = 0
                require arg2 < kashiPairs.length
                mem[0] = 12
                mem[(2 * ceil32(return_data.size)) + 160] = kashiPairs[arg2].field_0
                mem[(2 * ceil32(return_data.size)) + 192] = kashiPairs[arg2].field_256
                require arg1 == kashiPairs[arg2].field_0
                mem[(2 * ceil32(return_data.size)) + 228] = wantAddress
                mem[(2 * ceil32(return_data.size)) + 260] = this.address
                require ext_code.size(bentoBoxAddress)
                staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wantAddress, this.address
                mem[(2 * ceil32(return_data.size)) + 224] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 224
                require return_data.size >= 32
                idx = 0
                s = mem[(2 * ceil32(return_data.size)) + 224]
                while idx < kashiPairs.length:
                    _8429 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_8429] = 0
                    mem[_8429 + 32] = 0
                    mem[0] = 12
                    _8440 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_8440] = kashiPairs[idx].field_0
                    mem[_8440 + 32] = kashiPairs[idx].field_256
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8476 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8487 = mem[_8476]
                    _8511 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_8511] = 0
                    mem[_8511 + 32] = 0
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.totalAsset() with:
                            gas gas_remaining wei
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8528 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8544 = mem[64]
                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                    mem[64] = mem[64] + 64
                    require mem[_8528] == mem[_8528 + 16 len 16]
                    mem[_8544] = mem[_8528]
                    require mem[_8528 + 32] == mem[_8528 + 48 len 16]
                    mem[_8544 + 32] = mem[_8528 + 32]
                    _8625 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_8625] = 0
                    mem[_8625 + 32] = 0
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.totalBorrow() with:
                            gas gas_remaining wei
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8655 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8687 = mem[64]
                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                    mem[64] = mem[64] + 64
                    require mem[_8655] == mem[_8655 + 16 len 16]
                    mem[_8687] = mem[_8655]
                    require mem[_8655 + 32] == mem[_8655 + 48 len 16]
                    mem[_8687 + 32] = mem[_8655 + 32]
                    _8805 = mem[_8687]
                    if not mem[_8687 + 16 len 16]:
                        _8865 = mem[_8544]
                        if mem[_8544 + 16 len 16] < mem[_8544 + 16 len 16]:
                            revert with 0, 'SafeMath: addition overflow'
                        _8935 = mem[_8544 + 32]
                        if not _8487:
                            _9026 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9026] = 26
                            mem[_9026 + 32] = 'SafeMath: division by zero'
                            if uint128(_8935):
                                if (0 / uint128(_8935)) + s < s:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                s = (0 / uint128(_8935)) + s
                                continue 
                            _9086 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _9086 + 68] = mem[idx + _9026 + 32]
                                idx = idx + 32
                                continue 
                            mem[_9086 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _9086 + -mem[64] + 100
                        if mem[_8544 + 16 len 16] * _8487 / _8487 != mem[_8544 + 16 len 16]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        _9085 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_9085] = 26
                        mem[_9085 + 32] = 'SafeMath: division by zero'
                        if uint128(_8935):
                            if (uint128(_8865) * _8487 / uint128(_8935)) + s < s:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            s = (uint128(_8865) * _8487 / uint128(_8935)) + s
                            continue 
                        _9135 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _9135 + 68] = mem[idx + _9085 + 32]
                            idx = idx + 32
                            continue 
                        mem[_9135 + 94] = 0
                        revert with memory
                          from mem[64]
                           len _9135 + -mem[64] + 100
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = uint128(_8805)
                    mem[mem[64] + 68] = 1
                    require ext_code.size(bentoBoxAddress)
                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(this.address), _8805 << 128, 1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8899 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8934 = mem[_8899]
                    _8954 = mem[_8544]
                    if mem[_8899] + mem[_8544 + 16 len 16] < mem[_8544 + 16 len 16]:
                        revert with 0, 'SafeMath: addition overflow'
                    _9062 = mem[_8544 + 32]
                    if not _8487:
                        _9230 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_9230] = 26
                        mem[_9230 + 32] = 'SafeMath: division by zero'
                        if uint128(_9062):
                            if (0 / uint128(_9062)) + s < s:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            s = (0 / uint128(_9062)) + s
                            continue 
                        _9327 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _9327 + 68] = mem[idx + _9230 + 32]
                            idx = idx + 32
                            continue 
                        mem[_9327 + 94] = 0
                        revert with memory
                          from mem[64]
                           len _9327 + -mem[64] + 100
                    if (mem[_8899] * _8487) + (mem[_8544 + 16 len 16] * _8487) / _8487 != mem[_8899] + mem[_8544 + 16 len 16]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    _9326 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_9326] = 26
                    mem[_9326 + 32] = 'SafeMath: division by zero'
                    if uint128(_9062):
                        if ((_8934 * _8487) + (uint128(_8954) * _8487) / uint128(_9062)) + s < s:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        s = ((_8934 * _8487) + (uint128(_8954) * _8487) / uint128(_9062)) + s
                        continue 
                    _9396 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _9396 + 68] = mem[idx + _9326 + 32]
                        idx = idx + 32
                        continue 
                    mem[_9396 + 94] = 0
                    revert with memory
                      from mem[64]
                       len _9396 + -mem[64] + 100
                mem[mem[64] + 4] = this.address
                if not s:
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8475 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8486 = mem[_8475]
                    if mem[_8475] < mem[_8475]:
                        revert with 0, 'SafeMath: addition overflow'
                    if not mem[_8475]:
                        require ext_code.size(kashiPairs[arg2].field_0)
                        staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                                gas gas_remaining wei
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8569 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        require mem[_8569] == mem[_8569 + 24 len 8]
                        require mem[_8569 + 32] == mem[_8569 + 56 len 8]
                        require mem[_8569 + 64] == mem[_8569 + 80 len 16]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        if block.timestamp <= mem[_8569 + 56 len 8]:
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8709 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8745 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8709] == mem[_8709 + 16 len 16]
                            mem[_8745] = mem[_8709]
                            require mem[_8709 + 32] == mem[_8709 + 48 len 16]
                            mem[_8745 + 32] = mem[_8709 + 32]
                            _8888 = mem[_8745]
                            if 0 > mem[_8745 + 16 len 16]:
                                if mem[_8745 + 16 len 16]:
                                    _8973 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8973] = 0
                                    mem[_8973 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9056 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9134 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9056] == mem[_9056 + 16 len 16]
                                    mem[_9134] = mem[_9056]
                                    require mem[_9056 + 32] == mem[_9056 + 48 len 16]
                                    mem[_9134 + 32] = mem[_9056 + 32]
                                    _9553 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9553] = 0
                                    mem[_9553 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9635 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9708 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9635] == mem[_9635 + 16 len 16]
                                    mem[_9708] = mem[_9635]
                                    require mem[_9635 + 32] == mem[_9635 + 48 len 16]
                                    mem[_9708 + 32] = mem[_9635 + 32]
                                    _9924 = mem[_9708]
                                    if not mem[_9708 + 16 len 16]:
                                        _9992 = mem[_9134]
                                        if mem[_9134 + 16 len 16] < mem[_9134 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9134 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10362 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8888) <= mem[_10362]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8888)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10362]
                                        else:
                                            _10113 = mem[_9134 + 32]
                                            if not uint128(_8888):
                                                _10311 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10311] = 26
                                                mem[_10311 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_9992):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _11432 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_9992) <= mem[_11432]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_9992)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_11432]
                                            else:
                                                if mem[_9134 + 48 len 16] * uint128(_8888) / uint128(_8888) != mem[_9134 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10420 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10420] = 26
                                                mem[_10420 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_9992):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _11738 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10113) * uint128(_8888) / uint128(_9992) <= mem[_11738]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10113) * uint128(_8888) / uint128(_9992)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_11738]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_9924)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _9924 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10036 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10085 = mem[_10036]
                                        _10146 = mem[_9134]
                                        if mem[_10036] + mem[_9134 + 16 len 16] < mem[_9134 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10036] + mem[_9134 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10777 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8888) <= mem[_10777]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8888)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10777]
                                        else:
                                            _10361 = mem[_9134 + 32]
                                            if not uint128(_8888):
                                                _10685 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10685] = 26
                                                mem[_10685 + 32] = 'SafeMath: division by zero'
                                                if not _10085 + uint128(_10146):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12393 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10085 + uint128(_10146) <= mem[_12393]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10085 + uint128(_10146)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12393]
                                            else:
                                                if mem[_9134 + 48 len 16] * uint128(_8888) / uint128(_8888) != mem[_9134 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10873 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10873] = 26
                                                mem[_10873 + 32] = 'SafeMath: division by zero'
                                                if not _10085 + uint128(_10146):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12792 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10361) * uint128(_8888) / _10085 + uint128(_10146) <= mem[_12792]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10361) * uint128(_8888) / _10085 + uint128(_10146)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12792]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                        else:
                            call kashiPairs[arg2].field_0.accrue() with:
                                 gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8736 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8772 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8736] == mem[_8736 + 16 len 16]
                            mem[_8772] = mem[_8736]
                            require mem[_8736 + 32] == mem[_8736 + 48 len 16]
                            mem[_8772 + 32] = mem[_8736 + 32]
                            _8914 = mem[_8772]
                            if 0 > mem[_8772 + 16 len 16]:
                                if mem[_8772 + 16 len 16]:
                                    _9025 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9025] = 0
                                    mem[_9025 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9101 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9229 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9101] == mem[_9101 + 16 len 16]
                                    mem[_9229] = mem[_9101]
                                    require mem[_9101 + 32] == mem[_9101 + 48 len 16]
                                    mem[_9229 + 32] = mem[_9101 + 32]
                                    _9614 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9614] = 0
                                    mem[_9614 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9681 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9767 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9681] == mem[_9681 + 16 len 16]
                                    mem[_9767] = mem[_9681]
                                    require mem[_9681 + 32] == mem[_9681 + 48 len 16]
                                    mem[_9767 + 32] = mem[_9681 + 32]
                                    _9959 = mem[_9767]
                                    if not mem[_9767 + 16 len 16]:
                                        _10039 = mem[_9229]
                                        if mem[_9229 + 16 len 16] < mem[_9229 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9229 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10482 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8914) <= mem[_10482]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8914)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10482]
                                        else:
                                            _10182 = mem[_9229 + 32]
                                            if not uint128(_8914):
                                                _10423 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10423] = 26
                                                mem[_10423 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10039):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _11744 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10039) <= mem[_11744]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10039)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_11744]
                                            else:
                                                if mem[_9229 + 48 len 16] * uint128(_8914) / uint128(_8914) != mem[_9229 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10542 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10542] = 26
                                                mem[_10542 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10039):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12046 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10182) * uint128(_8914) / uint128(_10039) <= mem[_12046]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10182) * uint128(_8914) / uint128(_10039)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12046]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_9959)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _9959 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10087 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10147 = mem[_10087]
                                        _10223 = mem[_9229]
                                        if mem[_10087] + mem[_9229 + 16 len 16] < mem[_9229 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10087] + mem[_9229 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10977 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8914) <= mem[_10977]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8914)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10977]
                                        else:
                                            _10481 = mem[_9229 + 32]
                                            if not uint128(_8914):
                                                _10876 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10876] = 26
                                                mem[_10876 + 32] = 'SafeMath: division by zero'
                                                if not _10147 + uint128(_10223):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12798 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10147 + uint128(_10223) <= mem[_12798]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10147 + uint128(_10223)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12798]
                                            else:
                                                if mem[_9229 + 48 len 16] * uint128(_8914) / uint128(_8914) != mem[_9229 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11073 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11073] = 26
                                                mem[_11073 + 32] = 'SafeMath: division by zero'
                                                if not _10147 + uint128(_10223):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13198 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10481) * uint128(_8914) / _10147 + uint128(_10223) <= mem[_13198]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10481) * uint128(_8914) / _10147 + uint128(_10223)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13198]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                    else:
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = _8486
                        mem[mem[64] + 68] = 1
                        require ext_code.size(bentoBoxAddress)
                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(this.address), _8486, 1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8553 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8568 = mem[_8553]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                                gas gas_remaining wei
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8619 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        require mem[_8619] == mem[_8619 + 24 len 8]
                        require mem[_8619 + 32] == mem[_8619 + 56 len 8]
                        require mem[_8619 + 64] == mem[_8619 + 80 len 16]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        if block.timestamp <= mem[_8619 + 56 len 8]:
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8792 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8836 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8792] == mem[_8792 + 16 len 16]
                            mem[_8836] = mem[_8792]
                            require mem[_8792 + 32] == mem[_8792 + 48 len 16]
                            mem[_8836 + 32] = mem[_8792 + 32]
                            _8971 = mem[_8836]
                            if _8568 <= mem[_8836 + 16 len 16]:
                                if _8568:
                                    _9100 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9100] = 0
                                    mem[_9100 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9222 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9356 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9222] == mem[_9222 + 16 len 16]
                                    mem[_9356] = mem[_9222]
                                    require mem[_9222 + 32] == mem[_9222 + 48 len 16]
                                    mem[_9356 + 32] = mem[_9222 + 32]
                                    _9680 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9680] = 0
                                    mem[_9680 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9763 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9827 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9763] == mem[_9763 + 16 len 16]
                                    mem[_9827] = mem[_9763]
                                    require mem[_9763 + 32] == mem[_9763 + 48 len 16]
                                    mem[_9827 + 32] = mem[_9763 + 32]
                                    _10012 = mem[_9827]
                                    if not mem[_9827 + 16 len 16]:
                                        _10111 = mem[_9356]
                                        if mem[_9356 + 16 len 16] < mem[_9356 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9356 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10678 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8568 <= mem[_10678]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8568
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10678]
                                        else:
                                            _10305 = mem[_9356 + 32]
                                            if not _8568:
                                                _10601 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10601] = 26
                                                mem[_10601 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10111):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12200 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10111) <= mem[_12200]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10111)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12200]
                                            else:
                                                if mem[_9356 + 48 len 16] * _8568 / _8568 != mem[_9356 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10768 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10768] = 26
                                                mem[_10768 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10111):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12573 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10305) * _8568 / uint128(_10111) <= mem[_12573]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10305) * _8568 / uint128(_10111)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12573]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10012)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10012 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10177 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10255 = mem[_10177]
                                        _10357 = mem[_9356]
                                        if mem[_10177] + mem[_9356 + 16 len 16] < mem[_9356 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10177] + mem[_9356 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11280 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8568 <= mem[_11280]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8568
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11280]
                                        else:
                                            _10677 = mem[_9356 + 32]
                                            if not _8568:
                                                _11161 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11161] = 26
                                                mem[_11161 + 32] = 'SafeMath: division by zero'
                                                if not _10255 + uint128(_10357):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13385 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10255 + uint128(_10357) <= mem[_13385]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10255 + uint128(_10357)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13385]
                                            else:
                                                if mem[_9356 + 48 len 16] * _8568 / _8568 != mem[_9356 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11416 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11416] = 26
                                                mem[_11416 + 32] = 'SafeMath: division by zero'
                                                if not _10255 + uint128(_10357):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13806 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10677) * _8568 / _10255 + uint128(_10357) <= mem[_13806]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10677) * _8568 / _10255 + uint128(_10357)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13806]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                            else:
                                if mem[_8836 + 16 len 16]:
                                    _9133 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9133] = 0
                                    mem[_9133 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9283 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9394 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9283] == mem[_9283 + 16 len 16]
                                    mem[_9394] = mem[_9283]
                                    require mem[_9283 + 32] == mem[_9283 + 48 len 16]
                                    mem[_9394 + 32] = mem[_9283 + 32]
                                    _9707 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9707] = 0
                                    mem[_9707 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9795 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9851 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9795] == mem[_9795 + 16 len 16]
                                    mem[_9851] = mem[_9795]
                                    require mem[_9795 + 32] == mem[_9795 + 48 len 16]
                                    mem[_9851 + 32] = mem[_9795 + 32]
                                    _10035 = mem[_9851]
                                    if not mem[_9851 + 16 len 16]:
                                        _10144 = mem[_9394]
                                        if mem[_9394 + 16 len 16] < mem[_9394 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9394 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10771 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8971) <= mem[_10771]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8971)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10771]
                                        else:
                                            _10358 = mem[_9394 + 32]
                                            if not uint128(_8971):
                                                _10681 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10681] = 26
                                                mem[_10681 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10144):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12382 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10144) <= mem[_12382]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10144)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12382]
                                            else:
                                                if mem[_9394 + 48 len 16] * uint128(_8971) / uint128(_8971) != mem[_9394 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10866 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10866] = 26
                                                mem[_10866 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10144):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12781 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10358) * uint128(_8971) / uint128(_10144) <= mem[_12781]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10358) * uint128(_8971) / uint128(_10144)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12781]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10035)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10035 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10218 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10306 = mem[_10218]
                                        _10416 = mem[_9394]
                                        if mem[_10218] + mem[_9394 + 16 len 16] < mem[_9394 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10218] + mem[_9394 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11419 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8971) <= mem[_11419]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8971)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11419]
                                        else:
                                            _10770 = mem[_9394 + 32]
                                            if not uint128(_8971):
                                                _11284 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11284] = 26
                                                mem[_11284 + 32] = 'SafeMath: division by zero'
                                                if not _10306 + uint128(_10416):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13597 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10306 + uint128(_10416) <= mem[_13597]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10306 + uint128(_10416)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13597]
                                            else:
                                                if mem[_9394 + 48 len 16] * uint128(_8971) / uint128(_8971) != mem[_9394 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11564 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11564] = 26
                                                mem[_11564 + 32] = 'SafeMath: division by zero'
                                                if not _10306 + uint128(_10416):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14014 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10770) * uint128(_8971) / _10306 + uint128(_10416) <= mem[_14014]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10770) * uint128(_8971) / _10306 + uint128(_10416)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14014]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                        else:
                            call kashiPairs[arg2].field_0.accrue() with:
                                 gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8820 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8862 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8820] == mem[_8820 + 16 len 16]
                            mem[_8862] = mem[_8820]
                            require mem[_8820 + 32] == mem[_8820 + 48 len 16]
                            mem[_8862 + 32] = mem[_8820 + 32]
                            _9021 = mem[_8862]
                            if _8568 <= mem[_8862 + 16 len 16]:
                                if _8568:
                                    _9175 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9175] = 0
                                    mem[_9175 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9323 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9428 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9323] == mem[_9323 + 16 len 16]
                                    mem[_9428] = mem[_9323]
                                    require mem[_9323 + 32] == mem[_9323 + 48 len 16]
                                    mem[_9428 + 32] = mem[_9323 + 32]
                                    _9739 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9739] = 0
                                    mem[_9739 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9812 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9870 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9812] == mem[_9812 + 16 len 16]
                                    mem[_9870] = mem[_9812]
                                    require mem[_9812 + 32] == mem[_9812 + 48 len 16]
                                    mem[_9870 + 32] = mem[_9812 + 32]
                                    _10055 = mem[_9870]
                                    if not mem[_9870 + 16 len 16]:
                                        _10180 = mem[_9428]
                                        if mem[_9428 + 16 len 16] < mem[_9428 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9428 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10869 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8568 <= mem[_10869]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8568
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10869]
                                        else:
                                            _10417 = mem[_9428 + 32]
                                            if not _8568:
                                                _10774 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10774] = 26
                                                mem[_10774 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10180):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12582 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10180) <= mem[_12582]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10180)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12582]
                                            else:
                                                if mem[_9428 + 48 len 16] * _8568 / _8568 != mem[_9428 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10968 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10968] = 26
                                                mem[_10968 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10180):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12973 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10417) * _8568 / uint128(_10180) <= mem[_12973]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10417) * _8568 / uint128(_10180)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12973]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10055)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10055 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10257 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10359 = mem[_10257]
                                        _10477 = mem[_9428]
                                        if mem[_10257] + mem[_9428 + 16 len 16] < mem[_9428 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10257] + mem[_9428 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11567 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8568 <= mem[_11567]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8568
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11567]
                                        else:
                                            _10868 = mem[_9428 + 32]
                                            if not _8568:
                                                _11423 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11423] = 26
                                                mem[_11423 + 32] = 'SafeMath: division by zero'
                                                if not _10359 + uint128(_10477):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13816 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10359 + uint128(_10477) <= mem[_13816]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10359 + uint128(_10477)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13816]
                                            else:
                                                if mem[_9428 + 48 len 16] * _8568 / _8568 != mem[_9428 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11727 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11727] = 26
                                                mem[_11727 + 32] = 'SafeMath: division by zero'
                                                if not _10359 + uint128(_10477):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14221 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10868) * _8568 / _10359 + uint128(_10477) <= mem[_14221]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10868) * _8568 / _10359 + uint128(_10477)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14221]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                            else:
                                if mem[_8862 + 16 len 16]:
                                    _9228 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9228] = 0
                                    mem[_9228 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9357 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9476 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9357] == mem[_9357 + 16 len 16]
                                    mem[_9476] = mem[_9357]
                                    require mem[_9357 + 32] == mem[_9357 + 48 len 16]
                                    mem[_9476 + 32] = mem[_9357 + 32]
                                    _9766 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9766] = 0
                                    mem[_9766 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9828 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9897 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9828] == mem[_9828 + 16 len 16]
                                    mem[_9897] = mem[_9828]
                                    require mem[_9828 + 32] == mem[_9828 + 48 len 16]
                                    mem[_9897 + 32] = mem[_9828 + 32]
                                    _10084 = mem[_9897]
                                    if not mem[_9897 + 16 len 16]:
                                        _10221 = mem[_9476]
                                        if mem[_9476 + 16 len 16] < mem[_9476 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9476 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10971 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9021) <= mem[_10971]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9021)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10971]
                                        else:
                                            _10478 = mem[_9476 + 32]
                                            if not uint128(_9021):
                                                _10872 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10872] = 26
                                                mem[_10872 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10221):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12790 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10221) <= mem[_12790]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10221)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12790]
                                            else:
                                                if mem[_9476 + 48 len 16] * uint128(_9021) / uint128(_9021) != mem[_9476 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11068 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11068] = 26
                                                mem[_11068 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10221):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13190 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10478) * uint128(_9021) / uint128(_10221) <= mem[_13190]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10478) * uint128(_9021) / uint128(_10221)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13190]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10084)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10084 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10308 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10418 = mem[_10308]
                                        _10539 = mem[_9476]
                                        if mem[_10308] + mem[_9476 + 16 len 16] < mem[_9476 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10308] + mem[_9476 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11730 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9021) <= mem[_11730]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9021)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11730]
                                        else:
                                            _10970 = mem[_9476 + 32]
                                            if not uint128(_9021):
                                                _11571 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11571] = 26
                                                mem[_11571 + 32] = 'SafeMath: division by zero'
                                                if not _10418 + uint128(_10539):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14024 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10418 + uint128(_10539) <= mem[_14024]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10418 + uint128(_10539)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14024]
                                            else:
                                                if mem[_9476 + 48 len 16] * uint128(_9021) / uint128(_9021) != mem[_9476 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11877 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11877] = 26
                                                mem[_11877 + 32] = 'SafeMath: division by zero'
                                                if not _10418 + uint128(_10539):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14445 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10970) * uint128(_9021) / _10418 + uint128(_10539) <= mem[_14445]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10970) * uint128(_9021) / _10418 + uint128(_10539)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14445]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                else:
                    mem[mem[64] + 36] = s
                    mem[mem[64] + 68] = 1
                    require ext_code.size(bentoBoxAddress)
                    staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(this.address), s, 1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8457 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8469 = mem[_8457]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8499 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8509 = mem[_8499]
                    if _8469 + mem[_8499] < mem[_8499]:
                        revert with 0, 'SafeMath: addition overflow'
                    if not _8469 + mem[_8499]:
                        require ext_code.size(kashiPairs[arg2].field_0)
                        staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                                gas gas_remaining wei
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8618 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        require mem[_8618] == mem[_8618 + 24 len 8]
                        require mem[_8618 + 32] == mem[_8618 + 56 len 8]
                        require mem[_8618 + 64] == mem[_8618 + 80 len 16]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        if block.timestamp <= mem[_8618 + 56 len 8]:
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8789 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8835 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8789] == mem[_8789 + 16 len 16]
                            mem[_8835] = mem[_8789]
                            require mem[_8789 + 32] == mem[_8789 + 48 len 16]
                            mem[_8835 + 32] = mem[_8789 + 32]
                            _8970 = mem[_8835]
                            if 0 > mem[_8835 + 16 len 16]:
                                if mem[_8835 + 16 len 16]:
                                    _9129 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9129] = 0
                                    mem[_9129 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9277 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9393 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9277] == mem[_9277 + 16 len 16]
                                    mem[_9393] = mem[_9277]
                                    require mem[_9277 + 32] == mem[_9277 + 48 len 16]
                                    mem[_9393 + 32] = mem[_9277 + 32]
                                    _9704 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9704] = 0
                                    mem[_9704 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9792 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9850 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9792] == mem[_9792 + 16 len 16]
                                    mem[_9850] = mem[_9792]
                                    require mem[_9792 + 32] == mem[_9792 + 48 len 16]
                                    mem[_9850 + 32] = mem[_9792 + 32]
                                    _10034 = mem[_9850]
                                    if not mem[_9850 + 16 len 16]:
                                        _10141 = mem[_9393]
                                        if mem[_9393 + 16 len 16] < mem[_9393 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9393 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10764 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8970) <= mem[_10764]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8970)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10764]
                                        else:
                                            _10356 = mem[_9393 + 32]
                                            if not uint128(_8970):
                                                _10675 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10675] = 26
                                                mem[_10675 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10141):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12371 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10141) <= mem[_12371]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10141)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12371]
                                            else:
                                                if mem[_9393 + 48 len 16] * uint128(_8970) / uint128(_8970) != mem[_9393 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10860 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10860] = 26
                                                mem[_10860 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10141):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12767 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10356) * uint128(_8970) / uint128(_10141) <= mem[_12767]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10356) * uint128(_8970) / uint128(_10141)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12767]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10034)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10034 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10214 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10301 = mem[_10214]
                                        _10412 = mem[_9393]
                                        if mem[_10214] + mem[_9393 + 16 len 16] < mem[_9393 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10214] + mem[_9393 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11410 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8970) <= mem[_11410]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8970)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11410]
                                        else:
                                            _10763 = mem[_9393 + 32]
                                            if not uint128(_8970):
                                                _11275 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11275] = 26
                                                mem[_11275 + 32] = 'SafeMath: division by zero'
                                                if not _10301 + uint128(_10412):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13583 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10301 + uint128(_10412) <= mem[_13583]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10301 + uint128(_10412)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13583]
                                            else:
                                                if mem[_9393 + 48 len 16] * uint128(_8970) / uint128(_8970) != mem[_9393 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11554 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11554] = 26
                                                mem[_11554 + 32] = 'SafeMath: division by zero'
                                                if not _10301 + uint128(_10412):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14001 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10763) * uint128(_8970) / _10301 + uint128(_10412) <= mem[_14001]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10763) * uint128(_8970) / _10301 + uint128(_10412)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14001]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                        else:
                            call kashiPairs[arg2].field_0.accrue() with:
                                 gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8819 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8861 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8819] == mem[_8819 + 16 len 16]
                            mem[_8861] = mem[_8819]
                            require mem[_8819 + 32] == mem[_8819 + 48 len 16]
                            mem[_8861 + 32] = mem[_8819 + 32]
                            _9020 = mem[_8861]
                            if 0 > mem[_8861 + 16 len 16]:
                                if mem[_8861 + 16 len 16]:
                                    _9221 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9221] = 0
                                    mem[_9221 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9354 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9474 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9354] == mem[_9354 + 16 len 16]
                                    mem[_9474] = mem[_9354]
                                    require mem[_9354 + 32] == mem[_9354 + 48 len 16]
                                    mem[_9474 + 32] = mem[_9354 + 32]
                                    _9762 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9762] = 0
                                    mem[_9762 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9826 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9895 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9826] == mem[_9826 + 16 len 16]
                                    mem[_9895] = mem[_9826]
                                    require mem[_9826 + 32] == mem[_9826 + 48 len 16]
                                    mem[_9895 + 32] = mem[_9826 + 32]
                                    _10082 = mem[_9895]
                                    if not mem[_9895 + 16 len 16]:
                                        _10217 = mem[_9474]
                                        if mem[_9474 + 16 len 16] < mem[_9474 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9474 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10962 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9020) <= mem[_10962]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9020)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10962]
                                        else:
                                            _10474 = mem[_9474 + 32]
                                            if not uint128(_9020):
                                                _10863 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10863] = 26
                                                mem[_10863 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10217):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12773 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10217) <= mem[_12773]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10217)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12773]
                                            else:
                                                if mem[_9474 + 48 len 16] * uint128(_9020) / uint128(_9020) != mem[_9474 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11060 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11060] = 26
                                                mem[_11060 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10217):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13170 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10474) * uint128(_9020) / uint128(_10217) <= mem[_13170]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10474) * uint128(_9020) / uint128(_10217)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13170]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10082)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10082 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10303 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10413 = mem[_10303]
                                        _10534 = mem[_9474]
                                        if mem[_10303] + mem[_9474 + 16 len 16] < mem[_9474 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10303] + mem[_9474 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11716 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9020) <= mem[_11716]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9020)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11716]
                                        else:
                                            _10961 = mem[_9474 + 32]
                                            if not uint128(_9020):
                                                _11557 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11557] = 26
                                                mem[_11557 + 32] = 'SafeMath: division by zero'
                                                if not _10413 + uint128(_10534):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14007 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10413 + uint128(_10534) <= mem[_14007]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10413 + uint128(_10534)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14007]
                                            else:
                                                if mem[_9474 + 48 len 16] * uint128(_9020) / uint128(_9020) != mem[_9474 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11864 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11864] = 26
                                                mem[_11864 + 32] = 'SafeMath: division by zero'
                                                if not _10413 + uint128(_10534):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14427 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10961) * uint128(_9020) / _10413 + uint128(_10534) <= mem[_14427]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10961) * uint128(_9020) / _10413 + uint128(_10534)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14427]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                    else:
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = _8469 + _8509
                        mem[mem[64] + 68] = 1
                        require ext_code.size(bentoBoxAddress)
                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(this.address), _8469 + _8509, 1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8597 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8617 = mem[_8597]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                                gas gas_remaining wei
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8677 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        require mem[_8677] == mem[_8677 + 24 len 8]
                        require mem[_8677 + 32] == mem[_8677 + 56 len 8]
                        require mem[_8677 + 64] == mem[_8677 + 80 len 16]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        if block.timestamp <= mem[_8677 + 56 len 8]:
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8883 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8931 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8883] == mem[_8883 + 16 len 16]
                            mem[_8931] = mem[_8883]
                            require mem[_8883 + 32] == mem[_8883 + 48 len 16]
                            mem[_8931 + 32] = mem[_8883 + 32]
                            _9127 = mem[_8931]
                            if _8617 <= mem[_8931 + 16 len 16]:
                                if _8617:
                                    _9353 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9353] = 0
                                    mem[_9353 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9467 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9583 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9467] == mem[_9467 + 16 len 16]
                                    mem[_9583] = mem[_9467]
                                    require mem[_9467 + 32] == mem[_9467 + 48 len 16]
                                    mem[_9583 + 32] = mem[_9467 + 32]
                                    _9825 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9825] = 0
                                    mem[_9825 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9891 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9953 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9891] == mem[_9891 + 16 len 16]
                                    mem[_9953] = mem[_9891]
                                    require mem[_9891 + 32] == mem[_9891 + 48 len 16]
                                    mem[_9953 + 32] = mem[_9891 + 32]
                                    _10175 = mem[_9953]
                                    if not mem[_9953 + 16 len 16]:
                                        _10354 = mem[_9583]
                                        if mem[_9583 + 16 len 16] < mem[_9583 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9583 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11268 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8617 <= mem[_11268]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8617
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11268]
                                        else:
                                            _10669 = mem[_9583 + 32]
                                            if not _8617:
                                                _11152 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11152] = 26
                                                mem[_11152 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10354):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13363 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10354) <= mem[_13363]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10354)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13363]
                                            else:
                                                if mem[_9583 + 48 len 16] * _8617 / _8617 != mem[_9583 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11401 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11401] = 26
                                                mem[_11401 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10354):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13781 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10669) * _8617 / uint128(_10354) <= mem[_13781]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10669) * _8617 / uint128(_10354)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13781]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10175)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10175 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10469 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10593 = mem[_10469]
                                        _10759 = mem[_9583]
                                        if mem[_10469] + mem[_9583 + 16 len 16] < mem[_9583 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10469] + mem[_9583 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12177 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8617 <= mem[_12177]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8617
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12177]
                                        else:
                                            _11267 = mem[_9583 + 32]
                                            if not _8617:
                                                _12005 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12005] = 26
                                                mem[_12005 + 32] = 'SafeMath: division by zero'
                                                if not _10593 + uint128(_10759):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14619 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10593 + uint128(_10759) <= mem[_14619]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10593 + uint128(_10759)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14619]
                                            else:
                                                if mem[_9583 + 48 len 16] * _8617 / _8617 != mem[_9583 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _12355 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12355] = 26
                                                mem[_12355 + 32] = 'SafeMath: division by zero'
                                                if not _10593 + uint128(_10759):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15016 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_11267) * _8617 / _10593 + uint128(_10759) <= mem[_15016]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_11267) * _8617 / _10593 + uint128(_10759)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_15016]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                            else:
                                if mem[_8931 + 16 len 16]:
                                    _9392 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9392] = 0
                                    mem[_9392 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9515 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9611 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9515] == mem[_9515 + 16 len 16]
                                    mem[_9611] = mem[_9515]
                                    require mem[_9515 + 32] == mem[_9515 + 48 len 16]
                                    mem[_9611 + 32] = mem[_9515 + 32]
                                    _9849 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9849] = 0
                                    mem[_9849 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9919 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9973 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9919] == mem[_9919 + 16 len 16]
                                    mem[_9973] = mem[_9919]
                                    require mem[_9919 + 32] == mem[_9919 + 48 len 16]
                                    mem[_9973 + 32] = mem[_9919 + 32]
                                    _10213 = mem[_9973]
                                    if not mem[_9973 + 16 len 16]:
                                        _10410 = mem[_9611]
                                        if mem[_9611 + 16 len 16] < mem[_9611 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9611 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11404 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9127) <= mem[_11404]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9127)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11404]
                                        else:
                                            _10760 = mem[_9611 + 32]
                                            if not uint128(_9127):
                                                _11271 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11271] = 26
                                                mem[_11271 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10410):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13572 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10410) <= mem[_13572]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10410)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13572]
                                            else:
                                                if mem[_9611 + 48 len 16] * uint128(_9127) / uint128(_9127) != mem[_9611 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11547 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11547] = 26
                                                mem[_11547 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10410):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13990 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10760) * uint128(_9127) / uint128(_10410) <= mem[_13990]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10760) * uint128(_9127) / uint128(_10410)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13990]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10213)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10213 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10529 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10670 = mem[_10529]
                                        _10856 = mem[_9611]
                                        if mem[_10529] + mem[_9611 + 16 len 16] < mem[_9611 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10529] + mem[_9611 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12358 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9127) <= mem[_12358]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9127)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12358]
                                        else:
                                            _11403 = mem[_9611 + 32]
                                            if not uint128(_9127):
                                                _12181 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12181] = 26
                                                mem[_12181 + 32] = 'SafeMath: division by zero'
                                                if not _10670 + uint128(_10856):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14827 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10670 + uint128(_10856) <= mem[_14827]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10670 + uint128(_10856)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14827]
                                            else:
                                                if mem[_9611 + 48 len 16] * uint128(_9127) / uint128(_9127) != mem[_9611 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _12551 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12551] = 26
                                                mem[_12551 + 32] = 'SafeMath: division by zero'
                                                if not _10670 + uint128(_10856):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15200 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_11403) * uint128(_9127) / _10670 + uint128(_10856) <= mem[_15200]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_11403) * uint128(_9127) / _10670 + uint128(_10856)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_15200]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                        else:
                            call kashiPairs[arg2].field_0.accrue() with:
                                 gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8911 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8951 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8911] == mem[_8911 + 16 len 16]
                            mem[_8951] = mem[_8911]
                            require mem[_8911 + 32] == mem[_8911 + 48 len 16]
                            mem[_8951 + 32] = mem[_8911 + 32]
                            _9217 = mem[_8951]
                            if _8617 <= mem[_8951 + 16 len 16]:
                                if _8617:
                                    _9427 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9427] = 0
                                    mem[_9427 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9549 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9633 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9549] == mem[_9549 + 16 len 16]
                                    mem[_9633] = mem[_9549]
                                    require mem[_9549 + 32] == mem[_9549 + 48 len 16]
                                    mem[_9633 + 32] = mem[_9549 + 32]
                                    _9869 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9869] = 0
                                    mem[_9869 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9935 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9989 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9935] == mem[_9935 + 16 len 16]
                                    mem[_9989] = mem[_9935]
                                    require mem[_9935 + 32] == mem[_9935 + 48 len 16]
                                    mem[_9989 + 32] = mem[_9935 + 32]
                                    _10254 = mem[_9989]
                                    if not mem[_9989 + 16 len 16]:
                                        _10472 = mem[_9633]
                                        if mem[_9633 + 16 len 16] < mem[_9633 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9633 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11550 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8617 <= mem[_11550]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8617
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11550]
                                        else:
                                            _10857 = mem[_9633 + 32]
                                            if not _8617:
                                                _11407 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11407] = 26
                                                mem[_11407 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10472):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13790 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10472) <= mem[_13790]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10472)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13790]
                                            else:
                                                if mem[_9633 + 48 len 16] * _8617 / _8617 != mem[_9633 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11707 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11707] = 26
                                                mem[_11707 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10472):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14198 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10857) * _8617 / uint128(_10472) <= mem[_14198]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10857) * _8617 / uint128(_10472)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14198]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10254)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10254 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10595 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10761 = mem[_10595]
                                        _10957 = mem[_9633]
                                        if mem[_10595] + mem[_9633 + 16 len 16] < mem[_9633 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10595] + mem[_9633 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12554 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8617 <= mem[_12554]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8617
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12554]
                                        else:
                                            _11549 = mem[_9633 + 32]
                                            if not _8617:
                                                _12362 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12362] = 26
                                                mem[_12362 + 32] = 'SafeMath: division by zero'
                                                if not _10761 + uint128(_10957):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15026 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10761 + uint128(_10957) <= mem[_15026]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10761 + uint128(_10957)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_15026]
                                            else:
                                                if mem[_9633 + 48 len 16] * _8617 / _8617 != mem[_9633 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _12756 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12756] = 26
                                                mem[_12756 + 32] = 'SafeMath: division by zero'
                                                if not _10761 + uint128(_10957):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15383 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_11549) * _8617 / _10761 + uint128(_10957) <= mem[_15383]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_11549) * _8617 / _10761 + uint128(_10957)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_15383]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                            else:
                                if mem[_8951 + 16 len 16]:
                                    _9473 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9473] = 0
                                    mem[_9473 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9584 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9660 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9584] == mem[_9584 + 16 len 16]
                                    mem[_9660] = mem[_9584]
                                    require mem[_9584 + 32] == mem[_9584 + 48 len 16]
                                    mem[_9660 + 32] = mem[_9584 + 32]
                                    _9894 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9894] = 0
                                    mem[_9894 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9954 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _10010 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9954] == mem[_9954 + 16 len 16]
                                    mem[_10010] = mem[_9954]
                                    require mem[_9954 + 32] == mem[_9954 + 48 len 16]
                                    mem[_10010 + 32] = mem[_9954 + 32]
                                    _10300 = mem[_10010]
                                    if not mem[_10010 + 16 len 16]:
                                        _10532 = mem[_9660]
                                        if mem[_9660 + 16 len 16] < mem[_9660 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9660 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11710 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9217) <= mem[_11710]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9217)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11710]
                                        else:
                                            _10958 = mem[_9660 + 32]
                                            if not uint128(_9217):
                                                _11553 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11553] = 26
                                                mem[_11553 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10532):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13999 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10532) <= mem[_13999]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10532)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13999]
                                            else:
                                                if mem[_9660 + 48 len 16] * uint128(_9217) / uint128(_9217) != mem[_9660 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11859 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11859] = 26
                                                mem[_11859 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10532):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14419 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10958) * uint128(_9217) / uint128(_10532) <= mem[_14419]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10958) * uint128(_9217) / uint128(_10532)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14419]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10300)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10300 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10672 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10858 = mem[_10672]
                                        _11057 = mem[_9660]
                                        if mem[_10672] + mem[_9660 + 16 len 16] < mem[_9660 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10672] + mem[_9660 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12759 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9217) <= mem[_12759]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9217)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12759]
                                        else:
                                            _11709 = mem[_9660 + 32]
                                            if not uint128(_9217):
                                                _12558 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12558] = 26
                                                mem[_12558 + 32] = 'SafeMath: division by zero'
                                                if not _10858 + uint128(_11057):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15210 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10858 + uint128(_11057) <= mem[_15210]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10858 + uint128(_11057)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_15210]
                                            else:
                                                if mem[_9660 + 48 len 16] * uint128(_9217) / uint128(_9217) != mem[_9660 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _12951 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12951] = 26
                                                mem[_12951 + 32] = 'SafeMath: division by zero'
                                                if not _10858 + uint128(_11057):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15577 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_11709) * uint128(_9217) / _10858 + uint128(_11057) <= mem[_15577]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_11709) * uint128(_9217) / _10858 + uint128(_11057)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_15577]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
            else:
                require ext_code.size(vaultAddress)
                staticcall vaultAddress.management() with:
                        gas gas_remaining wei
                mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != msg.sender:
                    revert with 0, '!authorized'
                mem[(4 * ceil32(return_data.size)) + 96] = 0
                mem[(4 * ceil32(return_data.size)) + 128] = 0
                require arg2 < kashiPairs.length
                mem[0] = 12
                mem[(4 * ceil32(return_data.size)) + 160] = kashiPairs[arg2].field_0
                mem[(4 * ceil32(return_data.size)) + 192] = kashiPairs[arg2].field_256
                require arg1 == kashiPairs[arg2].field_0
                mem[(4 * ceil32(return_data.size)) + 228] = wantAddress
                mem[(4 * ceil32(return_data.size)) + 260] = this.address
                require ext_code.size(bentoBoxAddress)
                staticcall bentoBoxAddress.balanceOf(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wantAddress, this.address
                mem[(4 * ceil32(return_data.size)) + 224] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (6 * ceil32(return_data.size)) + 224
                require return_data.size >= 32
                idx = 0
                s = mem[(4 * ceil32(return_data.size)) + 224]
                while idx < kashiPairs.length:
                    _8430 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_8430] = 0
                    mem[_8430 + 32] = 0
                    mem[0] = 12
                    _8442 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_8442] = kashiPairs[idx].field_0
                    mem[_8442 + 32] = kashiPairs[idx].field_256
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8478 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8490 = mem[_8478]
                    _8514 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_8514] = 0
                    mem[_8514 + 32] = 0
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.totalAsset() with:
                            gas gas_remaining wei
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8530 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8546 = mem[64]
                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                    mem[64] = mem[64] + 64
                    require mem[_8530] == mem[_8530 + 16 len 16]
                    mem[_8546] = mem[_8530]
                    require mem[_8530 + 32] == mem[_8530 + 48 len 16]
                    mem[_8546 + 32] = mem[_8530 + 32]
                    _8626 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_8626] = 0
                    mem[_8626 + 32] = 0
                    require ext_code.size(kashiPairs[idx].field_0)
                    staticcall kashiPairs[idx].field_0.totalBorrow() with:
                            gas gas_remaining wei
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8658 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8690 = mem[64]
                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                    mem[64] = mem[64] + 64
                    require mem[_8658] == mem[_8658 + 16 len 16]
                    mem[_8690] = mem[_8658]
                    require mem[_8658 + 32] == mem[_8658 + 48 len 16]
                    mem[_8690 + 32] = mem[_8658 + 32]
                    _8806 = mem[_8690]
                    if not mem[_8690 + 16 len 16]:
                        _8870 = mem[_8546]
                        if mem[_8546 + 16 len 16] < mem[_8546 + 16 len 16]:
                            revert with 0, 'SafeMath: addition overflow'
                        _8941 = mem[_8546 + 32]
                        if not _8490:
                            _9034 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_9034] = 26
                            mem[_9034 + 32] = 'SafeMath: division by zero'
                            if uint128(_8941):
                                if (0 / uint128(_8941)) + s < s:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                s = (0 / uint128(_8941)) + s
                                continue 
                            _9090 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _9090 + 68] = mem[idx + _9034 + 32]
                                idx = idx + 32
                                continue 
                            mem[_9090 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _9090 + -mem[64] + 100
                        if mem[_8546 + 16 len 16] * _8490 / _8490 != mem[_8546 + 16 len 16]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        _9089 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_9089] = 26
                        mem[_9089 + 32] = 'SafeMath: division by zero'
                        if uint128(_8941):
                            if (uint128(_8870) * _8490 / uint128(_8941)) + s < s:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            s = (uint128(_8870) * _8490 / uint128(_8941)) + s
                            continue 
                        _9145 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _9145 + 68] = mem[idx + _9089 + 32]
                            idx = idx + 32
                            continue 
                        mem[_9145 + 94] = 0
                        revert with memory
                          from mem[64]
                           len _9145 + -mem[64] + 100
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = uint128(_8806)
                    mem[mem[64] + 68] = 1
                    require ext_code.size(bentoBoxAddress)
                    staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(this.address), _8806 << 128, 1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8901 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8940 = mem[_8901]
                    _8958 = mem[_8546]
                    if mem[_8901] + mem[_8546 + 16 len 16] < mem[_8546 + 16 len 16]:
                        revert with 0, 'SafeMath: addition overflow'
                    _9072 = mem[_8546 + 32]
                    if not _8490:
                        _9245 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_9245] = 26
                        mem[_9245 + 32] = 'SafeMath: division by zero'
                        if uint128(_9072):
                            if (0 / uint128(_9072)) + s < s:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            s = (0 / uint128(_9072)) + s
                            continue 
                        _9334 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _9334 + 68] = mem[idx + _9245 + 32]
                            idx = idx + 32
                            continue 
                        mem[_9334 + 94] = 0
                        revert with memory
                          from mem[64]
                           len _9334 + -mem[64] + 100
                    if (mem[_8901] * _8490) + (mem[_8546 + 16 len 16] * _8490) / _8490 != mem[_8901] + mem[_8546 + 16 len 16]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    _9333 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_9333] = 26
                    mem[_9333 + 32] = 'SafeMath: division by zero'
                    if uint128(_9072):
                        if ((_8940 * _8490) + (uint128(_8958) * _8490) / uint128(_9072)) + s < s:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        s = ((_8940 * _8490) + (uint128(_8958) * _8490) / uint128(_9072)) + s
                        continue 
                    _9405 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _9405 + 68] = mem[idx + _9333 + 32]
                        idx = idx + 32
                        continue 
                    mem[_9405 + 94] = 0
                    revert with memory
                      from mem[64]
                       len _9405 + -mem[64] + 100
                mem[mem[64] + 4] = this.address
                if not s:
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8477 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8489 = mem[_8477]
                    if mem[_8477] < mem[_8477]:
                        revert with 0, 'SafeMath: addition overflow'
                    if not mem[_8477]:
                        require ext_code.size(kashiPairs[arg2].field_0)
                        staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                                gas gas_remaining wei
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8573 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        require mem[_8573] == mem[_8573 + 24 len 8]
                        require mem[_8573 + 32] == mem[_8573 + 56 len 8]
                        require mem[_8573 + 64] == mem[_8573 + 80 len 16]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        if block.timestamp <= mem[_8573 + 56 len 8]:
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8712 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8746 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8712] == mem[_8712 + 16 len 16]
                            mem[_8746] = mem[_8712]
                            require mem[_8712 + 32] == mem[_8712 + 48 len 16]
                            mem[_8746 + 32] = mem[_8712 + 32]
                            _8894 = mem[_8746]
                            if 0 > mem[_8746 + 16 len 16]:
                                if mem[_8746 + 16 len 16]:
                                    _8978 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8978] = 0
                                    mem[_8978 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9066 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9144 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9066] == mem[_9066 + 16 len 16]
                                    mem[_9144] = mem[_9066]
                                    require mem[_9066 + 32] == mem[_9066 + 48 len 16]
                                    mem[_9144 + 32] = mem[_9066 + 32]
                                    _9560 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9560] = 0
                                    mem[_9560 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9642 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9716 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9642] == mem[_9642 + 16 len 16]
                                    mem[_9716] = mem[_9642]
                                    require mem[_9642 + 32] == mem[_9642 + 48 len 16]
                                    mem[_9716 + 32] = mem[_9642 + 32]
                                    _9930 = mem[_9716]
                                    if not mem[_9716 + 16 len 16]:
                                        _9997 = mem[_9144]
                                        if mem[_9144 + 16 len 16] < mem[_9144 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9144 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10375 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8894) <= mem[_10375]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8894)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10375]
                                        else:
                                            _10118 = mem[_9144 + 32]
                                            if not uint128(_8894):
                                                _10325 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10325] = 26
                                                mem[_10325 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_9997):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _11467 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_9997) <= mem[_11467]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_9997)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_11467]
                                            else:
                                                if mem[_9144 + 48 len 16] * uint128(_8894) / uint128(_8894) != mem[_9144 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10435 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10435] = 26
                                                mem[_10435 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_9997):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _11780 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10118) * uint128(_8894) / uint128(_9997) <= mem[_11780]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10118) * uint128(_8894) / uint128(_9997)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_11780]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_9930)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _9930 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10043 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10095 = mem[_10043]
                                        _10156 = mem[_9144]
                                        if mem[_10043] + mem[_9144 + 16 len 16] < mem[_9144 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10043] + mem[_9144 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10801 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8894) <= mem[_10801]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8894)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10801]
                                        else:
                                            _10374 = mem[_9144 + 32]
                                            if not uint128(_8894):
                                                _10706 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10706] = 26
                                                mem[_10706 + 32] = 'SafeMath: division by zero'
                                                if not _10095 + uint128(_10156):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12439 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10095 + uint128(_10156) <= mem[_12439]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10095 + uint128(_10156)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12439]
                                            else:
                                                if mem[_9144 + 48 len 16] * uint128(_8894) / uint128(_8894) != mem[_9144 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10897 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10897] = 26
                                                mem[_10897 + 32] = 'SafeMath: division by zero'
                                                if not _10095 + uint128(_10156):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12843 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10374) * uint128(_8894) / _10095 + uint128(_10156) <= mem[_12843]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10374) * uint128(_8894) / _10095 + uint128(_10156)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12843]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                        else:
                            call kashiPairs[arg2].field_0.accrue() with:
                                 gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8742 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8774 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8742] == mem[_8742 + 16 len 16]
                            mem[_8774] = mem[_8742]
                            require mem[_8742 + 32] == mem[_8742 + 48 len 16]
                            mem[_8774 + 32] = mem[_8742 + 32]
                            _8918 = mem[_8774]
                            if 0 > mem[_8774 + 16 len 16]:
                                if mem[_8774 + 16 len 16]:
                                    _9033 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9033] = 0
                                    mem[_9033 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9105 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9244 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9105] == mem[_9105 + 16 len 16]
                                    mem[_9244] = mem[_9105]
                                    require mem[_9105 + 32] == mem[_9105 + 48 len 16]
                                    mem[_9244 + 32] = mem[_9105 + 32]
                                    _9618 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9618] = 0
                                    mem[_9618 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9685 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9774 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9685] == mem[_9685 + 16 len 16]
                                    mem[_9774] = mem[_9685]
                                    require mem[_9685 + 32] == mem[_9685 + 48 len 16]
                                    mem[_9774 + 32] = mem[_9685 + 32]
                                    _9966 = mem[_9774]
                                    if not mem[_9774 + 16 len 16]:
                                        _10046 = mem[_9244]
                                        if mem[_9244 + 16 len 16] < mem[_9244 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9244 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10497 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8918) <= mem[_10497]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8918)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10497]
                                        else:
                                            _10190 = mem[_9244 + 32]
                                            if not uint128(_8918):
                                                _10438 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10438] = 26
                                                mem[_10438 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10046):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _11786 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10046) <= mem[_11786]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10046)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_11786]
                                            else:
                                                if mem[_9244 + 48 len 16] * uint128(_8918) / uint128(_8918) != mem[_9244 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10557 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10557] = 26
                                                mem[_10557 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10046):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12089 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10190) * uint128(_8918) / uint128(_10046) <= mem[_12089]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10190) * uint128(_8918) / uint128(_10046)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12089]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_9966)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _9966 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10097 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10157 = mem[_10097]
                                        _10234 = mem[_9244]
                                        if mem[_10097] + mem[_9244 + 16 len 16] < mem[_9244 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10097] + mem[_9244 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11003 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8918) <= mem[_11003]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8918)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11003]
                                        else:
                                            _10496 = mem[_9244 + 32]
                                            if not uint128(_8918):
                                                _10900 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10900] = 26
                                                mem[_10900 + 32] = 'SafeMath: division by zero'
                                                if not _10157 + uint128(_10234):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12849 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10157 + uint128(_10234) <= mem[_12849]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10157 + uint128(_10234)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12849]
                                            else:
                                                if mem[_9244 + 48 len 16] * uint128(_8918) / uint128(_8918) != mem[_9244 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11096 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11096] = 26
                                                mem[_11096 + 32] = 'SafeMath: division by zero'
                                                if not _10157 + uint128(_10234):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13255 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10496) * uint128(_8918) / _10157 + uint128(_10234) <= mem[_13255]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10496) * uint128(_8918) / _10157 + uint128(_10234)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13255]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                    else:
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = _8489
                        mem[mem[64] + 68] = 1
                        require ext_code.size(bentoBoxAddress)
                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(this.address), _8489, 1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8556 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8572 = mem[_8556]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                                gas gas_remaining wei
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8622 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        require mem[_8622] == mem[_8622 + 24 len 8]
                        require mem[_8622 + 32] == mem[_8622 + 56 len 8]
                        require mem[_8622 + 64] == mem[_8622 + 80 len 16]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        if block.timestamp <= mem[_8622 + 56 len 8]:
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8799 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8840 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8799] == mem[_8799 + 16 len 16]
                            mem[_8840] = mem[_8799]
                            require mem[_8799 + 32] == mem[_8799 + 48 len 16]
                            mem[_8840 + 32] = mem[_8799 + 32]
                            _8976 = mem[_8840]
                            if _8572 <= mem[_8840 + 16 len 16]:
                                if _8572:
                                    _9104 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9104] = 0
                                    mem[_9104 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9237 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9365 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9237] == mem[_9237 + 16 len 16]
                                    mem[_9365] = mem[_9237]
                                    require mem[_9237 + 32] == mem[_9237 + 48 len 16]
                                    mem[_9365 + 32] = mem[_9237 + 32]
                                    _9684 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9684] = 0
                                    mem[_9684 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9770 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9832 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9770] == mem[_9770 + 16 len 16]
                                    mem[_9832] = mem[_9770]
                                    require mem[_9770 + 32] == mem[_9770 + 48 len 16]
                                    mem[_9832 + 32] = mem[_9770 + 32]
                                    _10017 = mem[_9832]
                                    if not mem[_9832 + 16 len 16]:
                                        _10116 = mem[_9365]
                                        if mem[_9365 + 16 len 16] < mem[_9365 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9365 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10699 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8572 <= mem[_10699]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8572
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10699]
                                        else:
                                            _10319 = mem[_9365 + 32]
                                            if not _8572:
                                                _10618 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10618] = 26
                                                mem[_10618 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10116):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12243 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10116) <= mem[_12243]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10116)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12243]
                                            else:
                                                if mem[_9365 + 48 len 16] * _8572 / _8572 != mem[_9365 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10792 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10792] = 26
                                                mem[_10792 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10116):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12623 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10319) * _8572 / uint128(_10116) <= mem[_12623]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10319) * _8572 / uint128(_10116)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12623]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10017)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10017 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10185 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10264 = mem[_10185]
                                        _10370 = mem[_9365]
                                        if mem[_10185] + mem[_9365 + 16 len 16] < mem[_9365 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10185] + mem[_9365 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11312 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8572 <= mem[_11312]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8572
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11312]
                                        else:
                                            _10698 = mem[_9365 + 32]
                                            if not _8572:
                                                _11187 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11187] = 26
                                                mem[_11187 + 32] = 'SafeMath: division by zero'
                                                if not _10264 + uint128(_10370):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13435 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10264 + uint128(_10370) <= mem[_13435]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10264 + uint128(_10370)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13435]
                                            else:
                                                if mem[_9365 + 48 len 16] * _8572 / _8572 != mem[_9365 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11451 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11451] = 26
                                                mem[_11451 + 32] = 'SafeMath: division by zero'
                                                if not _10264 + uint128(_10370):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13859 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10698) * _8572 / _10264 + uint128(_10370) <= mem[_13859]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10698) * _8572 / _10264 + uint128(_10370)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13859]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                            else:
                                if mem[_8840 + 16 len 16]:
                                    _9143 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9143] = 0
                                    mem[_9143 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9298 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9403 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9298] == mem[_9298 + 16 len 16]
                                    mem[_9403] = mem[_9298]
                                    require mem[_9298 + 32] == mem[_9298 + 48 len 16]
                                    mem[_9403 + 32] = mem[_9298 + 32]
                                    _9715 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9715] = 0
                                    mem[_9715 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9803 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9857 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9803] == mem[_9803 + 16 len 16]
                                    mem[_9857] = mem[_9803]
                                    require mem[_9803 + 32] == mem[_9803 + 48 len 16]
                                    mem[_9857 + 32] = mem[_9803 + 32]
                                    _10042 = mem[_9857]
                                    if not mem[_9857 + 16 len 16]:
                                        _10154 = mem[_9403]
                                        if mem[_9403 + 16 len 16] < mem[_9403 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9403 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10795 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8976) <= mem[_10795]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8976)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10795]
                                        else:
                                            _10371 = mem[_9403 + 32]
                                            if not uint128(_8976):
                                                _10702 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10702] = 26
                                                mem[_10702 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10154):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12428 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10154) <= mem[_12428]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10154)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12428]
                                            else:
                                                if mem[_9403 + 48 len 16] * uint128(_8976) / uint128(_8976) != mem[_9403 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10890 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10890] = 26
                                                mem[_10890 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10154):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12832 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10371) * uint128(_8976) / uint128(_10154) <= mem[_12832]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10371) * uint128(_8976) / uint128(_10154)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12832]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10042)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10042 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10229 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10320 = mem[_10229]
                                        _10431 = mem[_9403]
                                        if mem[_10229] + mem[_9403 + 16 len 16] < mem[_9403 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10229] + mem[_9403 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11454 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8976) <= mem[_11454]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8976)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11454]
                                        else:
                                            _10794 = mem[_9403 + 32]
                                            if not uint128(_8976):
                                                _11316 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11316] = 26
                                                mem[_11316 + 32] = 'SafeMath: division by zero'
                                                if not _10320 + uint128(_10431):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13650 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10320 + uint128(_10431) <= mem[_13650]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10320 + uint128(_10431)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13650]
                                            else:
                                                if mem[_9403 + 48 len 16] * uint128(_8976) / uint128(_8976) != mem[_9403 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11601 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11601] = 26
                                                mem[_11601 + 32] = 'SafeMath: division by zero'
                                                if not _10320 + uint128(_10431):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14064 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10794) * uint128(_8976) / _10320 + uint128(_10431) <= mem[_14064]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10794) * uint128(_8976) / _10320 + uint128(_10431)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14064]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                        else:
                            call kashiPairs[arg2].field_0.accrue() with:
                                 gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8825 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8867 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8825] == mem[_8825 + 16 len 16]
                            mem[_8867] = mem[_8825]
                            require mem[_8825 + 32] == mem[_8825 + 48 len 16]
                            mem[_8867 + 32] = mem[_8825 + 32]
                            _9029 = mem[_8867]
                            if _8572 <= mem[_8867 + 16 len 16]:
                                if _8572:
                                    _9185 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9185] = 0
                                    mem[_9185 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9330 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9436 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9330] == mem[_9330 + 16 len 16]
                                    mem[_9436] = mem[_9330]
                                    require mem[_9330 + 32] == mem[_9330 + 48 len 16]
                                    mem[_9436 + 32] = mem[_9330 + 32]
                                    _9746 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9746] = 0
                                    mem[_9746 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9814 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9874 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9814] == mem[_9814 + 16 len 16]
                                    mem[_9874] = mem[_9814]
                                    require mem[_9814 + 32] == mem[_9814 + 48 len 16]
                                    mem[_9874 + 32] = mem[_9814 + 32]
                                    _10058 = mem[_9874]
                                    if not mem[_9874 + 16 len 16]:
                                        _10188 = mem[_9436]
                                        if mem[_9436 + 16 len 16] < mem[_9436 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9436 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10893 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8572 <= mem[_10893]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8572
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10893]
                                        else:
                                            _10432 = mem[_9436 + 32]
                                            if not _8572:
                                                _10798 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10798] = 26
                                                mem[_10798 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10188):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12632 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10188) <= mem[_12632]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10188)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12632]
                                            else:
                                                if mem[_9436 + 48 len 16] * _8572 / _8572 != mem[_9436 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10994 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10994] = 26
                                                mem[_10994 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10188):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13018 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10432) * _8572 / uint128(_10188) <= mem[_13018]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10432) * _8572 / uint128(_10188)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13018]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10058)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10058 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10266 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10372 = mem[_10266]
                                        _10492 = mem[_9436]
                                        if mem[_10266] + mem[_9436 + 16 len 16] < mem[_9436 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10266] + mem[_9436 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11604 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8572 <= mem[_11604]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8572
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11604]
                                        else:
                                            _10892 = mem[_9436 + 32]
                                            if not _8572:
                                                _11458 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11458] = 26
                                                mem[_11458 + 32] = 'SafeMath: division by zero'
                                                if not _10372 + uint128(_10492):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13869 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10372 + uint128(_10492) <= mem[_13869]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10372 + uint128(_10492)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13869]
                                            else:
                                                if mem[_9436 + 48 len 16] * _8572 / _8572 != mem[_9436 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11769 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11769] = 26
                                                mem[_11769 + 32] = 'SafeMath: division by zero'
                                                if not _10372 + uint128(_10492):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14272 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10892) * _8572 / _10372 + uint128(_10492) <= mem[_14272]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10892) * _8572 / _10372 + uint128(_10492)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14272]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                            else:
                                if mem[_8867 + 16 len 16]:
                                    _9243 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9243] = 0
                                    mem[_9243 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9366 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9490 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9366] == mem[_9366 + 16 len 16]
                                    mem[_9490] = mem[_9366]
                                    require mem[_9366 + 32] == mem[_9366 + 48 len 16]
                                    mem[_9490 + 32] = mem[_9366 + 32]
                                    _9773 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9773] = 0
                                    mem[_9773 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9833 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9905 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9833] == mem[_9833 + 16 len 16]
                                    mem[_9905] = mem[_9833]
                                    require mem[_9833 + 32] == mem[_9833 + 48 len 16]
                                    mem[_9905 + 32] = mem[_9833 + 32]
                                    _10094 = mem[_9905]
                                    if not mem[_9905 + 16 len 16]:
                                        _10232 = mem[_9490]
                                        if mem[_9490 + 16 len 16] < mem[_9490 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9490 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10997 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9029) <= mem[_10997]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9029)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10997]
                                        else:
                                            _10493 = mem[_9490 + 32]
                                            if not uint128(_9029):
                                                _10896 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10896] = 26
                                                mem[_10896 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10232):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12841 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10232) <= mem[_12841]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10232)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12841]
                                            else:
                                                if mem[_9490 + 48 len 16] * uint128(_9029) / uint128(_9029) != mem[_9490 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11091 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11091] = 26
                                                mem[_11091 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10232):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13247 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10493) * uint128(_9029) / uint128(_10232) <= mem[_13247]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10493) * uint128(_9029) / uint128(_10232)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13247]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10094)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10094 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10322 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10433 = mem[_10322]
                                        _10554 = mem[_9490]
                                        if mem[_10322] + mem[_9490 + 16 len 16] < mem[_9490 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10322] + mem[_9490 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11772 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9029) <= mem[_11772]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9029)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11772]
                                        else:
                                            _10996 = mem[_9490 + 32]
                                            if not uint128(_9029):
                                                _11608 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11608] = 26
                                                mem[_11608 + 32] = 'SafeMath: division by zero'
                                                if not _10433 + uint128(_10554):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14074 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10433 + uint128(_10554) <= mem[_14074]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10433 + uint128(_10554)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14074]
                                            else:
                                                if mem[_9490 + 48 len 16] * uint128(_9029) / uint128(_9029) != mem[_9490 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11910 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11910] = 26
                                                mem[_11910 + 32] = 'SafeMath: division by zero'
                                                if not _10433 + uint128(_10554):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14502 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10996) * uint128(_9029) / _10433 + uint128(_10554) <= mem[_14502]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10996) * uint128(_9029) / _10433 + uint128(_10554)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14502]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                else:
                    mem[mem[64] + 36] = s
                    mem[mem[64] + 68] = 1
                    require ext_code.size(bentoBoxAddress)
                    staticcall bentoBoxAddress.toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(this.address), s, 1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8458 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8470 = mem[_8458]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8501 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8512 = mem[_8501]
                    if _8470 + mem[_8501] < mem[_8501]:
                        revert with 0, 'SafeMath: addition overflow'
                    if not _8470 + mem[_8501]:
                        require ext_code.size(kashiPairs[arg2].field_0)
                        staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                                gas gas_remaining wei
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8621 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        require mem[_8621] == mem[_8621 + 24 len 8]
                        require mem[_8621 + 32] == mem[_8621 + 56 len 8]
                        require mem[_8621 + 64] == mem[_8621 + 80 len 16]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        if block.timestamp <= mem[_8621 + 56 len 8]:
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8796 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8839 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8796] == mem[_8796 + 16 len 16]
                            mem[_8839] = mem[_8796]
                            require mem[_8796 + 32] == mem[_8796 + 48 len 16]
                            mem[_8839 + 32] = mem[_8796 + 32]
                            _8975 = mem[_8839]
                            if 0 > mem[_8839 + 16 len 16]:
                                if mem[_8839 + 16 len 16]:
                                    _9139 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9139] = 0
                                    mem[_9139 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9292 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9402 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9292] == mem[_9292 + 16 len 16]
                                    mem[_9402] = mem[_9292]
                                    require mem[_9292 + 32] == mem[_9292 + 48 len 16]
                                    mem[_9402 + 32] = mem[_9292 + 32]
                                    _9712 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9712] = 0
                                    mem[_9712 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9800 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9856 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9800] == mem[_9800 + 16 len 16]
                                    mem[_9856] = mem[_9800]
                                    require mem[_9800 + 32] == mem[_9800 + 48 len 16]
                                    mem[_9856 + 32] = mem[_9800 + 32]
                                    _10041 = mem[_9856]
                                    if not mem[_9856 + 16 len 16]:
                                        _10151 = mem[_9402]
                                        if mem[_9402 + 16 len 16] < mem[_9402 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9402 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10788 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8975) <= mem[_10788]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8975)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10788]
                                        else:
                                            _10369 = mem[_9402 + 32]
                                            if not uint128(_8975):
                                                _10696 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10696] = 26
                                                mem[_10696 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10151):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12417 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10151) <= mem[_12417]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10151)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12417]
                                            else:
                                                if mem[_9402 + 48 len 16] * uint128(_8975) / uint128(_8975) != mem[_9402 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _10884 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10884] = 26
                                                mem[_10884 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10151):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12818 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10369) * uint128(_8975) / uint128(_10151) <= mem[_12818]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10369) * uint128(_8975) / uint128(_10151)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12818]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10041)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10041 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10225 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10315 = mem[_10225]
                                        _10427 = mem[_9402]
                                        if mem[_10225] + mem[_9402 + 16 len 16] < mem[_9402 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10225] + mem[_9402 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11445 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_8975) <= mem[_11445]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_8975)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11445]
                                        else:
                                            _10787 = mem[_9402 + 32]
                                            if not uint128(_8975):
                                                _11307 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11307] = 26
                                                mem[_11307 + 32] = 'SafeMath: division by zero'
                                                if not _10315 + uint128(_10427):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13636 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10315 + uint128(_10427) <= mem[_13636]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10315 + uint128(_10427)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13636]
                                            else:
                                                if mem[_9402 + 48 len 16] * uint128(_8975) / uint128(_8975) != mem[_9402 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11591 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11591] = 26
                                                mem[_11591 + 32] = 'SafeMath: division by zero'
                                                if not _10315 + uint128(_10427):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14051 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10787) * uint128(_8975) / _10315 + uint128(_10427) <= mem[_14051]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10787) * uint128(_8975) / _10315 + uint128(_10427)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14051]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                        else:
                            call kashiPairs[arg2].field_0.accrue() with:
                                 gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8824 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8866 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8824] == mem[_8824 + 16 len 16]
                            mem[_8866] = mem[_8824]
                            require mem[_8824 + 32] == mem[_8824 + 48 len 16]
                            mem[_8866 + 32] = mem[_8824 + 32]
                            _9028 = mem[_8866]
                            if 0 > mem[_8866 + 16 len 16]:
                                if mem[_8866 + 16 len 16]:
                                    _9236 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9236] = 0
                                    mem[_9236 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9363 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9488 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9363] == mem[_9363 + 16 len 16]
                                    mem[_9488] = mem[_9363]
                                    require mem[_9363 + 32] == mem[_9363 + 48 len 16]
                                    mem[_9488 + 32] = mem[_9363 + 32]
                                    _9769 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9769] = 0
                                    mem[_9769 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9831 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9903 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9831] == mem[_9831 + 16 len 16]
                                    mem[_9903] = mem[_9831]
                                    require mem[_9831 + 32] == mem[_9831 + 48 len 16]
                                    mem[_9903 + 32] = mem[_9831 + 32]
                                    _10092 = mem[_9903]
                                    if not mem[_9903 + 16 len 16]:
                                        _10228 = mem[_9488]
                                        if mem[_9488 + 16 len 16] < mem[_9488 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9488 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10988 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9028) <= mem[_10988]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9028)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_10988]
                                        else:
                                            _10489 = mem[_9488 + 32]
                                            if not uint128(_9028):
                                                _10887 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10887] = 26
                                                mem[_10887 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10228):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _12824 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10228) <= mem[_12824]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10228)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_12824]
                                            else:
                                                if mem[_9488 + 48 len 16] * uint128(_9028) / uint128(_9028) != mem[_9488 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11083 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11083] = 26
                                                mem[_11083 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10228):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13227 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10489) * uint128(_9028) / uint128(_10228) <= mem[_13227]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10489) * uint128(_9028) / uint128(_10228)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13227]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10092)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10092 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10317 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10428 = mem[_10317]
                                        _10549 = mem[_9488]
                                        if mem[_10317] + mem[_9488 + 16 len 16] < mem[_9488 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10317] + mem[_9488 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11758 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9028) <= mem[_11758]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9028)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11758]
                                        else:
                                            _10987 = mem[_9488 + 32]
                                            if not uint128(_9028):
                                                _11594 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11594] = 26
                                                mem[_11594 + 32] = 'SafeMath: division by zero'
                                                if not _10428 + uint128(_10549):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14057 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10428 + uint128(_10549) <= mem[_14057]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10428 + uint128(_10549)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14057]
                                            else:
                                                if mem[_9488 + 48 len 16] * uint128(_9028) / uint128(_9028) != mem[_9488 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11897 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11897] = 26
                                                mem[_11897 + 32] = 'SafeMath: division by zero'
                                                if not _10428 + uint128(_10549):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14484 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10987) * uint128(_9028) / _10428 + uint128(_10549) <= mem[_14484]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10987) * uint128(_9028) / _10428 + uint128(_10549)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14484]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                    else:
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = _8470 + _8512
                        mem[mem[64] + 68] = 1
                        require ext_code.size(bentoBoxAddress)
                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(this.address), _8470 + _8512, 1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8602 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8620 = mem[_8602]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        staticcall kashiPairs[arg2].field_0.accrueInfo() with:
                                gas gas_remaining wei
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8678 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        require mem[_8678] == mem[_8678 + 24 len 8]
                        require mem[_8678 + 32] == mem[_8678 + 56 len 8]
                        require mem[_8678 + 64] == mem[_8678 + 80 len 16]
                        require ext_code.size(kashiPairs[arg2].field_0)
                        if block.timestamp <= mem[_8678 + 56 len 8]:
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8889 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8937 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8889] == mem[_8889 + 16 len 16]
                            mem[_8937] = mem[_8889]
                            require mem[_8889 + 32] == mem[_8889 + 48 len 16]
                            mem[_8937 + 32] = mem[_8889 + 32]
                            _9137 = mem[_8937]
                            if _8620 <= mem[_8937 + 16 len 16]:
                                if _8620:
                                    _9362 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9362] = 0
                                    mem[_9362 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9481 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9593 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9481] == mem[_9481 + 16 len 16]
                                    mem[_9593] = mem[_9481]
                                    require mem[_9481 + 32] == mem[_9481 + 48 len 16]
                                    mem[_9593 + 32] = mem[_9481 + 32]
                                    _9830 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9830] = 0
                                    mem[_9830 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9899 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9960 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9899] == mem[_9899 + 16 len 16]
                                    mem[_9960] = mem[_9899]
                                    require mem[_9899 + 32] == mem[_9899 + 48 len 16]
                                    mem[_9960 + 32] = mem[_9899 + 32]
                                    _10183 = mem[_9960]
                                    if not mem[_9960 + 16 len 16]:
                                        _10367 = mem[_9593]
                                        if mem[_9593 + 16 len 16] < mem[_9593 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9593 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11300 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8620 <= mem[_11300]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8620
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11300]
                                        else:
                                            _10690 = mem[_9593 + 32]
                                            if not _8620:
                                                _11178 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11178] = 26
                                                mem[_11178 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10367):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13413 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10367) <= mem[_13413]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10367)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13413]
                                            else:
                                                if mem[_9593 + 48 len 16] * _8620 / _8620 != mem[_9593 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11436 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11436] = 26
                                                mem[_11436 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10367):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13834 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10690) * _8620 / uint128(_10367) <= mem[_13834]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10690) * _8620 / uint128(_10367)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13834]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10183)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10183 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10484 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10610 = mem[_10484]
                                        _10783 = mem[_9593]
                                        if mem[_10484] + mem[_9593 + 16 len 16] < mem[_9593 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10484] + mem[_9593 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12220 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8620 <= mem[_12220]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8620
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12220]
                                        else:
                                            _11299 = mem[_9593 + 32]
                                            if not _8620:
                                                _12048 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12048] = 26
                                                mem[_12048 + 32] = 'SafeMath: division by zero'
                                                if not _10610 + uint128(_10783):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14670 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10610 + uint128(_10783) <= mem[_14670]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10610 + uint128(_10783)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14670]
                                            else:
                                                if mem[_9593 + 48 len 16] * _8620 / _8620 != mem[_9593 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _12401 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12401] = 26
                                                mem[_12401 + 32] = 'SafeMath: division by zero'
                                                if not _10610 + uint128(_10783):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15062 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_11299) * _8620 / _10610 + uint128(_10783) <= mem[_15062]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_11299) * _8620 / _10610 + uint128(_10783)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_15062]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                            else:
                                if mem[_8937 + 16 len 16]:
                                    _9401 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9401] = 0
                                    mem[_9401 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9525 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9615 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9525] == mem[_9525 + 16 len 16]
                                    mem[_9615] = mem[_9525]
                                    require mem[_9525 + 32] == mem[_9525 + 48 len 16]
                                    mem[_9615 + 32] = mem[_9525 + 32]
                                    _9855 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9855] = 0
                                    mem[_9855 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9925 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9976 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9925] == mem[_9925 + 16 len 16]
                                    mem[_9976] = mem[_9925]
                                    require mem[_9925 + 32] == mem[_9925 + 48 len 16]
                                    mem[_9976 + 32] = mem[_9925 + 32]
                                    _10224 = mem[_9976]
                                    if not mem[_9976 + 16 len 16]:
                                        _10425 = mem[_9615]
                                        if mem[_9615 + 16 len 16] < mem[_9615 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9615 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11439 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9137) <= mem[_11439]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9137)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11439]
                                        else:
                                            _10784 = mem[_9615 + 32]
                                            if not uint128(_9137):
                                                _11303 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11303] = 26
                                                mem[_11303 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10425):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13625 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10425) <= mem[_13625]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10425)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13625]
                                            else:
                                                if mem[_9615 + 48 len 16] * uint128(_9137) / uint128(_9137) != mem[_9615 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11584 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11584] = 26
                                                mem[_11584 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10425):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14040 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10784) * uint128(_9137) / uint128(_10425) <= mem[_14040]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10784) * uint128(_9137) / uint128(_10425)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14040]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10224)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10224 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10544 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10691 = mem[_10544]
                                        _10880 = mem[_9615]
                                        if mem[_10544] + mem[_9615 + 16 len 16] < mem[_9615 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10544] + mem[_9615 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12404 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9137) <= mem[_12404]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9137)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12404]
                                        else:
                                            _11438 = mem[_9615 + 32]
                                            if not uint128(_9137):
                                                _12224 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12224] = 26
                                                mem[_12224 + 32] = 'SafeMath: division by zero'
                                                if not _10691 + uint128(_10880):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14878 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10691 + uint128(_10880) <= mem[_14878]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10691 + uint128(_10880)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14878]
                                            else:
                                                if mem[_9615 + 48 len 16] * uint128(_9137) / uint128(_9137) != mem[_9615 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _12601 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12601] = 26
                                                mem[_12601 + 32] = 'SafeMath: division by zero'
                                                if not _10691 + uint128(_10880):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15244 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_11438) * uint128(_9137) / _10691 + uint128(_10880) <= mem[_15244]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_11438) * uint128(_9137) / _10691 + uint128(_10880)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_15244]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                        else:
                            call kashiPairs[arg2].field_0.accrue() with:
                                 gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(kashiPairs[arg2].field_0)
                            staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                    gas gas_remaining wei
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8915 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8955 = mem[64]
                            require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                            mem[64] = mem[64] + 64
                            require mem[_8915] == mem[_8915 + 16 len 16]
                            mem[_8955] = mem[_8915]
                            require mem[_8915 + 32] == mem[_8915 + 48 len 16]
                            mem[_8955 + 32] = mem[_8915 + 32]
                            _9232 = mem[_8955]
                            if _8620 <= mem[_8955 + 16 len 16]:
                                if _8620:
                                    _9435 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9435] = 0
                                    mem[_9435 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9556 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9640 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9556] == mem[_9556 + 16 len 16]
                                    mem[_9640] = mem[_9556]
                                    require mem[_9556 + 32] == mem[_9556 + 48 len 16]
                                    mem[_9640 + 32] = mem[_9556 + 32]
                                    _9873 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9873] = 0
                                    mem[_9873 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9937 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9994 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9937] == mem[_9937 + 16 len 16]
                                    mem[_9994] = mem[_9937]
                                    require mem[_9937 + 32] == mem[_9937 + 48 len 16]
                                    mem[_9994 + 32] = mem[_9937 + 32]
                                    _10263 = mem[_9994]
                                    if not mem[_9994 + 16 len 16]:
                                        _10487 = mem[_9640]
                                        if mem[_9640 + 16 len 16] < mem[_9640 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9640 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11587 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8620 <= mem[_11587]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8620
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11587]
                                        else:
                                            _10881 = mem[_9640 + 32]
                                            if not _8620:
                                                _11442 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11442] = 26
                                                mem[_11442 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10487):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _13843 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10487) <= mem[_13843]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10487)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_13843]
                                            else:
                                                if mem[_9640 + 48 len 16] * _8620 / _8620 != mem[_9640 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11749 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11749] = 26
                                                mem[_11749 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10487):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14249 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10881) * _8620 / uint128(_10487) <= mem[_14249]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10881) * _8620 / uint128(_10487)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14249]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10263)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10263 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10612 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10785 = mem[_10612]
                                        _10983 = mem[_9640]
                                        if mem[_10612] + mem[_9640 + 16 len 16] < mem[_9640 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10612] + mem[_9640 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12604 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if _8620 <= mem[_12604]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), _8620
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12604]
                                        else:
                                            _11586 = mem[_9640 + 32]
                                            if not _8620:
                                                _12408 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12408] = 26
                                                mem[_12408 + 32] = 'SafeMath: division by zero'
                                                if not _10785 + uint128(_10983):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15072 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10785 + uint128(_10983) <= mem[_15072]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10785 + uint128(_10983)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_15072]
                                            else:
                                                if mem[_9640 + 48 len 16] * _8620 / _8620 != mem[_9640 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _12807 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12807] = 26
                                                mem[_12807 + 32] = 'SafeMath: division by zero'
                                                if not _10785 + uint128(_10983):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15428 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_11586) * _8620 / _10785 + uint128(_10983) <= mem[_15428]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_11586) * _8620 / _10785 + uint128(_10983)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_15428]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                            else:
                                if mem[_8955 + 16 len 16]:
                                    _9487 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9487] = 0
                                    mem[_9487 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalAsset() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9594 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _9666 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9594] == mem[_9594 + 16 len 16]
                                    mem[_9666] = mem[_9594]
                                    require mem[_9594 + 32] == mem[_9594 + 48 len 16]
                                    mem[_9666 + 32] = mem[_9594 + 32]
                                    _9902 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9902] = 0
                                    mem[_9902 + 32] = 0
                                    require ext_code.size(kashiPairs[arg2].field_0)
                                    staticcall kashiPairs[arg2].field_0.totalBorrow() with:
                                            gas gas_remaining wei
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9961 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _10015 = mem[64]
                                    require mem[64] + 64 >= mem[64] and mem[64] + 64 <= test266151307()
                                    mem[64] = mem[64] + 64
                                    require mem[_9961] == mem[_9961 + 16 len 16]
                                    mem[_10015] = mem[_9961]
                                    require mem[_9961 + 32] == mem[_9961 + 48 len 16]
                                    mem[_10015 + 32] = mem[_9961 + 32]
                                    _10314 = mem[_10015]
                                    if not mem[_10015 + 16 len 16]:
                                        _10547 = mem[_9666]
                                        if mem[_9666 + 16 len 16] < mem[_9666 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_9666 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11752 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9232) <= mem[_11752]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9232)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_11752]
                                        else:
                                            _10984 = mem[_9666 + 32]
                                            if not uint128(_9232):
                                                _11590 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11590] = 26
                                                mem[_11590 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10547):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14049 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / uint128(_10547) <= mem[_14049]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / uint128(_10547)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14049]
                                            else:
                                                if mem[_9666 + 48 len 16] * uint128(_9232) / uint128(_9232) != mem[_9666 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _11892 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11892] = 26
                                                mem[_11892 + 32] = 'SafeMath: division by zero'
                                                if not uint128(_10547):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _14476 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_10984) * uint128(_9232) / uint128(_10547) <= mem[_14476]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_10984) * uint128(_9232) / uint128(_10547)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_14476]
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        mem[mem[64] + 36] = uint128(_10314)
                                        mem[mem[64] + 68] = 1
                                        require ext_code.size(bentoBoxAddress)
                                        staticcall bentoBoxAddress.toShare(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(this.address), _10314 << 128, 1
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10693 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10882 = mem[_10693]
                                        _11080 = mem[_9666]
                                        if mem[_10693] + mem[_9666 + 16 len 16] < mem[_9666 + 16 len 16]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not mem[_10693] + mem[_9666 + 16 len 16]:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _12810 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require ext_code.size(kashiPairs[arg2].field_0)
                                            if uint128(_9232) <= mem[_12810]:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), uint128(_9232)
                                            else:
                                                call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), mem[_12810]
                                        else:
                                            _11751 = mem[_9666 + 32]
                                            if not uint128(_9232):
                                                _12608 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12608] = 26
                                                mem[_12608 + 32] = 'SafeMath: division by zero'
                                                if not _10882 + uint128(_11080):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15254 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if 0 / _10882 + uint128(_11080) <= mem[_15254]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), 0 / _10882 + uint128(_11080)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_15254]
                                            else:
                                                if mem[_9666 + 48 len 16] * uint128(_9232) / uint128(_9232) != mem[_9666 + 48 len 16]:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                _12996 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_12996] = 26
                                                mem[_12996 + 32] = 'SafeMath: division by zero'
                                                if not _10882 + uint128(_11080):
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                staticcall kashiPairs[arg2].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15627 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                require ext_code.size(kashiPairs[arg2].field_0)
                                                if uint128(_11751) * uint128(_9232) / _10882 + uint128(_11080) <= mem[_15627]:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), uint128(_11751) * uint128(_9232) / _10882 + uint128(_11080)
                                                else:
                                                    call kashiPairs[arg2].field_0.removeAsset(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(this.address), mem[_15627]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
    require kashiPairs.length - 1 < kashiPairs.length
    require arg2 < kashiPairs.length
    kashiPairs[arg2].field_0 = kashiPairs[kashiPairs.length - 1].field_0
    kashiPairs[arg2].field_256 = kashiPairs[kashiPairs.length - 1].field_256
    require kashiPairs.length
    kashiPairs[kashiPairs.length - 1].field_0 = 0
    kashiPairs[kashiPairs.length - 1].field_256 = 0
    kashiPairs.length--
}



}
