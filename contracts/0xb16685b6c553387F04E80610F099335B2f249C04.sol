contract main {




// =====================  Runtime code  =====================


#
#  - deposit(address arg1, uint256 arg2)
#  - earn()
#
const controllerFeeUL = 300

const controllerFeeMax = 10000

const buyBackRateMax = 10000

const withdrawFeeFactorMax = 10000

const buyBackAddress = 57005

const sub_7c717c09(?) = 9500

const withdrawFeeFactorLL = 9950

const sub_a613a28a(?) = 10000

const buyBackRateUL = 800

const slippageFactorUL = 995

const entranceFeeFactorLL = 9950

const entranceFeeFactorMax = 10000


address owner;
uint256 stor1;
uint8 stor2;
uint8 stor2; offset 8
uint8 stor2; offset 16
uint32 stor2;
address farmContractAddress; offset 24
uint256 stor2;
uint256 pid;
address wantAddress;
address token0Address;
address token1Address;
address earnedAddress;
uint32 stor8;
address uniRouterAddress;
uint256 stor8;
address sub_cb971847Address;
uint256 sub_1b61e055;
address sub_7edd3da5Address;
uint32 stor12;
address sub_88f9e800Address;
uint256 stor12;
address sub_b3ed4599Address;
address govAddress;
uint256 sub_ba0c108f;
uint256 stor16; offset 32
uint256 wantLockedTotal;
big480 stor16;
uint256 sharesTotal;
uint256 controllerFee;
uint256 buyBackRate;
uint256 entranceFeeFactor;
uint256 sub_25c7ce6b;
uint256 withdrawFeeFactor;
uint256 slippageFactor;
array of address sub_67eed8e0;
array of address earnedToToken0Path;
array of address earnedToToken1Path;
array of struct token0ToEarnedPath;
array of struct token1ToEarnedPath;
array of address sub_6597b04f;
array of address sub_6b99e24b;
address earned0Address;
array of address sub_07e2318d;

function token1ToEarnedPath(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < token1ToEarnedPath.length
    return token1ToEarnedPath[arg1].field_0
}

function sub_07e2318d(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < sub_07e2318d.length
    return sub_07e2318d[arg1]
}

function sub_0ddea8c3(?) payable {
    return bool(uint8(stor2.field_8))
}

function entranceFeeFactor() payable {
    return entranceFeeFactor
}

function buyBackRate() payable {
    return buyBackRate
}

function sub_1b61e055(?) payable {
    return sub_1b61e055
}

function sub_25c7ce6b(?) payable {
    return sub_25c7ce6b
}

function earned0Address() payable {
    return earned0Address
}

function wantLockedTotal() payable {
    return wantLockedTotal
}

function sharesTotal() payable {
    return sharesTotal
}

function govAddress() payable {
    return govAddress
}

function paused() payable {
    return bool(uint8(stor2.field_0))
}

function sub_6597b04f(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < sub_6597b04f.length
    return sub_6597b04f[arg1]
}

function sub_67eed8e0(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < sub_67eed8e0.length
    return sub_67eed8e0[arg1]
}

function withdrawFeeFactor() payable {
    return withdrawFeeFactor
}

function uniRouterAddress() payable {
    return address(uniRouterAddress)
}

function sub_6b99e24b(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < sub_6b99e24b.length
    return sub_6b99e24b[arg1]
}

function sub_7edd3da5(?) payable {
    return sub_7edd3da5Address
}

function token0Address() payable {
    return token0Address
}

function controllerFee() payable {
    return controllerFee
}

function sub_88f9e800(?) payable {
    return address(sub_88f9e800Address)
}

function owner() payable {
    return owner
}

function earnedToToken1Path(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < earnedToToken1Path.length
    return earnedToToken1Path[arg1]
}

function farmContractAddress() payable {
    return farmContractAddress
}

function sub_b3ed4599(?) payable {
    return sub_b3ed4599Address
}

function token0ToEarnedPath(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < token0ToEarnedPath.length
    return token0ToEarnedPath[arg1].field_0
}

function sub_ba0c108f(?) payable {
    return sub_ba0c108f
}

function earnedToToken0Path(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < earnedToToken0Path.length
    return earnedToToken0Path[arg1]
}

function sub_cb971847(?) payable {
    return sub_cb971847Address
}

function token1Address() payable {
    return token1Address
}

function isAutoComp() payable {
    return bool(uint8(stor2.field_16))
}

function earnedAddress() payable {
    return earnedAddress
}

function wantAddress() payable {
    return wantAddress
}

function pid() payable {
    return pid
}

function slippageFactor() payable {
    return slippageFactor
}

function _fallback() payable {
    revert
}

function setGov(address arg1) payable {
    require calldata.size - 4 >= 32
    if govAddress != msg.sender:
        revert with 0, 'Not authorised'
    govAddress = arg1
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function setBuybackRouterAddress(address arg1) payable {
    require calldata.size - 4 >= 32
    if govAddress != msg.sender:
        revert with 0, 'Not authorised'
    sub_cb971847Address = arg1
}

function pause() payable {
    if govAddress != msg.sender:
        revert with 0, 'Not authorised'
    if uint8(stor2.field_0):
        revert with 0, 'Pausable: paused'
    uint8(stor2.field_0) = 1
    emit Paused(msg.sender);
}

function setControllerFee(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if govAddress != msg.sender:
        revert with 0, 'Not authorised'
    if arg1 > 300:
        revert with 0, 'too high'
    controllerFee = arg1
}

function setbuyBackRate(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if govAddress != msg.sender:
        revert with 0, 'Not authorised'
    if buyBackRate > 800:
        revert with 0, 'too high'
    buyBackRate = arg1
}

function unpause() payable {
    if govAddress != msg.sender:
        revert with 0, 'Not authorised'
    if not uint8(stor2.field_0):
        revert with 0, 'Pausable: not paused'
    uint8(stor2.field_0) = 0
    emit Unpaused(msg.sender);
}

function setDepositFeeFactor(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if govAddress != msg.sender:
        revert with 0, 'Not authorised'
    if arg1 <= 9500:
        revert with 0, '!safe - too low'
    if arg1 > 10000:
        revert with 0, '!safe - too high'
    sub_25c7ce6b = arg1
}

function setEntranceFeeFactor(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if govAddress != msg.sender:
        revert with 0, 'Not authorised'
    if arg1 <= 9950:
        revert with 0, '!safe - too low'
    if arg1 > 10000:
        revert with 0, '!safe - too high'
    entranceFeeFactor = arg1
}

function setWithdrawFeeFactor(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if govAddress != msg.sender:
        revert with 0, 'Not authorised'
    if arg1 <= 9950:
        revert with 0, '!safe - too low'
    if arg1 > 10000:
        revert with 0, '!safe - too high'
    withdrawFeeFactor = arg1
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657300,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function inCaseTokensGetStuck(address arg1, uint256 arg2, address arg3) payable {
    require calldata.size - 4 >= 96
    if govAddress != msg.sender:
        revert with 0, 'Not authorised'
    if earnedAddress == arg1:
        revert with 0, '!safe'
    if wantAddress == arg1:
        revert with 0, '!safe'
    if eth.balance(this.address) < 0:
        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
    if not ext_code.size(arg1):
        revert with 0, 'Address: call to non-contract'
    mem[260 len 64] = unknown_0xa9059cbb(?????), address(arg3) << 64, 0, Mask(224, 32, arg2) >> 32
    mem[324 len 0] = 0
    call arg1 with:
         gas gas_remaining wei
        args Mask(224, 32, arg2) << 224, mem[324 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0xa9059cbb(?????), address(arg3) << 64, 0, arg2
        if not unknown_0xa9059cbb(?????), address(arg3) << 64:
            revert with 0, 32, 42, 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
    else:
        mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            if not mem[292]:
                revert with 0, 
                            32,
                            42,
                            0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 371 len 22]
}

function farm() payable {
    if stor1 == 2:
        revert with 0, 32, 31, 0xfe5265656e7472616e637947756172643a207265656e7472616e742063616c6c
    stor1 = 2
    if not uint8(stor2.field_16):
        revert with 0, '!isAutoComp'
    require ext_code.size(wantAddress)
    staticcall wantAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] + wantLockedTotal < wantLockedTotal:
        revert with 0, 'SafeMath: addition overflow'
    wantLockedTotal += ext_call.return_data[0]
    require ext_code.size(wantAddress)
    staticcall wantAddress.0xdd62ed3e with:
            gas gas_remaining wei
           args address(this.address), farmContractAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    if eth.balance(this.address) < 0:
        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
    if not ext_code.size(wantAddress):
        revert with 0, 'Address: call to non-contract'
    mem[260 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor2.field_0), uint32(stor2.field_0), Mask(224, 31, ext_call.return_data[0]) >> 31
    call wantAddress with:
       funct uint32(stor2.field_0)
         gas gas_remaining wei
        args Mask(224, 31, ext_call.return_data[0]) << 225, mem[324 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor2.field_0), uint32(stor2.field_0), 2 * ext_call.return_data[0]
        if not approve(address arg1, uint256 arg2), Mask(224, 0, stor2.field_0):
            revert with 0, 32, 42, 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
    else:
        mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            if not mem[292]:
                revert with 0, 
                            32,
                            42,
                            0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 371 len 22]
    require ext_code.size(farmContractAddress)
    if not uint8(stor2.field_8):
        call farmContractAddress.0xe2bbb158 with:
             gas gas_remaining wei
            args pid, ext_call.return_data[0]
    else:
        call farmContractAddress.enterStaking(uint256 arg1) with:
             gas gas_remaining wei
            args ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    stor1 = 1
}

function withdraw(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    if stor1 == 2:
        revert with 0, 32, 31, 0xfe5265656e7472616e637947756172643a207265656e7472616e742063616c6c
    stor1 = 2
    if not arg2:
        revert with 0, '_wantAmt <= 0'
    if sharesTotal * arg2 / arg2 != sharesTotal:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not wantLockedTotal:
        revert with 0, 'SafeMath: division by zero'
    if sharesTotal * arg2 / wantLockedTotal <= sharesTotal:
        sharesTotal -= sharesTotal * arg2 / wantLockedTotal
        if 10000 <= withdrawFeeFactor:
            if not uint8(stor2.field_16):
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if arg2 > ext_call.return_data[0]:
                    if wantLockedTotal >= ext_call.return_data[0]:
                        if ext_call.return_data[0] > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal -= ext_call.return_data[0]
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[516 len 4]
                    else:
                        if wantLockedTotal > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal = 0
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, 0, stor16.field_0), mem[516 len 4]
                else:
                    if wantLockedTotal < arg2:
                        if wantLockedTotal > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal = 0
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, 0, stor16.field_0), mem[516 len 4]
                    else:
                        if arg2 > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal -= arg2
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 32, arg2) >> 32
                        mem[516 len 0] = 0
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 224, mem[516 len 4]
            else:
                require ext_code.size(farmContractAddress)
                if not uint8(stor2.field_8):
                    call farmContractAddress.0x441a3e70 with:
                         gas gas_remaining wei
                        args pid, arg2
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if arg2 <= ext_call.return_data[0]:
                        if wantLockedTotal >= arg2:
                            if arg2 > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal -= arg2
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 32, arg2) >> 32
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 224, mem[516 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[516 len 4]
                    else:
                        if wantLockedTotal >= ext_call.return_data[0]:
                            if ext_call.return_data[0] > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal -= ext_call.return_data[0]
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[516 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[516 len 4]
                else:
                    call farmContractAddress.leaveStaking(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg2
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if arg2 <= ext_call.return_data[0]:
                        if wantLockedTotal >= arg2:
                            if arg2 > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal -= arg2
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 32, arg2) >> 32
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 224, mem[516 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[516 len 4]
                    else:
                        if wantLockedTotal < ext_call.return_data[0]:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[516 len 4]
                        else:
                            if ext_call.return_data[0] > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal -= ext_call.return_data[0]
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                            mem[516 len 0] = 0
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[516 len 4]
            if not return_data.size:
                require not ext_call.success
                revert with 'SafeMath: division by zero'
            mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                if return_data.size:
                    revert with ext_call.return_data[0 len return_data.size]
                revert with 0, 'SafeERC20: low-level call failed'
            if return_data.size:
                require return_data.size >= 32
                if not mem[484]:
                    revert with 0, 
                                32,
                                42,
                                0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                mem[ceil32(return_data.size) + 563 len 22]
        else:
            if not arg2:
                if not uint8(stor2.field_16):
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 0 > ext_call.return_data[0]:
                        if wantLockedTotal >= ext_call.return_data[0]:
                            if ext_call.return_data[0] > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal -= ext_call.return_data[0]
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[580 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[580 len 4]
                    else:
                        if wantLockedTotal >= 0:
                            if 0 > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), 0
                            mem[580 len 0] = 0
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, -256, unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), 0) << 256, mem[580 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            mem[580 len 0] = 0
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[580 len 4]
                else:
                    require ext_code.size(farmContractAddress)
                    if not uint8(stor2.field_8):
                        call farmContractAddress.0x441a3e70 with:
                             gas gas_remaining wei
                            args pid, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if 0 > ext_call.return_data[0]:
                            if wantLockedTotal >= ext_call.return_data[0]:
                                if ext_call.return_data[0] > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal -= ext_call.return_data[0]
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[580 len 4]
                            else:
                                if wantLockedTotal > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal = 0
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(480, 0, stor16.field_0), mem[580 len 4]
                        else:
                            if wantLockedTotal >= 0:
                                if 0 > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), 0
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args 0, mem[580 len 4]
                            else:
                                if wantLockedTotal > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal = 0
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                                mem[580 len 0] = 0
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(480, 0, stor16.field_0), mem[580 len 4]
                    else:
                        call farmContractAddress.leaveStaking(uint256 arg1) with:
                             gas gas_remaining wei
                            args 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if 0 > ext_call.return_data[0]:
                            if wantLockedTotal >= ext_call.return_data[0]:
                                if ext_call.return_data[0] > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal -= ext_call.return_data[0]
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[580 len 4]
                            else:
                                if wantLockedTotal > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal = 0
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(480, 0, stor16.field_0), mem[580 len 4]
                        else:
                            if wantLockedTotal >= 0:
                                if 0 > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), 0
                                mem[580 len 0] = 0
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(480, -256, unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), 0) << 256, mem[580 len 4]
                            else:
                                if wantLockedTotal > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal = 0
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                                mem[580 len 0] = 0
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(480, 0, stor16.field_0), mem[580 len 4]
            else:
                if withdrawFeeFactor * arg2 / arg2 != withdrawFeeFactor:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                if not uint8(stor2.field_16):
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if withdrawFeeFactor * arg2 / 10000 <= ext_call.return_data[0]:
                        if wantLockedTotal >= withdrawFeeFactor * arg2 / 10000:
                            if withdrawFeeFactor * arg2 / 10000 > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal -= withdrawFeeFactor * arg2 / 10000
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 32, withdrawFeeFactor * arg2 / 10000) >> 32
                            mem[580 len 0] = 0
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(224, 32, withdrawFeeFactor * arg2 / 10000) << 224, mem[580 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            mem[580 len 0] = 0
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[580 len 4]
                    else:
                        if wantLockedTotal < ext_call.return_data[0]:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[580 len 4]
                        else:
                            if ext_call.return_data[0] > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal -= ext_call.return_data[0]
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                            mem[580 len 0] = 0
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[580 len 4]
                else:
                    require ext_code.size(farmContractAddress)
                    if not uint8(stor2.field_8):
                        call farmContractAddress.0x441a3e70 with:
                             gas gas_remaining wei
                            args pid, withdrawFeeFactor * arg2 / 10000
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if withdrawFeeFactor * arg2 / 10000 <= ext_call.return_data[0]:
                            if wantLockedTotal >= withdrawFeeFactor * arg2 / 10000:
                                if withdrawFeeFactor * arg2 / 10000 > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal -= withdrawFeeFactor * arg2 / 10000
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 32, withdrawFeeFactor * arg2 / 10000) >> 32
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(224, 32, withdrawFeeFactor * arg2 / 10000) << 224, mem[580 len 4]
                            else:
                                if wantLockedTotal > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal = 0
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(480, 0, stor16.field_0), mem[580 len 4]
                        else:
                            if wantLockedTotal >= ext_call.return_data[0]:
                                if ext_call.return_data[0] > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal -= ext_call.return_data[0]
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                                mem[580 len 0] = 0
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[580 len 4]
                            else:
                                if wantLockedTotal > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal = 0
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                                mem[580 len 0] = 0
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(480, 0, stor16.field_0), mem[580 len 4]
                    else:
                        call farmContractAddress.leaveStaking(uint256 arg1) with:
                             gas gas_remaining wei
                            args (withdrawFeeFactor * arg2 / 10000)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(wantAddress)
                        staticcall wantAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if withdrawFeeFactor * arg2 / 10000 > ext_call.return_data[0]:
                            if wantLockedTotal >= ext_call.return_data[0]:
                                if ext_call.return_data[0] > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal -= ext_call.return_data[0]
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[580 len 4]
                            else:
                                if wantLockedTotal > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal = 0
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(480, 0, stor16.field_0), mem[580 len 4]
                        else:
                            if wantLockedTotal >= withdrawFeeFactor * arg2 / 10000:
                                if withdrawFeeFactor * arg2 / 10000 > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal -= withdrawFeeFactor * arg2 / 10000
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 32, withdrawFeeFactor * arg2 / 10000) >> 32
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(224, 32, withdrawFeeFactor * arg2 / 10000) << 224, mem[580 len 4]
                            else:
                                if wantLockedTotal > wantLockedTotal:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                wantLockedTotal = 0
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                                if not ext_code.size(wantAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                                mem[580 len 0] = 0
                                call wantAddress with:
                                   funct uint32(stor12)
                                     gas gas_remaining wei
                                    args Mask(480, 0, stor16.field_0), mem[580 len 4]
            if not return_data.size:
                require not ext_call.success
                revert with 'SafeMath: division by zero'
            mem[548 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                if return_data.size:
                    revert with ext_call.return_data[0 len return_data.size]
                revert with 0, 'SafeERC20: low-level call failed'
            if return_data.size:
                require return_data.size >= 32
                if not mem[548]:
                    revert with 0, 
                                32,
                                42,
                                0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                mem[ceil32(return_data.size) + 627 len 22]
        stor1 = 1
        return (sharesTotal * arg2 / wantLockedTotal)
    if sharesTotal > sharesTotal:
        revert with 0, 'SafeMath: subtraction overflow'
    sharesTotal = 0
    if 10000 <= withdrawFeeFactor:
        if not uint8(stor2.field_16):
            require ext_code.size(wantAddress)
            staticcall wantAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if arg2 > ext_call.return_data[0]:
                if wantLockedTotal >= ext_call.return_data[0]:
                    if ext_call.return_data[0] > wantLockedTotal:
                        revert with 0, 'SafeMath: subtraction overflow'
                    wantLockedTotal -= ext_call.return_data[0]
                    if eth.balance(this.address) < 0:
                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                    if not ext_code.size(wantAddress):
                        revert with 0, 'Address: call to non-contract'
                    mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                    call wantAddress with:
                       funct uint32(stor12)
                         gas gas_remaining wei
                        args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[516 len 4]
                else:
                    if wantLockedTotal > wantLockedTotal:
                        revert with 0, 'SafeMath: subtraction overflow'
                    wantLockedTotal = 0
                    if eth.balance(this.address) < 0:
                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                    if not ext_code.size(wantAddress):
                        revert with 0, 'Address: call to non-contract'
                    mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                    call wantAddress with:
                       funct uint32(stor12)
                         gas gas_remaining wei
                        args Mask(480, 0, stor16.field_0), mem[516 len 4]
            else:
                if wantLockedTotal >= arg2:
                    if arg2 > wantLockedTotal:
                        revert with 0, 'SafeMath: subtraction overflow'
                    wantLockedTotal -= arg2
                    if eth.balance(this.address) < 0:
                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                    if not ext_code.size(wantAddress):
                        revert with 0, 'Address: call to non-contract'
                    mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 32, arg2) >> 32
                    mem[516 len 0] = 0
                    call wantAddress with:
                       funct uint32(stor12)
                         gas gas_remaining wei
                        args Mask(224, 32, arg2) << 224, mem[516 len 4]
                else:
                    if wantLockedTotal > wantLockedTotal:
                        revert with 0, 'SafeMath: subtraction overflow'
                    wantLockedTotal = 0
                    if eth.balance(this.address) < 0:
                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                    if not ext_code.size(wantAddress):
                        revert with 0, 'Address: call to non-contract'
                    mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                    mem[516 len 0] = 0
                    call wantAddress with:
                       funct uint32(stor12)
                         gas gas_remaining wei
                        args Mask(480, 0, stor16.field_0), mem[516 len 4]
        else:
            require ext_code.size(farmContractAddress)
            if not uint8(stor2.field_8):
                call farmContractAddress.0x441a3e70 with:
                     gas gas_remaining wei
                    args pid, arg2
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if arg2 <= ext_call.return_data[0]:
                    if wantLockedTotal >= arg2:
                        if arg2 > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal -= arg2
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 32, arg2) >> 32
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 224, mem[516 len 4]
                    else:
                        if wantLockedTotal > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal = 0
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, 0, stor16.field_0), mem[516 len 4]
                else:
                    if wantLockedTotal >= ext_call.return_data[0]:
                        if ext_call.return_data[0] > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal -= ext_call.return_data[0]
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[516 len 4]
                    else:
                        if wantLockedTotal > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal = 0
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, 0, stor16.field_0), mem[516 len 4]
            else:
                call farmContractAddress.leaveStaking(uint256 arg1) with:
                     gas gas_remaining wei
                    args arg2
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if arg2 <= ext_call.return_data[0]:
                    if wantLockedTotal < arg2:
                        if wantLockedTotal > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal = 0
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, 0, stor16.field_0), mem[516 len 4]
                    else:
                        if arg2 > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal -= arg2
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 32, arg2) >> 32
                        mem[516 len 0] = 0
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 224, mem[516 len 4]
                else:
                    if wantLockedTotal < ext_call.return_data[0]:
                        if wantLockedTotal > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal = 0
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, 0, stor16.field_0), mem[516 len 4]
                    else:
                        if ext_call.return_data[0] > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal -= ext_call.return_data[0]
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[558 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                        mem[516 len 0] = 0
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[516 len 4]
        if not return_data.size:
            require not ext_call.success
            revert with 'SafeMath: division by zero'
        mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            if not mem[484]:
                revert with 0, 
                            32,
                            42,
                            0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 563 len 22]
    else:
        if not arg2:
            if not uint8(stor2.field_16):
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 0 <= ext_call.return_data[0]:
                    if wantLockedTotal >= 0:
                        if 0 > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), 0
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args 0, mem[580 len 4]
                    else:
                        if wantLockedTotal > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal = 0
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, 0, stor16.field_0), mem[580 len 4]
                else:
                    if wantLockedTotal >= ext_call.return_data[0]:
                        if ext_call.return_data[0] > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal -= ext_call.return_data[0]
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[580 len 4]
                    else:
                        if wantLockedTotal > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal = 0
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, 0, stor16.field_0), mem[580 len 4]
            else:
                require ext_code.size(farmContractAddress)
                if not uint8(stor2.field_8):
                    call farmContractAddress.0x441a3e70 with:
                         gas gas_remaining wei
                        args pid, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 0 <= ext_call.return_data[0]:
                        if wantLockedTotal >= 0:
                            if 0 > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), 0
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args 0, mem[580 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[580 len 4]
                    else:
                        if wantLockedTotal >= ext_call.return_data[0]:
                            if ext_call.return_data[0] > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal -= ext_call.return_data[0]
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[580 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[580 len 4]
                else:
                    call farmContractAddress.leaveStaking(uint256 arg1) with:
                         gas gas_remaining wei
                        args 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 0 <= ext_call.return_data[0]:
                        if wantLockedTotal >= 0:
                            if 0 > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), 0
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args 0, mem[580 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[580 len 4]
                    else:
                        if wantLockedTotal >= ext_call.return_data[0]:
                            if ext_call.return_data[0] > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal -= ext_call.return_data[0]
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[580 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            mem[580 len 0] = 0
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[580 len 4]
        else:
            if withdrawFeeFactor * arg2 / arg2 != withdrawFeeFactor:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if not uint8(stor2.field_16):
                require ext_code.size(wantAddress)
                staticcall wantAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if withdrawFeeFactor * arg2 / 10000 <= ext_call.return_data[0]:
                    if wantLockedTotal >= withdrawFeeFactor * arg2 / 10000:
                        if withdrawFeeFactor * arg2 / 10000 > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal -= withdrawFeeFactor * arg2 / 10000
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 32, withdrawFeeFactor * arg2 / 10000) >> 32
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(224, 32, withdrawFeeFactor * arg2 / 10000) << 224, mem[580 len 4]
                    else:
                        if wantLockedTotal > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal = 0
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, 0, stor16.field_0), mem[580 len 4]
                else:
                    if wantLockedTotal >= ext_call.return_data[0]:
                        if ext_call.return_data[0] > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal -= ext_call.return_data[0]
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[580 len 4]
                    else:
                        if wantLockedTotal > wantLockedTotal:
                            revert with 0, 'SafeMath: subtraction overflow'
                        wantLockedTotal = 0
                        if eth.balance(this.address) < 0:
                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                        if not ext_code.size(wantAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                        mem[580 len 0] = 0
                        call wantAddress with:
                           funct uint32(stor12)
                             gas gas_remaining wei
                            args Mask(480, 0, stor16.field_0), mem[580 len 4]
            else:
                require ext_code.size(farmContractAddress)
                if not uint8(stor2.field_8):
                    call farmContractAddress.0x441a3e70 with:
                         gas gas_remaining wei
                        args pid, withdrawFeeFactor * arg2 / 10000
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if withdrawFeeFactor * arg2 / 10000 > ext_call.return_data[0]:
                        if wantLockedTotal >= ext_call.return_data[0]:
                            if ext_call.return_data[0] > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal -= ext_call.return_data[0]
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[580 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[580 len 4]
                    else:
                        if wantLockedTotal >= withdrawFeeFactor * arg2 / 10000:
                            if withdrawFeeFactor * arg2 / 10000 > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal -= withdrawFeeFactor * arg2 / 10000
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 32, withdrawFeeFactor * arg2 / 10000) >> 32
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(224, 32, withdrawFeeFactor * arg2 / 10000) << 224, mem[580 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            mem[580 len 0] = 0
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[580 len 4]
                else:
                    call farmContractAddress.leaveStaking(uint256 arg1) with:
                         gas gas_remaining wei
                        args (withdrawFeeFactor * arg2 / 10000)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(wantAddress)
                    staticcall wantAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if withdrawFeeFactor * arg2 / 10000 <= ext_call.return_data[0]:
                        if wantLockedTotal >= withdrawFeeFactor * arg2 / 10000:
                            if withdrawFeeFactor * arg2 / 10000 > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal -= withdrawFeeFactor * arg2 / 10000
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 32, withdrawFeeFactor * arg2 / 10000) >> 32
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(224, 32, withdrawFeeFactor * arg2 / 10000) << 224, mem[580 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            mem[580 len 0] = 0
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[580 len 4]
                    else:
                        if wantLockedTotal >= ext_call.return_data[0]:
                            if ext_call.return_data[0] > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal -= ext_call.return_data[0]
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), ext_call.return_data[0 len 28]
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[580 len 4]
                        else:
                            if wantLockedTotal > wantLockedTotal:
                                revert with 0, 'SafeMath: subtraction overflow'
                            wantLockedTotal = 0
                            if eth.balance(this.address) < 0:
                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[622 len 26]
                            if not ext_code.size(wantAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[516 len 64] = unknown_0xa9059cbb(?????), Mask(224, 0, stor12), uint32(stor12), Mask(224, 0, stor16.field_32)
                            mem[580 len 0] = 0
                            call wantAddress with:
                               funct uint32(stor12)
                                 gas gas_remaining wei
                                args Mask(480, 0, stor16.field_0), mem[580 len 4]
        if not return_data.size:
            require not ext_call.success
            revert with 'SafeMath: division by zero'
        mem[548 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            if not mem[548]:
                revert with 0, 
                            32,
                            42,
                            0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 627 len 22]
    stor1 = 1
    return sharesTotal
}

function convertDustToEarned() payable {
    if uint8(stor2.field_0):
        revert with 0, 'Pausable: paused'
    if not uint8(stor2.field_16):
        revert with 0, '!isAutoComp'
    if uint8(stor2.field_8):
        revert with 0, 'isSingleVault'
    require ext_code.size(token0Address)
    staticcall token0Address.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if earnedAddress == token0Address:
        require ext_code.size(token1Address)
        staticcall token1Address.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if earnedAddress != token1Address:
            if ext_call.return_data[0] > 0:
                require ext_code.size(token1Address)
                staticcall token1Address.0xdd62ed3e with:
                        gas gas_remaining wei
                       args address(this.address), address(uniRouterAddress)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                mem[132] = address(uniRouterAddress)
                mem[164] = 2 * ext_call.return_data[0]
                mem[96] = 68
                mem[132 len 28] = Mask(224, 0, stor8)
                mem[128 len 4] = approve(address arg1, uint256 arg2)
                mem[196] = 32
                mem[228] = 'SafeERC20: low-level call failed'
                if eth.balance(this.address) < 0:
                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                if not ext_code.size(token1Address):
                    revert with 0, 'Address: call to non-contract'
                mem[260 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                mem[352 len 4] = 0
                call token1Address with:
                   funct uint32(stor8)
                     gas gas_remaining wei
                    args Mask(224, 31, ext_call.return_data[0]) << 225, mem[324 len 4]
                if not return_data.size:
                    if not ext_call.success:
                        revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                    if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                        revert with 0, 32, 42, 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
                    mem[260] = token1ToEarnedPath.length
                    if not token1ToEarnedPath.length:
                        mem[(32 * token1ToEarnedPath.length) + 292] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[(32 * token1ToEarnedPath.length) + 296] = ext_call.return_data[0]
                        mem[(32 * token1ToEarnedPath.length) + 328] = 64
                        mem[(32 * token1ToEarnedPath.length) + 360] = token1ToEarnedPath.length
                        mem[(32 * token1ToEarnedPath.length) + 392 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                        require ext_code.size(address(uniRouterAddress))
                        staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 392 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[(32 * token1ToEarnedPath.length) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292
                        require return_data.size >= 32
                        _8273 = mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28]
                        require mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] <= 4294967296
                        require mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                        require mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292] <= 4294967296 and mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]) + 32 <= return_data.size
                        mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] = mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]
                        _8331 = mem[(32 * token1ToEarnedPath.length) + _8273 + 292]
                        mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324 len floor32(mem[(32 * token1ToEarnedPath.length) + _8273 + 292])] = mem[(32 * token1ToEarnedPath.length) + _8273 + 324 len floor32(mem[(32 * token1ToEarnedPath.length) + _8273 + 292])]
                        mem[(32 * _8331) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] = 30
                        mem[(32 * _8331) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 356] = 'SafeMath: subtraction overflow'
                        if 1 > mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1 < mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292]
                        _12404 = mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324]
                        if not mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324]:
                            mem[(32 * _8331) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * _8331) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 648 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                        else:
                            if slippageFactor * mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] / mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] != slippageFactor:
                                revert with 0, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[(32 * _8331) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 489 len 31]
                            mem[(32 * _8331) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args ext_call.return_data[0], slippageFactor * _12404 / 1000, Array(len=token1ToEarnedPath.length, data=mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * _8331) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 648 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                    else:
                        mem[0] = 28
                        mem[292] = address(token1ToEarnedPath.field_0)
                        if (32 * token1ToEarnedPath.length) + 32 <= 64:
                            mem[(32 * token1ToEarnedPath.length) + 292] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[(32 * token1ToEarnedPath.length) + 296] = ext_call.return_data[0]
                            mem[(32 * token1ToEarnedPath.length) + 328] = 64
                            mem[(32 * token1ToEarnedPath.length) + 360] = token1ToEarnedPath.length
                            mem[(32 * token1ToEarnedPath.length) + 392 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 392 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[(32 * token1ToEarnedPath.length) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292
                            require return_data.size >= 32
                            _8275 = mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28]
                            require mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] <= 4294967296
                            require mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                            require mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292] <= 4294967296 and mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]) + 32 <= return_data.size
                            mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] = mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]
                            _8332 = mem[(32 * token1ToEarnedPath.length) + _8275 + 292]
                            mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324 len floor32(mem[(32 * token1ToEarnedPath.length) + _8275 + 292])] = mem[(32 * token1ToEarnedPath.length) + _8275 + 324 len floor32(mem[(32 * token1ToEarnedPath.length) + _8275 + 292])]
                            mem[(32 * _8332) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] = 30
                            mem[(32 * _8332) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 356] = 'SafeMath: subtraction overflow'
                            if 1 > mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1 < mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292]
                            _12408 = mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324]
                            if not mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324]:
                                mem[(32 * _8332) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * _8332) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 648 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                            else:
                                if slippageFactor * mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] / mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] != slippageFactor:
                                    revert with 0, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[(32 * _8332) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 489 len 31]
                                mem[(32 * _8332) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args ext_call.return_data[0], slippageFactor * _12408 / 1000, Array(len=token1ToEarnedPath.length, data=mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * _8332) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 648 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                        else:
                            mem[324] = address(token1ToEarnedPath.field_256)
                            idx = 324
                            s = 1
                            while (32 * token1ToEarnedPath.length) + 260 > idx:
                                mem[idx + 32] = token1ToEarnedPath[s].field_256
                                idx = idx + 32
                                s = s + 1
                                continue 
                            mem[(32 * token1ToEarnedPath.length) + 292] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[(32 * token1ToEarnedPath.length) + 296] = ext_call.return_data[0]
                            mem[(32 * token1ToEarnedPath.length) + 328] = 64
                            mem[(32 * token1ToEarnedPath.length) + 360] = token1ToEarnedPath.length
                            mem[(32 * token1ToEarnedPath.length) + 392 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 392 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[(32 * token1ToEarnedPath.length) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292
                            require return_data.size >= 32
                            _19563 = mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28]
                            require mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] <= 4294967296
                            require mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                            require mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292] <= 4294967296 and mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]) + 32 <= return_data.size
                            mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] = mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]
                            _19622 = mem[(32 * token1ToEarnedPath.length) + _19563 + 292]
                            mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324 len floor32(mem[(32 * token1ToEarnedPath.length) + _19563 + 292])] = mem[(32 * token1ToEarnedPath.length) + _19563 + 324 len floor32(mem[(32 * token1ToEarnedPath.length) + _19563 + 292])]
                            mem[(32 * _19622) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] = 30
                            mem[(32 * _19622) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 356] = 'SafeMath: subtraction overflow'
                            if 1 > mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1 < mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292]
                            _26476 = mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324]
                            if not mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324]:
                                mem[(32 * _19622) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * _19622) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 648 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                            else:
                                if slippageFactor * mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] / mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] != slippageFactor:
                                    revert with 0, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[(32 * _19622) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 489 len 31]
                                mem[(32 * _19622) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args ext_call.return_data[0], slippageFactor * _26476 / 1000, Array(len=token1ToEarnedPath.length, data=mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * _19622) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 648 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                else:
                    mem[260] = return_data.size
                    mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if not return_data.size:
                        mem[ceil32(return_data.size) + 261] = token1ToEarnedPath.length
                        if not token1ToEarnedPath.length:
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 297] = ext_call.return_data[0]
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 329] = 64
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 361] = token1ToEarnedPath.length
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 393 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 393 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293
                            require return_data.size >= 32
                            _8277 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                            require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                            require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                            require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                            _8333 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8277 + 293]
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8277 + 293])] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8277 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8277 + 293])]
                            mem[64] = (32 * _8333) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 389
                            mem[(32 * _8333) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                            mem[(32 * _8333) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                            if 1 > mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]
                            _12411 = mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]
                            if not mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                                mem[(32 * _8333) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8333) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                            else:
                                if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                    revert with 0, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[(32 * _8333) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                                mem[(32 * _8333) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args ext_call.return_data[0], slippageFactor * _12411 / 1000, Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8333) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                        else:
                            mem[0] = 28
                            mem[ceil32(return_data.size) + 293] = address(token1ToEarnedPath.field_0)
                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 297] = ext_call.return_data[0]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 329] = 64
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 361] = token1ToEarnedPath.length
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 393 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 393 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293
                                require return_data.size >= 32
                                _8279 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                                _8334 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8279 + 293]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8279 + 293])] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8279 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8279 + 293])]
                                mem[64] = (32 * _8334) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 389
                                mem[(32 * _8334) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                                mem[(32 * _8334) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                                if 1 > mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]
                                _12415 = mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]
                                if not mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                                    mem[(32 * _8334) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8334) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                else:
                                    if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(32 * _8334) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                                    mem[(32 * _8334) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], slippageFactor * _12415 / 1000, Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8334) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                            else:
                                mem[ceil32(return_data.size) + 325] = address(token1ToEarnedPath.field_256)
                                idx = ceil32(return_data.size) + 325
                                s = 1
                                while ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 261 > idx:
                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 297] = ext_call.return_data[0]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 329] = 64
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 361] = token1ToEarnedPath.length
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 393 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 393 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293
                                require return_data.size >= 32
                                _19565 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                                _19623 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19565 + 293]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19565 + 293])] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19565 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19565 + 293])]
                                mem[64] = (32 * _19623) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 389
                                mem[(32 * _19623) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                                mem[(32 * _19623) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                                if 1 > mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]
                                _26479 = mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]
                                if not mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                                    mem[(32 * _19623) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _19623) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                else:
                                    if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(32 * _19623) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                                    mem[(32 * _19623) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], slippageFactor * _26479 / 1000, Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _19623) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                    else:
                        require return_data.size >= 32
                        if not mem[292]:
                            revert with 0, 
                                        32,
                                        42,
                                        0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                        mem[ceil32(return_data.size) + 371 len 22]
                        mem[ceil32(return_data.size) + 261] = token1ToEarnedPath.length
                        if not token1ToEarnedPath.length:
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 297] = ext_call.return_data[0]
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 329] = 64
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 361] = token1ToEarnedPath.length
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 393 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 393 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293
                            require return_data.size >= 32
                            _8281 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                            require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                            require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                            require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                            _8335 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8281 + 293]
                            mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8281 + 293])] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8281 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8281 + 293])]
                            mem[64] = (32 * _8335) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 389
                            mem[(32 * _8335) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                            mem[(32 * _8335) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                            if 1 > mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]
                            _12418 = mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]
                            if not mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                                mem[(32 * _8335) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8335) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                            else:
                                if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                    revert with 0, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[(32 * _8335) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                                mem[(32 * _8335) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args ext_call.return_data[0], slippageFactor * _12418 / 1000, Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8335) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                        else:
                            mem[0] = 28
                            mem[ceil32(return_data.size) + 293] = address(token1ToEarnedPath.field_0)
                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 297] = ext_call.return_data[0]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 329] = 64
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 361] = token1ToEarnedPath.length
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 393 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 393 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293
                                require return_data.size >= 32
                                _8283 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                                _8336 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8283 + 293]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8283 + 293])] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8283 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8283 + 293])]
                                mem[64] = (32 * _8336) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 389
                                mem[(32 * _8336) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                                mem[(32 * _8336) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                                if 1 > mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]
                                _12422 = mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]
                                if not mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                                    mem[(32 * _8336) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8336) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                else:
                                    if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(32 * _8336) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                                    mem[(32 * _8336) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], slippageFactor * _12422 / 1000, Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8336) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                            else:
                                mem[ceil32(return_data.size) + 325] = address(token1ToEarnedPath.field_256)
                                idx = ceil32(return_data.size) + 325
                                s = 1
                                while ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 261 > idx:
                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 297] = ext_call.return_data[0]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 329] = 64
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 361] = token1ToEarnedPath.length
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 393 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 393 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293
                                require return_data.size >= 32
                                _19567 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                                _19624 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19567 + 293]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19567 + 293])] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19567 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19567 + 293])]
                                mem[64] = (32 * _19624) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 389
                                mem[(32 * _19624) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                                mem[(32 * _19624) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                                if 1 > mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]
                                _26482 = mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]
                                if not mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                                    mem[(32 * _19624) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _19624) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                else:
                                    if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(32 * _19624) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                                    mem[(32 * _19624) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], slippageFactor * _26482 / 1000, Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _19624) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
    else:
        if ext_call.return_data[0] <= 0:
            require ext_code.size(token1Address)
            staticcall token1Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if earnedAddress != token1Address:
                if ext_call.return_data[0] > 0:
                    require ext_code.size(token1Address)
                    staticcall token1Address.0xdd62ed3e with:
                            gas gas_remaining wei
                           args address(this.address), address(uniRouterAddress)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    mem[132] = address(uniRouterAddress)
                    mem[164] = 2 * ext_call.return_data[0]
                    mem[96] = 68
                    mem[132 len 28] = Mask(224, 0, stor8)
                    mem[128 len 4] = approve(address arg1, uint256 arg2)
                    mem[196] = 32
                    mem[228] = 'SafeERC20: low-level call failed'
                    if eth.balance(this.address) < 0:
                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                    if not ext_code.size(token1Address):
                        revert with 0, 'Address: call to non-contract'
                    mem[260 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                    mem[352 len 4] = 0
                    call token1Address with:
                       funct uint32(stor8)
                         gas gas_remaining wei
                        args Mask(224, 31, ext_call.return_data[0]) << 225, mem[324 len 4]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                        if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                            revert with 0, 32, 42, 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
                        mem[260] = token1ToEarnedPath.length
                        if not token1ToEarnedPath.length:
                            mem[(32 * token1ToEarnedPath.length) + 292] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[(32 * token1ToEarnedPath.length) + 296] = ext_call.return_data[0]
                            mem[(32 * token1ToEarnedPath.length) + 328] = 64
                            mem[(32 * token1ToEarnedPath.length) + 360] = token1ToEarnedPath.length
                            mem[(32 * token1ToEarnedPath.length) + 392 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 392 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[(32 * token1ToEarnedPath.length) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292
                            require return_data.size >= 32
                            _8289 = mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28]
                            require mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] <= 4294967296
                            require mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                            require mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292] <= 4294967296 and mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]) + 32 <= return_data.size
                            mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] = mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]
                            _8339 = mem[(32 * token1ToEarnedPath.length) + _8289 + 292]
                            mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324 len floor32(mem[(32 * token1ToEarnedPath.length) + _8289 + 292])] = mem[(32 * token1ToEarnedPath.length) + _8289 + 324 len floor32(mem[(32 * token1ToEarnedPath.length) + _8289 + 292])]
                            mem[(32 * _8339) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] = 30
                            mem[(32 * _8339) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 356] = 'SafeMath: subtraction overflow'
                            if 1 > mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1 < mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292]
                            _12432 = mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324]
                            if not mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324]:
                                mem[(32 * _8339) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * _8339) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 648 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                            else:
                                if slippageFactor * mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] / mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] != slippageFactor:
                                    revert with 0, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[(32 * _8339) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 489 len 31]
                                mem[(32 * _8339) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args ext_call.return_data[0], slippageFactor * _12432 / 1000, Array(len=token1ToEarnedPath.length, data=mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * _8339) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 648 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                        else:
                            mem[0] = 28
                            mem[292] = address(token1ToEarnedPath.field_0)
                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                mem[(32 * token1ToEarnedPath.length) + 292] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[(32 * token1ToEarnedPath.length) + 296] = ext_call.return_data[0]
                                mem[(32 * token1ToEarnedPath.length) + 328] = 64
                                mem[(32 * token1ToEarnedPath.length) + 360] = token1ToEarnedPath.length
                                mem[(32 * token1ToEarnedPath.length) + 392 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 392 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * token1ToEarnedPath.length) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292
                                require return_data.size >= 32
                                _8291 = mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28]
                                require mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                require mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                require mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292] <= 4294967296 and mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]) + 32 <= return_data.size
                                mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] = mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]
                                _8340 = mem[(32 * token1ToEarnedPath.length) + _8291 + 292]
                                mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324 len floor32(mem[(32 * token1ToEarnedPath.length) + _8291 + 292])] = mem[(32 * token1ToEarnedPath.length) + _8291 + 324 len floor32(mem[(32 * token1ToEarnedPath.length) + _8291 + 292])]
                                mem[(32 * _8340) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] = 30
                                mem[(32 * _8340) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 356] = 'SafeMath: subtraction overflow'
                                if 1 > mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1 < mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292]
                                _12436 = mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324]
                                if not mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324]:
                                    mem[(32 * _8340) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * _8340) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 648 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                else:
                                    if slippageFactor * mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] / mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] != slippageFactor:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(32 * _8340) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 489 len 31]
                                    mem[(32 * _8340) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], slippageFactor * _12436 / 1000, Array(len=token1ToEarnedPath.length, data=mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * _8340) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 648 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                            else:
                                mem[324] = address(token1ToEarnedPath.field_256)
                                idx = 324
                                s = 1
                                while (32 * token1ToEarnedPath.length) + 260 > idx:
                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                    idx = idx + 32
                                    s = s + 1
                                    continue 
                                mem[(32 * token1ToEarnedPath.length) + 292] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[(32 * token1ToEarnedPath.length) + 296] = ext_call.return_data[0]
                                mem[(32 * token1ToEarnedPath.length) + 328] = 64
                                mem[(32 * token1ToEarnedPath.length) + 360] = token1ToEarnedPath.length
                                mem[(32 * token1ToEarnedPath.length) + 392 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 392 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(32 * token1ToEarnedPath.length) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292
                                require return_data.size >= 32
                                _19571 = mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28]
                                require mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                require mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                require mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292] <= 4294967296 and mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]) + 32 <= return_data.size
                                mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] = mem[(32 * token1ToEarnedPath.length) + mem[(32 * token1ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]
                                _19626 = mem[(32 * token1ToEarnedPath.length) + _19571 + 292]
                                mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324 len floor32(mem[(32 * token1ToEarnedPath.length) + _19571 + 292])] = mem[(32 * token1ToEarnedPath.length) + _19571 + 324 len floor32(mem[(32 * token1ToEarnedPath.length) + _19571 + 292])]
                                mem[(32 * _19626) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] = 30
                                mem[(32 * _19626) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 356] = 'SafeMath: subtraction overflow'
                                if 1 > mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1 < mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292]
                                _26488 = mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324]
                                if not mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324]:
                                    mem[(32 * _19626) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * _19626) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 648 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                else:
                                    if slippageFactor * mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] / mem[(32 * mem[(32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 324] != slippageFactor:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(32 * _19626) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 489 len 31]
                                    mem[(32 * _19626) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)] = mem[292 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], slippageFactor * _26488 / 1000, Array(len=token1ToEarnedPath.length, data=mem[292 len floor32(token1ToEarnedPath.length)], mem[(32 * _19626) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 648 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                    else:
                        mem[260] = return_data.size
                        mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            if return_data.size:
                                revert with ext_call.return_data[0 len return_data.size]
                            revert with 0, 'SafeERC20: low-level call failed'
                        if not return_data.size:
                            mem[ceil32(return_data.size) + 261] = token1ToEarnedPath.length
                            if not token1ToEarnedPath.length:
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 297] = ext_call.return_data[0]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 329] = 64
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 361] = token1ToEarnedPath.length
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 393 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 393 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293
                                require return_data.size >= 32
                                _8293 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                                _8341 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8293 + 293]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8293 + 293])] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8293 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8293 + 293])]
                                mem[64] = (32 * _8341) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 389
                                mem[(32 * _8341) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                                mem[(32 * _8341) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                                if 1 > mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]
                                _12439 = mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]
                                if not mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                                    mem[(32 * _8341) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8341) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                else:
                                    if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(32 * _8341) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                                    mem[(32 * _8341) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], slippageFactor * _12439 / 1000, Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8341) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                            else:
                                mem[0] = 28
                                mem[ceil32(return_data.size) + 293] = address(token1ToEarnedPath.field_0)
                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 297] = ext_call.return_data[0]
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 329] = 64
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 361] = token1ToEarnedPath.length
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 393 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                            gas gas_remaining wei
                                           args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 393 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293
                                    require return_data.size >= 32
                                    _8295 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                                    _8342 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8295 + 293]
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8295 + 293])] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8295 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8295 + 293])]
                                    mem[64] = (32 * _8342) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 389
                                    mem[(32 * _8342) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                                    mem[(32 * _8342) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                                    if 1 > mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]
                                    _12443 = mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]
                                    if not mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                                        mem[(32 * _8342) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                        require ext_code.size(address(uniRouterAddress))
                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8342) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                    else:
                                        if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(32 * _8342) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                                        mem[(32 * _8342) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                        require ext_code.size(address(uniRouterAddress))
                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], slippageFactor * _12443 / 1000, Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8342) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                else:
                                    mem[ceil32(return_data.size) + 325] = address(token1ToEarnedPath.field_256)
                                    idx = ceil32(return_data.size) + 325
                                    s = 1
                                    while ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 261 > idx:
                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                        idx = idx + 32
                                        s = s + 1
                                        continue 
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 297] = ext_call.return_data[0]
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 329] = 64
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 361] = token1ToEarnedPath.length
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 393 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                            gas gas_remaining wei
                                           args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 393 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293
                                    require return_data.size >= 32
                                    _19573 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                                    _19627 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19573 + 293]
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19573 + 293])] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19573 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19573 + 293])]
                                    mem[64] = (32 * _19627) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 389
                                    mem[(32 * _19627) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                                    mem[(32 * _19627) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                                    if 1 > mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]
                                    _26491 = mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]
                                    if not mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                                        mem[(32 * _19627) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                        require ext_code.size(address(uniRouterAddress))
                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _19627) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                    else:
                                        if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(32 * _19627) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                                        mem[(32 * _19627) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                        require ext_code.size(address(uniRouterAddress))
                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], slippageFactor * _26491 / 1000, Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _19627) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                        else:
                            require return_data.size >= 32
                            if not mem[292]:
                                revert with 0, 
                                            32,
                                            42,
                                            0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                            mem[ceil32(return_data.size) + 371 len 22]
                            mem[ceil32(return_data.size) + 261] = token1ToEarnedPath.length
                            if not token1ToEarnedPath.length:
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 297] = ext_call.return_data[0]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 329] = 64
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 361] = token1ToEarnedPath.length
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 393 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                require ext_code.size(address(uniRouterAddress))
                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 393 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293
                                require return_data.size >= 32
                                _8297 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                                _8343 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8297 + 293]
                                mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8297 + 293])] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8297 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8297 + 293])]
                                mem[64] = (32 * _8343) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 389
                                mem[(32 * _8343) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                                mem[(32 * _8343) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                                if 1 > mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]
                                _12446 = mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]
                                if not mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                                    mem[(32 * _8343) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8343) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                else:
                                    if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(32 * _8343) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                                    mem[(32 * _8343) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args ext_call.return_data[0], slippageFactor * _12446 / 1000, Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8343) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                            else:
                                mem[0] = 28
                                mem[ceil32(return_data.size) + 293] = address(token1ToEarnedPath.field_0)
                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 297] = ext_call.return_data[0]
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 329] = 64
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 361] = token1ToEarnedPath.length
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 393 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                            gas gas_remaining wei
                                           args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 393 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293
                                    require return_data.size >= 32
                                    _8299 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                                    _8344 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8299 + 293]
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8299 + 293])] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8299 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _8299 + 293])]
                                    mem[64] = (32 * _8344) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 389
                                    mem[(32 * _8344) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                                    mem[(32 * _8344) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                                    if 1 > mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]
                                    _12450 = mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]
                                    if not mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                                        mem[(32 * _8344) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                        require ext_code.size(address(uniRouterAddress))
                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8344) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                    else:
                                        if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(32 * _8344) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                                        mem[(32 * _8344) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                        require ext_code.size(address(uniRouterAddress))
                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], slippageFactor * _12450 / 1000, Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _8344) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                else:
                                    mem[ceil32(return_data.size) + 325] = address(token1ToEarnedPath.field_256)
                                    idx = ceil32(return_data.size) + 325
                                    s = 1
                                    while ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 261 > idx:
                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                        idx = idx + 32
                                        s = s + 1
                                        continue 
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 297] = ext_call.return_data[0]
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 329] = 64
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 361] = token1ToEarnedPath.length
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 393 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                    require ext_code.size(address(uniRouterAddress))
                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                            gas gas_remaining wei
                                           args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 393 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293
                                    require return_data.size >= 32
                                    _19575 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                                    _19628 = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19575 + 293]
                                    mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19575 + 293])] = mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19575 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _19575 + 293])]
                                    mem[64] = (32 * _19628) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 389
                                    mem[(32 * _19628) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                                    mem[(32 * _19628) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                                    if 1 > mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293]
                                    _26494 = mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]
                                    if not mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                                        mem[(32 * _19628) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                        require ext_code.size(address(uniRouterAddress))
                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _19628) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                    else:
                                        if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(32 * _19628) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                                        mem[(32 * _19628) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)]
                                        require ext_code.size(address(uniRouterAddress))
                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args ext_call.return_data[0], slippageFactor * _26494 / 1000, Array(len=token1ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token1ToEarnedPath.length)], mem[(32 * _19628) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + ceil32(return_data.size) + floor32(token1ToEarnedPath.length) + 649 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
        else:
            require ext_code.size(token0Address)
            staticcall token0Address.0xdd62ed3e with:
                    gas gas_remaining wei
                   args address(this.address), address(uniRouterAddress)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            mem[132] = address(uniRouterAddress)
            mem[164] = 2 * ext_call.return_data[0]
            mem[96] = 68
            mem[132 len 28] = Mask(224, 0, stor8)
            mem[128 len 4] = approve(address arg1, uint256 arg2)
            mem[196] = 32
            mem[228] = 'SafeERC20: low-level call failed'
            if eth.balance(this.address) < 0:
                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
            if not ext_code.size(token0Address):
                revert with 0, 'Address: call to non-contract'
            mem[260 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
            mem[352 len 4] = 0
            call token0Address with:
               funct uint32(stor8)
                 gas gas_remaining wei
                args Mask(224, 31, ext_call.return_data[0]) << 225, mem[324 len 4]
            if not return_data.size:
                if not ext_call.success:
                    revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                    revert with 0, 32, 42, 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
                mem[260] = token0ToEarnedPath.length
                if not token0ToEarnedPath.length:
                    mem[(32 * token0ToEarnedPath.length) + 292] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(32 * token0ToEarnedPath.length) + 296] = ext_call.return_data[0]
                    mem[(32 * token0ToEarnedPath.length) + 328] = 64
                    mem[(32 * token0ToEarnedPath.length) + 360] = token0ToEarnedPath.length
                    mem[(32 * token0ToEarnedPath.length) + 392 len floor32(token0ToEarnedPath.length)] = mem[292 len floor32(token0ToEarnedPath.length)]
                    require ext_code.size(address(uniRouterAddress))
                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args ext_call.return_data[0], Array(len=token0ToEarnedPath.length, data=mem[292 len floor32(token0ToEarnedPath.length)], mem[(32 * token0ToEarnedPath.length) + floor32(token0ToEarnedPath.length) + 392 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(32 * token0ToEarnedPath.length) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292
                    require return_data.size >= 32
                    _8303 = mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28]
                    require mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] <= 4294967296
                    require mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                    require mem[(32 * token0ToEarnedPath.length) + mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292] <= 4294967296 and mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * token0ToEarnedPath.length) + mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]) + 32 <= return_data.size
                    mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292] = mem[(32 * token0ToEarnedPath.length) + mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]
                    _8346 = mem[(32 * token0ToEarnedPath.length) + _8303 + 292]
                    mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 324 len floor32(mem[(32 * token0ToEarnedPath.length) + _8303 + 292])] = mem[(32 * token0ToEarnedPath.length) + _8303 + 324 len floor32(mem[(32 * token0ToEarnedPath.length) + _8303 + 292])]
                    mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 324] = 30
                    mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 356] = 'SafeMath: subtraction overflow'
                    if 1 > mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292]:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1 < mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292]
                    _12457 = mem[(32 * mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 324]
                    if not mem[(32 * mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 324]:
                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 388] = 26
                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 420] = 'SafeMath: division by zero'
                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token0ToEarnedPath.length)] = mem[292 len floor32(token0ToEarnedPath.length)]
                        require ext_code.size(address(uniRouterAddress))
                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                             gas gas_remaining wei
                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token0ToEarnedPath.length, mem[292 len floor32(token0ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + floor32(token0ToEarnedPath.length) + 648 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(token1Address)
                        staticcall token1Address.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if earnedAddress != token1Address:
                            if ext_call.return_data[0] > 0:
                                require ext_code.size(token1Address)
                                staticcall token1Address.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), address(uniRouterAddress)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 488] = address(uniRouterAddress)
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 520] = 2 * ext_call.return_data[0]
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 452] = 68
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 488 len 28] = Mask(224, 0, stor8)
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 484 len 4] = approve(address arg1, uint256 arg2)
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 552] = 32
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 584] = 'SafeERC20: low-level call failed'
                                if eth.balance(this.address) < 0:
                                    revert with 0, 
                                                32,
                                                38,
                                                0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 722 len 26]
                                if not ext_code.size(token1Address):
                                    revert with 0, 'Address: call to non-contract'
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 616 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 708 len 4] = 0
                                call token1Address with:
                                   funct token0ToEarnedPath.length.field_224
                                     gas gas_remaining wei
                                    args Mask(224, 31, ext_call.return_data[0]) << 225, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 680 len 4]
                                if not return_data.size:
                                    if not ext_call.success:
                                        revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                                    if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 726 len 22]
                                    if not token1ToEarnedPath.length:
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 652] = ext_call.return_data[0]
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 684] = 64
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 716] = token1ToEarnedPath.length
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 748 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                        require ext_code.size(address(uniRouterAddress))
                                        staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                gas gas_remaining wei
                                               args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 748 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648
                                        require return_data.size >= 32
                                        _33025 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28]
                                        require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                        require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                        require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]) + 32 <= return_data.size
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]
                                        _33213 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33025 + 648]
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33025 + 648])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33025 + 680 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33025 + 648])]
                                        mem[64] = (32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744
                                        mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] = 30
                                        mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 712] = 'SafeMath: subtraction overflow'
                                        if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]
                                        _39516 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]
                                        if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]:
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = 0
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                        else:
                                            if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] != slippageFactor:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845 len 31]
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = slippageFactor * _39516 / 1000
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                            mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], slippageFactor * _39516 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _33213) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        mem[0] = 28
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648] = address(token1ToEarnedPath.field_0)
                                        if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 652] = ext_call.return_data[0]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 684] = 64
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 716] = token1ToEarnedPath.length
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 748 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 748 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648
                                            require return_data.size >= 32
                                            _33027 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]) + 32 <= return_data.size
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]
                                            _33214 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33027 + 648]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33027 + 648])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33027 + 680 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33027 + 648])]
                                            mem[64] = (32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744
                                            mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] = 30
                                            mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 712] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]
                                            _39520 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]
                                            if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]:
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = 0
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845 len 31]
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = slippageFactor * _39520 / 1000
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _39520 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _33214) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 680] = address(token1ToEarnedPath.field_256)
                                            idx = (32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 680
                                            s = 1
                                            while (32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 616 > idx:
                                                mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                idx = idx + 32
                                                s = s + 1
                                                continue 
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 652] = ext_call.return_data[0]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 684] = 64
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 716] = token1ToEarnedPath.length
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 748 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 748 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648
                                            require return_data.size >= 32
                                            _45331 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]) + 32 <= return_data.size
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]
                                            _45590 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45331 + 648]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45331 + 648])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45331 + 680 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45331 + 648])]
                                            mem[64] = (32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744
                                            mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] = 30
                                            mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 712] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]
                                            _50040 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]
                                            if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]:
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = 0
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845 len 31]
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = slippageFactor * _50040 / 1000
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _50040 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _45590) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                else:
                                    mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 616] = return_data.size
                                    mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if not return_data.size:
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _33029 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _33215 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33029 + 649]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33029 + 649])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33029 + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33029 + 649])]
                                            mem[64] = (32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                            _39523 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39523 / 1000
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _39523 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33215) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _33031 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _33216 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33031 + 649]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33031 + 649])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33031 + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33031 + 649])]
                                                mem[64] = (32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _39527 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39527 / 1000
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39527 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33216) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45333 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45591 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45333 + 649]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45333 + 649])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45333 + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45333 + 649])]
                                                mem[64] = (32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _50043 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50043 / 1000
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50043 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45591) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        require return_data.size >= 32
                                        if not mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 727 len 22]
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _33033 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _33217 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33033 + 649]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33033 + 649])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33033 + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33033 + 649])]
                                            mem[64] = (32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                            _39530 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39530 / 1000
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _39530 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33217) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _33035 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _33218 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33035 + 649]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33035 + 649])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33035 + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33035 + 649])]
                                                mem[64] = (32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _39534 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39534 / 1000
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39534 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33218) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45335 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45592 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45335 + 649]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45335 + 649])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45335 + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45335 + 649])]
                                                mem[64] = (32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _50046 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50046 / 1000
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50046 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45592) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                    else:
                        if slippageFactor * mem[(32 * mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 324] / mem[(32 * mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 324] != slippageFactor:
                            revert with 0, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489 len 31]
                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 388] = 26
                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 420] = 'SafeMath: division by zero'
                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token0ToEarnedPath.length)] = mem[292 len floor32(token0ToEarnedPath.length)]
                        require ext_code.size(address(uniRouterAddress))
                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                             gas gas_remaining wei
                            args ext_call.return_data[0], slippageFactor * _12457 / 1000, Array(len=token0ToEarnedPath.length, data=mem[292 len floor32(token0ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + floor32(token0ToEarnedPath.length) + 648 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(token1Address)
                        staticcall token1Address.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if earnedAddress != token1Address:
                            if ext_call.return_data[0] > 0:
                                require ext_code.size(token1Address)
                                staticcall token1Address.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), address(uniRouterAddress)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 488] = address(uniRouterAddress)
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 520] = 2 * ext_call.return_data[0]
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 452] = 68
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 488 len 28] = Mask(224, 0, stor8)
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 484 len 4] = approve(address arg1, uint256 arg2)
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 552] = 32
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 584] = 'SafeERC20: low-level call failed'
                                if eth.balance(this.address) < 0:
                                    revert with 0, 
                                                32,
                                                38,
                                                0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 722 len 26]
                                if not ext_code.size(token1Address):
                                    revert with 0, 'Address: call to non-contract'
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 616 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 708 len 4] = 0
                                call token1Address with:
                                   funct token0ToEarnedPath.length.field_224
                                     gas gas_remaining wei
                                    args Mask(224, 31, ext_call.return_data[0]) << 225, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 680 len 4]
                                if not return_data.size:
                                    if not ext_call.success:
                                        revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                                    if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 726 len 22]
                                    if not token1ToEarnedPath.length:
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 652] = ext_call.return_data[0]
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 684] = 64
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 716] = token1ToEarnedPath.length
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 748 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                        require ext_code.size(address(uniRouterAddress))
                                        staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                gas gas_remaining wei
                                               args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 748 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648
                                        require return_data.size >= 32
                                        _33009 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28]
                                        require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                        require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                        require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]) + 32 <= return_data.size
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]
                                        _33205 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33009 + 648]
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33009 + 648])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33009 + 680 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33009 + 648])]
                                        mem[64] = (32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744
                                        mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] = 30
                                        mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 712] = 'SafeMath: subtraction overflow'
                                        if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]
                                        _39488 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]
                                        if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]:
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = 0
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                        else:
                                            if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] != slippageFactor:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845 len 31]
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = slippageFactor * _39488 / 1000
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                            mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], slippageFactor * _39488 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _33205) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        mem[0] = 28
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648] = address(token1ToEarnedPath.field_0)
                                        if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 652] = ext_call.return_data[0]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 684] = 64
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 716] = token1ToEarnedPath.length
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 748 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 748 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648
                                            require return_data.size >= 32
                                            _33011 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]) + 32 <= return_data.size
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]
                                            _33206 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33011 + 648]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33011 + 648])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33011 + 680 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33011 + 648])]
                                            mem[64] = (32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744
                                            mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] = 30
                                            mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 712] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]
                                            _39492 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]
                                            if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]:
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = 0
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845 len 31]
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = slippageFactor * _39492 / 1000
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _39492 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _33206) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 680] = address(token1ToEarnedPath.field_256)
                                            idx = (32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 680
                                            s = 1
                                            while (32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 616 > idx:
                                                mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                idx = idx + 32
                                                s = s + 1
                                                continue 
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 652] = ext_call.return_data[0]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 684] = 64
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 716] = token1ToEarnedPath.length
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 748 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 748 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648
                                            require return_data.size >= 32
                                            _45323 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]) + 32 <= return_data.size
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]
                                            _45586 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45323 + 648]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45323 + 648])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45323 + 680 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45323 + 648])]
                                            mem[64] = (32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744
                                            mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] = 30
                                            mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 712] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]
                                            _50028 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]
                                            if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]:
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = 0
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845 len 31]
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = slippageFactor * _50028 / 1000
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _50028 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _45586) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                else:
                                    mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 616] = return_data.size
                                    mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if not return_data.size:
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _33013 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _33207 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33013 + 649]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33013 + 649])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33013 + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33013 + 649])]
                                            mem[64] = (32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                            _39495 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39495 / 1000
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _39495 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33207) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _33015 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _33208 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33015 + 649]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33015 + 649])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33015 + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33015 + 649])]
                                                mem[64] = (32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _39499 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39499 / 1000
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39499 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33208) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45325 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45587 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45325 + 649]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45325 + 649])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45325 + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45325 + 649])]
                                                mem[64] = (32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _50031 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50031 / 1000
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50031 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45587) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        require return_data.size >= 32
                                        if not mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 727 len 22]
                                        mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _33017 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _33209 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33017 + 649]
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33017 + 649])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33017 + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33017 + 649])]
                                            mem[64] = (32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                            _39502 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39502 / 1000
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _39502 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33209) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _33019 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _33210 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33019 + 649]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33019 + 649])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33019 + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33019 + 649])]
                                                mem[64] = (32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _39506 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39506 / 1000
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39506 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33210) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45327 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45588 = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45327 + 649]
                                                mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45327 + 649])] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45327 + 681 len floor32(mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45327 + 649])]
                                                mem[64] = (32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _50034 = mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50034 / 1000
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50034 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8346) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45588) + (32 * _8346) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                else:
                    mem[0] = 27
                    mem[292] = address(token0ToEarnedPath.field_0)
                    idx = 292
                    s = 0
                    while (32 * token0ToEarnedPath.length) + 260 > idx:
                        mem[idx + 32] = token0ToEarnedPath[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    mem[(32 * token0ToEarnedPath.length) + 292] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(32 * token0ToEarnedPath.length) + 296] = ext_call.return_data[0]
                    mem[(32 * token0ToEarnedPath.length) + 328] = 64
                    mem[(32 * token0ToEarnedPath.length) + 360] = token0ToEarnedPath.length
                    mem[(32 * token0ToEarnedPath.length) + 392 len floor32(token0ToEarnedPath.length)] = mem[292 len floor32(token0ToEarnedPath.length)]
                    require ext_code.size(address(uniRouterAddress))
                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args ext_call.return_data[0], Array(len=token0ToEarnedPath.length, data=mem[292 len floor32(token0ToEarnedPath.length)], mem[(32 * token0ToEarnedPath.length) + floor32(token0ToEarnedPath.length) + 392 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(32 * token0ToEarnedPath.length) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292
                    require return_data.size >= 32
                    _19587 = mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28]
                    require mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] <= 4294967296
                    require mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                    require mem[(32 * token0ToEarnedPath.length) + mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292] <= 4294967296 and mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * token0ToEarnedPath.length) + mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]) + 32 <= return_data.size
                    mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292] = mem[(32 * token0ToEarnedPath.length) + mem[(32 * token0ToEarnedPath.length) + 292 len 4], ext_call.return_data[0 len 28] + 292]
                    _19634 = mem[(32 * token0ToEarnedPath.length) + _19587 + 292]
                    mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 324 len floor32(mem[(32 * token0ToEarnedPath.length) + _19587 + 292])] = mem[(32 * token0ToEarnedPath.length) + _19587 + 324 len floor32(mem[(32 * token0ToEarnedPath.length) + _19587 + 292])]
                    mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 324] = 30
                    mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 356] = 'SafeMath: subtraction overflow'
                    if 1 > mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292]:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1 < mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292]
                    _26516 = mem[(32 * mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 324]
                    if not mem[(32 * mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 324]:
                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 388] = 26
                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 420] = 'SafeMath: division by zero'
                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token0ToEarnedPath.length)] = mem[292 len floor32(token0ToEarnedPath.length)]
                        require ext_code.size(address(uniRouterAddress))
                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                             gas gas_remaining wei
                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token0ToEarnedPath.length, mem[292 len floor32(token0ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + floor32(token0ToEarnedPath.length) + 648 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(token1Address)
                        staticcall token1Address.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if earnedAddress != token1Address:
                            if ext_call.return_data[0] > 0:
                                require ext_code.size(token1Address)
                                staticcall token1Address.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), address(uniRouterAddress)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 488] = address(uniRouterAddress)
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 520] = 2 * ext_call.return_data[0]
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 452] = 68
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 488 len 28] = Mask(224, 0, stor8)
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 484 len 4] = approve(address arg1, uint256 arg2)
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 552] = 32
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 584] = 'SafeERC20: low-level call failed'
                                if eth.balance(this.address) < 0:
                                    revert with 0, 
                                                32,
                                                38,
                                                0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 722 len 26]
                                if not ext_code.size(token1Address):
                                    revert with 0, 'Address: call to non-contract'
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 616 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 708 len 4] = 0
                                call token1Address with:
                                   funct token0ToEarnedPath.length.field_224
                                     gas gas_remaining wei
                                    args Mask(224, 31, ext_call.return_data[0]) << 225, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 680 len 4]
                                if not return_data.size:
                                    if not ext_call.success:
                                        revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                                    if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 726 len 22]
                                    mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 616] = token1ToEarnedPath.length
                                    if not token1ToEarnedPath.length:
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 652] = ext_call.return_data[0]
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 684] = 64
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 716] = token1ToEarnedPath.length
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 748 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                        var126001 = floor32(token1ToEarnedPath.length)
                                        require ext_code.size(address(uniRouterAddress))
                                        staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                gas gas_remaining wei
                                               args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 748 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648
                                        require return_data.size >= 32
                                        _45357 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28]
                                        require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                        require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                        require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]) + 32 <= return_data.size
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]
                                        _45603 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45357 + 648]
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45357 + 648])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45357 + 680 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45357 + 648])]
                                        mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] = 30
                                        mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 712] = 'SafeMath: subtraction overflow'
                                        if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]
                                        _50084 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]
                                        if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]:
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = 0
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                        else:
                                            if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] != slippageFactor:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845 len 31]
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = slippageFactor * _50084 / 1000
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                            mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], slippageFactor * _50084 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _45603) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        mem[0] = 28
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648] = address(token1ToEarnedPath.field_0)
                                        if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 652] = ext_call.return_data[0]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 684] = 64
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 716] = token1ToEarnedPath.length
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 748 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 748 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648
                                            require return_data.size >= 32
                                            _45359 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]) + 32 <= return_data.size
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]
                                            _45604 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45359 + 648]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45359 + 648])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45359 + 680 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45359 + 648])]
                                            mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] = 30
                                            mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 712] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]
                                            _50088 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]
                                            if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]:
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = 0
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845 len 31]
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = slippageFactor * _50088 / 1000
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _50088 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _45604) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 680] = address(token1ToEarnedPath.field_256)
                                            idx = (32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 680
                                            s = 1
                                            while (32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 616 > idx:
                                                mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                idx = idx + 32
                                                s = s + 1
                                                continue 
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 652] = ext_call.return_data[0]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 684] = 64
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 716] = token1ToEarnedPath.length
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 748 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 748 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648
                                            require return_data.size >= 32
                                            _53587 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]) + 32 <= return_data.size
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]
                                            _53670 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53587 + 648]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53587 + 648])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53587 + 680 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53587 + 648])]
                                            mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] = 30
                                            mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 712] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]
                                            _55072 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]
                                            if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]:
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = 0
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845 len 31]
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = slippageFactor * _55072 / 1000
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _55072 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _53670) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                else:
                                    mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 616] = return_data.size
                                    mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if not return_data.size:
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            var124001 = floor32(token1ToEarnedPath.length)
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _45361 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _45605 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45361 + 649]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45361 + 649])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45361 + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45361 + 649])]
                                            mem[64] = (32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                            _50091 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50091 / 1000
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _50091 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45605) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45363 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45606 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45363 + 649]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45363 + 649])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45363 + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45363 + 649])]
                                                mem[64] = (32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _50095 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50095 / 1000
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50095 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45606) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _53589 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _53671 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53589 + 649]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53589 + 649])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53589 + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53589 + 649])]
                                                mem[64] = (32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _55075 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _55075 / 1000
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _55075 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53671) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        require return_data.size >= 32
                                        if not mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 727 len 22]
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            var126001 = floor32(token1ToEarnedPath.length)
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _45365 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _45607 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45365 + 649]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45365 + 649])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45365 + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45365 + 649])]
                                            mem[64] = (32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                            _50098 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50098 / 1000
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _50098 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45607) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45367 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45608 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45367 + 649]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45367 + 649])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45367 + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45367 + 649])]
                                                mem[64] = (32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _50102 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50102 / 1000
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50102 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45608) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _53591 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _53672 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53591 + 649]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53591 + 649])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53591 + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53591 + 649])]
                                                mem[64] = (32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _55078 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _55078 / 1000
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _55078 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53672) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                    else:
                        if slippageFactor * mem[(32 * mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 324] / mem[(32 * mem[(32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 292] - 1) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 324] != slippageFactor:
                            revert with 0, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489 len 31]
                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 388] = 26
                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 420] = 'SafeMath: division by zero'
                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token0ToEarnedPath.length)] = mem[292 len floor32(token0ToEarnedPath.length)]
                        require ext_code.size(address(uniRouterAddress))
                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                             gas gas_remaining wei
                            args ext_call.return_data[0], slippageFactor * _26516 / 1000, Array(len=token0ToEarnedPath.length, data=mem[292 len floor32(token0ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + floor32(token0ToEarnedPath.length) + 648 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(token1Address)
                        staticcall token1Address.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if earnedAddress != token1Address:
                            if ext_call.return_data[0] > 0:
                                require ext_code.size(token1Address)
                                staticcall token1Address.0xdd62ed3e with:
                                        gas gas_remaining wei
                                       args address(this.address), address(uniRouterAddress)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 488] = address(uniRouterAddress)
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 520] = 2 * ext_call.return_data[0]
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 452] = 68
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 488 len 28] = Mask(224, 0, stor8)
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 484 len 4] = approve(address arg1, uint256 arg2)
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 552] = 32
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 584] = 'SafeERC20: low-level call failed'
                                if eth.balance(this.address) < 0:
                                    revert with 0, 
                                                32,
                                                38,
                                                0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 722 len 26]
                                if not ext_code.size(token1Address):
                                    revert with 0, 'Address: call to non-contract'
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 616 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 708 len 4] = 0
                                call token1Address with:
                                   funct token0ToEarnedPath.length.field_224
                                     gas gas_remaining wei
                                    args Mask(224, 31, ext_call.return_data[0]) << 225, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 680 len 4]
                                if not return_data.size:
                                    if not ext_call.success:
                                        revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                                    if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 726 len 22]
                                    mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 616] = token1ToEarnedPath.length
                                    if not token1ToEarnedPath.length:
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 652] = ext_call.return_data[0]
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 684] = 64
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 716] = token1ToEarnedPath.length
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 748 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                        require ext_code.size(address(uniRouterAddress))
                                        staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                gas gas_remaining wei
                                               args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 748 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648
                                        require return_data.size >= 32
                                        _45341 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28]
                                        require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                        require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                        require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]) + 32 <= return_data.size
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]
                                        _45595 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45341 + 648]
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45341 + 648])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45341 + 680 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45341 + 648])]
                                        mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] = 30
                                        mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 712] = 'SafeMath: subtraction overflow'
                                        if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]
                                        _50056 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]
                                        if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]:
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = 0
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                        else:
                                            if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] != slippageFactor:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845 len 31]
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = slippageFactor * _50056 / 1000
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                            mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args ext_call.return_data[0], slippageFactor * _50056 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _45595) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        mem[0] = 28
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648] = address(token1ToEarnedPath.field_0)
                                        if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 652] = ext_call.return_data[0]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 684] = 64
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 716] = token1ToEarnedPath.length
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 748 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 748 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648
                                            require return_data.size >= 32
                                            _45343 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]) + 32 <= return_data.size
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]
                                            _45596 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45343 + 648]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45343 + 648])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45343 + 680 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45343 + 648])]
                                            mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] = 30
                                            mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 712] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]
                                            _50060 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]
                                            if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]:
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = 0
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845 len 31]
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = slippageFactor * _50060 / 1000
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _50060 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _45596) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 680] = address(token1ToEarnedPath.field_256)
                                            idx = (32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 680
                                            s = 1
                                            while (32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 616 > idx:
                                                mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                idx = idx + 32
                                                s = s + 1
                                                continue 
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 652] = ext_call.return_data[0]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 684] = 64
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 716] = token1ToEarnedPath.length
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 748 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 748 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648
                                            require return_data.size >= 32
                                            _53579 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]) + 32 <= return_data.size
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 648 len 4], ext_call.return_data[0 len 28] + 648]
                                            _53666 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53579 + 648]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53579 + 648])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53579 + 680 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53579 + 648])]
                                            mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] = 30
                                            mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 712] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648]
                                            _55060 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]
                                            if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680]:
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = 0
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 648] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 680] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845 len 31]
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 744] = 26
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 776] = 'SafeMath: division by zero'
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 808] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 812] = ext_call.return_data[0]
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 844] = slippageFactor * _55060 / 1000
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 908] = this.address
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 940] = block.timestamp + sub_1b61e055
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 876] = 160
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 972] = token1ToEarnedPath.length
                                                mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1004 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _55060 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len floor32(token1ToEarnedPath.length)], mem[(32 * _53666) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1004 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                else:
                                    mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 616] = return_data.size
                                    mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if not return_data.size:
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            var126001 = floor32(token1ToEarnedPath.length)
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _45345 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _45597 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45345 + 649]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45345 + 649])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45345 + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45345 + 649])]
                                            mem[64] = (32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                            _50063 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50063 / 1000
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _50063 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45597) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45347 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45598 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45347 + 649]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45347 + 649])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45347 + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45347 + 649])]
                                                mem[64] = (32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _50067 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50067 / 1000
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50067 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45598) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _53581 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _53667 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53581 + 649]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53581 + 649])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53581 + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53581 + 649])]
                                                mem[64] = (32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _55063 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _55063 / 1000
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _55063 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53667) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        require return_data.size >= 32
                                        if not mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 648]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 727 len 22]
                                        mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _45349 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _45599 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45349 + 649]
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45349 + 649])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45349 + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45349 + 649])]
                                            mem[64] = (32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                            _50070 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50070 / 1000
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _50070 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45599) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45351 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45600 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45351 + 649]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45351 + 649])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45351 + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45351 + 649])]
                                                mem[64] = (32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _50074 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50074 / 1000
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50074 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45600) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _53583 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _53668 = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53583 + 649]
                                                mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53583 + 649])] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53583 + 681 len floor32(mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53583 + 649])]
                                                mem[64] = (32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649]
                                                _55066 = mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _55066 / 1000
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _55066 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19634) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53668) + (32 * _19634) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
            else:
                mem[260] = return_data.size
                mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeERC20: low-level call failed'
                if not return_data.size:
                    mem[ceil32(return_data.size) + 261] = token0ToEarnedPath.length
                    if not token0ToEarnedPath.length:
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 297] = ext_call.return_data[0]
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 329] = 64
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 361] = token0ToEarnedPath.length
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 393 len floor32(token0ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)]
                        require ext_code.size(address(uniRouterAddress))
                        staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args ext_call.return_data[0], Array(len=token0ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + floor32(token0ToEarnedPath.length) + 393 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)])
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293
                        require return_data.size >= 32
                        _8305 = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                        _8347 = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _8305 + 293]
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _8305 + 293])] = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _8305 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _8305 + 293])]
                        mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                        mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                        if 1 > mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293]
                        _12461 = mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325]
                        if not mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 389] = 26
                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 421] = 'SafeMath: division by zero'
                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token0ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token0ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)], mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + floor32(token0ToEarnedPath.length) + 649 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(token1Address)
                            staticcall token1Address.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if earnedAddress != token1Address:
                                if ext_call.return_data[0] > 0:
                                    require ext_code.size(token1Address)
                                    staticcall token1Address.0xdd62ed3e with:
                                            gas gas_remaining wei
                                           args address(this.address), address(uniRouterAddress)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489] = address(uniRouterAddress)
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 521] = 2 * ext_call.return_data[0]
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 453] = 68
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489 len 28] = Mask(224, 0, stor8)
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 485 len 4] = approve(address arg1, uint256 arg2)
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 553] = 32
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 585] = 'SafeERC20: low-level call failed'
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 723 len 26]
                                    if not ext_code.size(token1Address):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 709 len 4] = 0
                                    call token1Address with:
                                       funct token0ToEarnedPath.length.field_224
                                         gas gas_remaining wei
                                        args Mask(224, 31, ext_call.return_data[0]) << 225, mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681 len 4]
                                    if return_data.size:
                                        mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = return_data.size
                                        mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 622] = 32
                                            mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 654] = 32
                                            mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 686] = 'SafeERC20: low-level call failed'
                                            revert with memory
                                              from (32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618
                                               len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                        if not return_data.size:
                                            mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _33065 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _33233 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33065 + 650]
                                                mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33065 + 650])] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33065 + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33065 + 650])]
                                                mem[64] = (32 * _33233) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _33233) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _33233) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _39587 = mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _33233) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33233) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33233) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _33233) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39587 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33233) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _33067 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _33234 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33067 + 650]
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33067 + 650])] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33067 + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33067 + 650])]
                                                    mem[64] = (32 * _33234) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _33234) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _33234) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _39591 = mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _33234) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33234) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _33234) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _33234) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _39591 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33234) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45381 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45615 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45381 + 650]
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45381 + 650])] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45381 + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45381 + 650])]
                                                    mem[64] = (32 * _45615) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45615) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45615) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50123 = mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45615) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45615) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45615) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45615) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50123 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45615) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            require return_data.size >= 32
                                            if not mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649]:
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 622] = 32
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 654] = 42
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 686 len 42] = 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565
                                                revert with memory
                                                  from (32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618
                                                   len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _33069 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _33235 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33069 + 650]
                                                mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33069 + 650])] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33069 + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33069 + 650])]
                                                mem[64] = (32 * _33235) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _33235) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _33235) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _39594 = mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _33235) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33235) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33235) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _33235) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39594 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33235) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _33071 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _33236 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33071 + 650]
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33071 + 650])] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33071 + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33071 + 650])]
                                                    mem[64] = (32 * _33236) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _33236) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _33236) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _39598 = mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _33236) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33236) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _33236) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _33236) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _39598 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33236) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45383 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45616 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45383 + 650]
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45383 + 650])] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45383 + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45383 + 650])]
                                                    mem[64] = (32 * _45616) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45616) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45616) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50126 = mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45616) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45616) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45616) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45616) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50126 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45616) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        if not ext_call.success:
                                            revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                                        if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 727 len 22]
                                        mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _33061 = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _33231 = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33061 + 649]
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33061 + 649])] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33061 + 681 len floor32(mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33061 + 649])]
                                            mem[64] = (32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                            _39580 = mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39580 / 1000
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _39580 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33231) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _33063 = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _33232 = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33063 + 649]
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33063 + 649])] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33063 + 681 len floor32(mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33063 + 649])]
                                                mem[64] = (32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _39584 = mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39584 / 1000
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39584 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33232) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45379 = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45614 = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45379 + 649]
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45379 + 649])] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45379 + 681 len floor32(mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45379 + 649])]
                                                mem[64] = (32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _50120 = mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50120 / 1000
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50120 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45614) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                        else:
                            if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                revert with 0, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 389] = 26
                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 421] = 'SafeMath: division by zero'
                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token0ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args ext_call.return_data[0], slippageFactor * _12461 / 1000, Array(len=token0ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)], mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + floor32(token0ToEarnedPath.length) + 649 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(token1Address)
                            staticcall token1Address.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if earnedAddress != token1Address:
                                if ext_call.return_data[0] > 0:
                                    require ext_code.size(token1Address)
                                    staticcall token1Address.0xdd62ed3e with:
                                            gas gas_remaining wei
                                           args address(this.address), address(uniRouterAddress)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489] = address(uniRouterAddress)
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 521] = 2 * ext_call.return_data[0]
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 453] = 68
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489 len 28] = Mask(224, 0, stor8)
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 485 len 4] = approve(address arg1, uint256 arg2)
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 553] = 32
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 585] = 'SafeERC20: low-level call failed'
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 723 len 26]
                                    if not ext_code.size(token1Address):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                                    mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 709 len 4] = 0
                                    call token1Address with:
                                       funct token0ToEarnedPath.length.field_224
                                         gas gas_remaining wei
                                        args Mask(224, 31, ext_call.return_data[0]) << 225, mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681 len 4]
                                    if return_data.size:
                                        mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = return_data.size
                                        mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 622] = 32
                                            mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 654] = 32
                                            mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 686] = 'SafeERC20: low-level call failed'
                                            revert with memory
                                              from (32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618
                                               len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                        if not return_data.size:
                                            mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _33049 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _33225 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33049 + 650]
                                                mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33049 + 650])] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33049 + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33049 + 650])]
                                                mem[64] = (32 * _33225) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _33225) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _33225) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _39559 = mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _33225) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33225) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33225) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _33225) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39559 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33225) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _33051 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _33226 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33051 + 650]
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33051 + 650])] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33051 + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33051 + 650])]
                                                    mem[64] = (32 * _33226) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _33226) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _33226) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _39563 = mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _33226) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33226) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _33226) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _33226) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _39563 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33226) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45373 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45611 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45373 + 650]
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45373 + 650])] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45373 + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45373 + 650])]
                                                    mem[64] = (32 * _45611) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45611) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45611) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50111 = mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45611) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45611) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45611) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45611) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50111 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45611) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            require return_data.size >= 32
                                            if not mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649]:
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 622] = 32
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 654] = 42
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 686 len 42] = 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565
                                                revert with memory
                                                  from (32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618
                                                   len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _33053 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _33227 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33053 + 650]
                                                mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33053 + 650])] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33053 + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33053 + 650])]
                                                mem[64] = (32 * _33227) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _33227) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _33227) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _39566 = mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _33227) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33227) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33227) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _33227) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39566 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33227) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _33055 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _33228 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33055 + 650]
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33055 + 650])] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33055 + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33055 + 650])]
                                                    mem[64] = (32 * _33228) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _33228) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _33228) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _39570 = mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _33228) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33228) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _33228) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _33228) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _39570 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33228) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45375 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45612 = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45375 + 650]
                                                    mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45375 + 650])] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45375 + 682 len floor32(mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45375 + 650])]
                                                    mem[64] = (32 * _45612) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45612) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45612) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50114 = mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45612) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45612) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45612) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45612) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50114 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45612) + (32 * _8347) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        if not ext_call.success:
                                            revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                                        if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 727 len 22]
                                        mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _33045 = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _33223 = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33045 + 649]
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33045 + 649])] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33045 + 681 len floor32(mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33045 + 649])]
                                            mem[64] = (32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                            _39552 = mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39552 / 1000
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _39552 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33223) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _33047 = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _33224 = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33047 + 649]
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33047 + 649])] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33047 + 681 len floor32(mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33047 + 649])]
                                                mem[64] = (32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _39556 = mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39556 / 1000
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39556 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33224) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45371 = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45610 = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45371 + 649]
                                                mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45371 + 649])] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45371 + 681 len floor32(mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45371 + 649])]
                                                mem[64] = (32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _50108 = mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50108 / 1000
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50108 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45610) + (32 * _8347) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                    else:
                        mem[0] = 27
                        mem[ceil32(return_data.size) + 293] = address(token0ToEarnedPath.field_0)
                        idx = ceil32(return_data.size) + 293
                        s = 0
                        while ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 261 > idx:
                            mem[idx + 32] = token0ToEarnedPath[s].field_256
                            idx = idx + 32
                            s = s + 1
                            continue 
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 297] = ext_call.return_data[0]
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 329] = 64
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 361] = token0ToEarnedPath.length
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 393 len floor32(token0ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)]
                        require ext_code.size(address(uniRouterAddress))
                        staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args ext_call.return_data[0], Array(len=token0ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + floor32(token0ToEarnedPath.length) + 393 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)])
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293
                        require return_data.size >= 32
                        _19593 = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                        _19637 = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _19593 + 293]
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _19593 + 293])] = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _19593 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _19593 + 293])]
                        mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                        mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                        if 1 > mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293]
                        _26527 = mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325]
                        if not mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 389] = 26
                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 421] = 'SafeMath: division by zero'
                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token0ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token0ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)], mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + floor32(token0ToEarnedPath.length) + 649 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(token1Address)
                            staticcall token1Address.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if earnedAddress != token1Address:
                                if ext_call.return_data[0] > 0:
                                    require ext_code.size(token1Address)
                                    staticcall token1Address.0xdd62ed3e with:
                                            gas gas_remaining wei
                                           args address(this.address), address(uniRouterAddress)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489] = address(uniRouterAddress)
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 521] = 2 * ext_call.return_data[0]
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 453] = 68
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489 len 28] = Mask(224, 0, stor8)
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 485 len 4] = approve(address arg1, uint256 arg2)
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 553] = 32
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 585] = 'SafeERC20: low-level call failed'
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 723 len 26]
                                    if not ext_code.size(token1Address):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 709 len 4] = 0
                                    call token1Address with:
                                       funct token0ToEarnedPath.length.field_224
                                         gas gas_remaining wei
                                        args Mask(224, 31, ext_call.return_data[0]) << 225, mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681 len 4]
                                    if return_data.size:
                                        mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = return_data.size
                                        mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if not return_data.size:
                                            mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                var122001 = floor32(token1ToEarnedPath.length)
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 750 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _45409 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _45629 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45409 + 650]
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45409 + 650])] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45409 + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45409 + 650])]
                                                mem[64] = (32 * _45629) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _45629) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _45629) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _50171 = mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _45629) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45629) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45629) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _45629) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50171 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45629) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 750 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45411 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45630 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45411 + 650]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45411 + 650])] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45411 + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45411 + 650])]
                                                    mem[64] = (32 * _45630) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45630) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45630) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50175 = mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45630) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45630) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45630) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45630) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50175 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45630) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 750 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _53605 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _53679 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53605 + 650]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53605 + 650])] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53605 + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53605 + 650])]
                                                    mem[64] = (32 * _53679) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _53679) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _53679) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _55099 = mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _53679) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53679) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _53679) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _53679) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _55099 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53679) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            require return_data.size >= 32
                                            if not mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 728 len 22]
                                            mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                var124001 = floor32(token1ToEarnedPath.length)
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 750 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _45413 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _45631 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45413 + 650]
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45413 + 650])] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45413 + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45413 + 650])]
                                                mem[64] = (32 * _45631) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _45631) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _45631) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _50178 = mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _45631) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45631) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45631) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _45631) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50178 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45631) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 750 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45415 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45632 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45415 + 650]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45415 + 650])] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45415 + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45415 + 650])]
                                                    mem[64] = (32 * _45632) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45632) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45632) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50182 = mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45632) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45632) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45632) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45632) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50182 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45632) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 750 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _53607 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _53680 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53607 + 650]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53607 + 650])] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53607 + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53607 + 650])]
                                                    mem[64] = (32 * _53680) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _53680) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _53680) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _55102 = mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _53680) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53680) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _53680) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _53680) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _55102 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53680) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        if not ext_call.success:
                                            revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                                        if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 727 len 22]
                                        mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            var124001 = floor32(token1ToEarnedPath.length)
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _45405 = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _45627 = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45405 + 649]
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45405 + 649])] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45405 + 681 len floor32(mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45405 + 649])]
                                            mem[64] = (32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                            _50164 = mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50164 / 1000
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _50164 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45627) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45407 = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45628 = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45407 + 649]
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45407 + 649])] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45407 + 681 len floor32(mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45407 + 649])]
                                                mem[64] = (32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _50168 = mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50168 / 1000
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50168 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45628) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _53603 = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _53678 = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53603 + 649]
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53603 + 649])] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53603 + 681 len floor32(mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53603 + 649])]
                                                mem[64] = (32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _55096 = mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _55096 / 1000
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _55096 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53678) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                        else:
                            if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                revert with 0, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 389] = 26
                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 421] = 'SafeMath: division by zero'
                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token0ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args ext_call.return_data[0], slippageFactor * _26527 / 1000, Array(len=token0ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)], mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + floor32(token0ToEarnedPath.length) + 649 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(token1Address)
                            staticcall token1Address.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if earnedAddress != token1Address:
                                if ext_call.return_data[0] > 0:
                                    require ext_code.size(token1Address)
                                    staticcall token1Address.0xdd62ed3e with:
                                            gas gas_remaining wei
                                           args address(this.address), address(uniRouterAddress)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489] = address(uniRouterAddress)
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 521] = 2 * ext_call.return_data[0]
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 453] = 68
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489 len 28] = Mask(224, 0, stor8)
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 485 len 4] = approve(address arg1, uint256 arg2)
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 553] = 32
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 585] = 'SafeERC20: low-level call failed'
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 723 len 26]
                                    if not ext_code.size(token1Address):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                                    mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 709 len 4] = 0
                                    call token1Address with:
                                       funct token0ToEarnedPath.length.field_224
                                         gas gas_remaining wei
                                        args Mask(224, 31, ext_call.return_data[0]) << 225, mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681 len 4]
                                    if return_data.size:
                                        mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = return_data.size
                                        mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if not return_data.size:
                                            mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                var124001 = floor32(token1ToEarnedPath.length)
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 750 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _45393 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _45621 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45393 + 650]
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45393 + 650])] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45393 + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45393 + 650])]
                                                mem[64] = (32 * _45621) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _45621) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _45621) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _50143 = mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _45621) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45621) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45621) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _45621) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50143 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45621) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 750 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45395 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45622 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45395 + 650]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45395 + 650])] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45395 + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45395 + 650])]
                                                    mem[64] = (32 * _45622) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45622) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45622) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50147 = mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45622) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45622) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45622) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45622) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50147 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45622) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 750 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _53597 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _53675 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53597 + 650]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53597 + 650])] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53597 + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53597 + 650])]
                                                    mem[64] = (32 * _53675) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _53675) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _53675) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _55087 = mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _53675) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53675) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _53675) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _53675) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _55087 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53675) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            require return_data.size >= 32
                                            if not mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 728 len 22]
                                            mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 750 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _45397 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _45623 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45397 + 650]
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45397 + 650])] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45397 + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45397 + 650])]
                                                mem[64] = (32 * _45623) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _45623) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _45623) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _50150 = mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _45623) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45623) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45623) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _45623) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50150 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45623) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 750 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45399 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45624 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45399 + 650]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45399 + 650])] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45399 + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45399 + 650])]
                                                    mem[64] = (32 * _45624) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45624) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45624) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50154 = mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45624) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45624) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45624) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45624) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50154 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45624) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 750 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _53599 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _53676 = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53599 + 650]
                                                    mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53599 + 650])] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53599 + 682 len floor32(mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53599 + 650])]
                                                    mem[64] = (32 * _53676) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _53676) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _53676) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _55090 = mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _53676) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53676) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _53676) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _53676) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _55090 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53676) + (32 * _19637) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        if not ext_call.success:
                                            revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                                        if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 727 len 22]
                                        mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _45389 = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _45619 = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45389 + 649]
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45389 + 649])] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45389 + 681 len floor32(mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45389 + 649])]
                                            mem[64] = (32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                            _50136 = mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50136 / 1000
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _50136 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45619) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45391 = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45620 = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45391 + 649]
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45391 + 649])] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45391 + 681 len floor32(mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45391 + 649])]
                                                mem[64] = (32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _50140 = mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50140 / 1000
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50140 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45620) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _53595 = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _53674 = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53595 + 649]
                                                mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53595 + 649])] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53595 + 681 len floor32(mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53595 + 649])]
                                                mem[64] = (32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _55084 = mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _55084 / 1000
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _55084 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53674) + (32 * _19637) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                else:
                    require return_data.size >= 32
                    if not mem[292]:
                        revert with 0, 
                                    32,
                                    42,
                                    0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[ceil32(return_data.size) + 371 len 22]
                    mem[ceil32(return_data.size) + 261] = token0ToEarnedPath.length
                    if not token0ToEarnedPath.length:
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 297] = ext_call.return_data[0]
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 329] = 64
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 361] = token0ToEarnedPath.length
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 393 len floor32(token0ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)]
                        require ext_code.size(address(uniRouterAddress))
                        staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args ext_call.return_data[0], Array(len=token0ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + floor32(token0ToEarnedPath.length) + 393 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)])
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293
                        require return_data.size >= 32
                        _8307 = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                        _8348 = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _8307 + 293]
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _8307 + 293])] = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _8307 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _8307 + 293])]
                        mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                        mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                        if 1 > mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293]
                        _12465 = mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325]
                        if not mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 389] = 26
                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 421] = 'SafeMath: division by zero'
                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token0ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token0ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)], mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + floor32(token0ToEarnedPath.length) + 649 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(token1Address)
                            staticcall token1Address.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if earnedAddress != token1Address:
                                if ext_call.return_data[0] > 0:
                                    require ext_code.size(token1Address)
                                    staticcall token1Address.0xdd62ed3e with:
                                            gas gas_remaining wei
                                           args address(this.address), address(uniRouterAddress)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489] = address(uniRouterAddress)
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 521] = 2 * ext_call.return_data[0]
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 453] = 68
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489 len 28] = Mask(224, 0, stor8)
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 485 len 4] = approve(address arg1, uint256 arg2)
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 553] = 32
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 585] = 'SafeERC20: low-level call failed'
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 723 len 26]
                                    if not ext_code.size(token1Address):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 709 len 4] = 0
                                    call token1Address with:
                                       funct token0ToEarnedPath.length.field_224
                                         gas gas_remaining wei
                                        args Mask(224, 31, ext_call.return_data[0]) << 225, mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681 len 4]
                                    if return_data.size:
                                        mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = return_data.size
                                        mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 622] = 32
                                            mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 654] = 32
                                            mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 686] = 'SafeERC20: low-level call failed'
                                            revert with memory
                                              from (32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618
                                               len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                        if not return_data.size:
                                            mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _33101 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _33251 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33101 + 650]
                                                mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33101 + 650])] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33101 + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33101 + 650])]
                                                mem[64] = (32 * _33251) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _33251) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _33251) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _39651 = mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _33251) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33251) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33251) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _33251) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39651 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33251) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _33103 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _33252 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33103 + 650]
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33103 + 650])] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33103 + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33103 + 650])]
                                                    mem[64] = (32 * _33252) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _33252) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _33252) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _39655 = mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _33252) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33252) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _33252) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _33252) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _39655 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33252) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45429 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45639 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45429 + 650]
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45429 + 650])] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45429 + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45429 + 650])]
                                                    mem[64] = (32 * _45639) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45639) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45639) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50203 = mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45639) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45639) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45639) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45639) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50203 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45639) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            require return_data.size >= 32
                                            if not mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649]:
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 622] = 32
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 654] = 42
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 686 len 42] = 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565
                                                revert with memory
                                                  from (32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618
                                                   len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _33105 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _33253 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33105 + 650]
                                                mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33105 + 650])] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33105 + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33105 + 650])]
                                                mem[64] = (32 * _33253) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _33253) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _33253) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _39658 = mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _33253) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33253) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33253) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _33253) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39658 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33253) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _33107 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _33254 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33107 + 650]
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33107 + 650])] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33107 + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33107 + 650])]
                                                    mem[64] = (32 * _33254) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _33254) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _33254) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _39662 = mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _33254) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33254) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _33254) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _33254) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _39662 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33254) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45431 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45640 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45431 + 650]
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45431 + 650])] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45431 + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45431 + 650])]
                                                    mem[64] = (32 * _45640) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45640) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45640) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50206 = mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45640) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45640) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45640) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45640) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50206 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45640) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        if not ext_call.success:
                                            revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                                        if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 727 len 22]
                                        mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _33097 = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _33249 = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33097 + 649]
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33097 + 649])] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33097 + 681 len floor32(mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33097 + 649])]
                                            mem[64] = (32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                            _39644 = mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39644 / 1000
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _39644 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33249) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _33099 = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _33250 = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33099 + 649]
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33099 + 649])] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33099 + 681 len floor32(mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33099 + 649])]
                                                mem[64] = (32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _39648 = mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39648 / 1000
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39648 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33250) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45427 = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45638 = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45427 + 649]
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45427 + 649])] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45427 + 681 len floor32(mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45427 + 649])]
                                                mem[64] = (32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _50200 = mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50200 / 1000
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50200 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45638) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                        else:
                            if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                revert with 0, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 389] = 26
                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 421] = 'SafeMath: division by zero'
                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token0ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args ext_call.return_data[0], slippageFactor * _12465 / 1000, Array(len=token0ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)], mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + floor32(token0ToEarnedPath.length) + 649 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(token1Address)
                            staticcall token1Address.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if earnedAddress != token1Address:
                                if ext_call.return_data[0] > 0:
                                    require ext_code.size(token1Address)
                                    staticcall token1Address.0xdd62ed3e with:
                                            gas gas_remaining wei
                                           args address(this.address), address(uniRouterAddress)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489] = address(uniRouterAddress)
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 521] = 2 * ext_call.return_data[0]
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 453] = 68
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489 len 28] = Mask(224, 0, stor8)
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 485 len 4] = approve(address arg1, uint256 arg2)
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 553] = 32
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 585] = 'SafeERC20: low-level call failed'
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 723 len 26]
                                    if not ext_code.size(token1Address):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                                    mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 709 len 4] = 0
                                    call token1Address with:
                                       funct token0ToEarnedPath.length.field_224
                                         gas gas_remaining wei
                                        args Mask(224, 31, ext_call.return_data[0]) << 225, mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681 len 4]
                                    if return_data.size:
                                        mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = return_data.size
                                        mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 622] = 32
                                            mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 654] = 32
                                            mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 686] = 'SafeERC20: low-level call failed'
                                            revert with memory
                                              from (32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618
                                               len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                        if not return_data.size:
                                            mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _33085 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _33243 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33085 + 650]
                                                mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33085 + 650])] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33085 + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33085 + 650])]
                                                mem[64] = (32 * _33243) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _33243) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _33243) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _39623 = mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _33243) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33243) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33243) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _33243) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39623 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33243) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _33087 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _33244 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33087 + 650]
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33087 + 650])] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33087 + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33087 + 650])]
                                                    mem[64] = (32 * _33244) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _33244) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _33244) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _39627 = mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _33244) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33244) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _33244) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _33244) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _39627 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33244) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45421 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45635 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45421 + 650]
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45421 + 650])] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45421 + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45421 + 650])]
                                                    mem[64] = (32 * _45635) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45635) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45635) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50191 = mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45635) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45635) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45635) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45635) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50191 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45635) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            require return_data.size >= 32
                                            if not mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649]:
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 622] = 32
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 654] = 42
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 686 len 42] = 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565
                                                revert with memory
                                                  from (32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618
                                                   len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _33089 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _33245 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33089 + 650]
                                                mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33089 + 650])] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33089 + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33089 + 650])]
                                                mem[64] = (32 * _33245) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _33245) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _33245) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _39630 = mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _33245) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33245) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33245) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _33245) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39630 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33245) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _33091 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _33246 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33091 + 650]
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33091 + 650])] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33091 + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _33091 + 650])]
                                                    mem[64] = (32 * _33246) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _33246) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _33246) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _39634 = mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _33246) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33246) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _33246) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _33246) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _39634 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _33246) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (32 * token1ToEarnedPath.length) + (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45423 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45636 = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45423 + 650]
                                                    mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45423 + 650])] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45423 + 682 len floor32(mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45423 + 650])]
                                                    mem[64] = (32 * _45636) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45636) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45636) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50194 = mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45636) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45636) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45636) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45636) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50194 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45636) + (32 * _8348) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        if not ext_call.success:
                                            revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                                        if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 727 len 22]
                                        mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _33081 = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _33241 = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33081 + 649]
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33081 + 649])] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33081 + 681 len floor32(mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33081 + 649])]
                                            mem[64] = (32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                            _39616 = mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39616 / 1000
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _39616 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33241) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _33083 = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _33242 = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33083 + 649]
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33083 + 649])] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33083 + 681 len floor32(mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _33083 + 649])]
                                                mem[64] = (32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _39620 = mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _39620 / 1000
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _39620 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _33242) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45419 = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45634 = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45419 + 649]
                                                mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45419 + 649])] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45419 + 681 len floor32(mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45419 + 649])]
                                                mem[64] = (32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _50188 = mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50188 / 1000
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50188 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45634) + (32 * _8348) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                    else:
                        mem[0] = 27
                        mem[ceil32(return_data.size) + 293] = address(token0ToEarnedPath.field_0)
                        idx = ceil32(return_data.size) + 293
                        s = 0
                        while ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 261 > idx:
                            mem[idx + 32] = token0ToEarnedPath[s].field_256
                            idx = idx + 32
                            s = s + 1
                            continue 
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 297] = ext_call.return_data[0]
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 329] = 64
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 361] = token0ToEarnedPath.length
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 393 len floor32(token0ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)]
                        require ext_code.size(address(uniRouterAddress))
                        staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args ext_call.return_data[0], Array(len=token0ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)], mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + floor32(token0ToEarnedPath.length) + 393 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)])
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293
                        require return_data.size >= 32
                        _19599 = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28]
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] <= 4294967296
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293] <= 4294967296 and mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + (32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]) + 32 <= return_data.size
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + 293 len 4], ext_call.return_data[0 len 28] + 293]
                        _19640 = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _19599 + 293]
                        mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325 len floor32(mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _19599 + 293])] = mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _19599 + 325 len floor32(mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + _19599 + 293])]
                        mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325] = 30
                        mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 357] = 'SafeMath: subtraction overflow'
                        if 1 > mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1 < mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293]
                        _26538 = mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325]
                        if not mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325]:
                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 389] = 26
                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 421] = 'SafeMath: division by zero'
                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token0ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token0ToEarnedPath.length, mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)], mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + floor32(token0ToEarnedPath.length) + 649 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(token1Address)
                            staticcall token1Address.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if earnedAddress != token1Address:
                                if ext_call.return_data[0] > 0:
                                    require ext_code.size(token1Address)
                                    staticcall token1Address.0xdd62ed3e with:
                                            gas gas_remaining wei
                                           args address(this.address), address(uniRouterAddress)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489] = address(uniRouterAddress)
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 521] = 2 * ext_call.return_data[0]
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 453] = 68
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489 len 28] = Mask(224, 0, stor8)
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 485 len 4] = approve(address arg1, uint256 arg2)
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 553] = 32
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 585] = 'SafeERC20: low-level call failed'
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 723 len 26]
                                    if not ext_code.size(token1Address):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 709 len 4] = 0
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681 len 0] = 0
                                    call token1Address with:
                                       funct uint32(stor8)
                                         gas gas_remaining wei
                                        args Mask(224, 31, ext_call.return_data[0]) << 225, mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681 len 4]
                                    if return_data.size:
                                        mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = return_data.size
                                        mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 622] = 32
                                            mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 654] = 32
                                            mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 686] = 'SafeERC20: low-level call failed'
                                            revert with memory
                                              from (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618
                                               len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                        if not return_data.size:
                                            mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                var124001 = floor32(token1ToEarnedPath.length)
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (4 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + (-2 * ceil32(return_data.size)) + 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _45457 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _45653 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45457 + 650]
                                                mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45457 + 650])] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45457 + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45457 + 650])]
                                                mem[64] = (32 * _45653) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _45653) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _45653) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _50251 = mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _45653) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45653) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45653) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _45653) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50251 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45653) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (4 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45459 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45654 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45459 + 650]
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45459 + 650])] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45459 + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45459 + 650])]
                                                    mem[64] = (32 * _45654) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45654) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45654) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50255 = mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45654) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45654) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45654) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45654) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50255 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45654) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (4 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _53621 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _53687 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53621 + 650]
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53621 + 650])] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53621 + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53621 + 650])]
                                                    mem[64] = (32 * _53687) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _53687) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _53687) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _55123 = mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _53687) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53687) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _53687) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _53687) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _55123 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53687) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            require return_data.size >= 32
                                            if not mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649]:
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 622] = 32
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 654] = 42
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 686 len 42] = 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565
                                                revert with memory
                                                  from (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618
                                                   len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                var126001 = floor32(token1ToEarnedPath.length)
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (4 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + (-2 * ceil32(return_data.size)) + 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _45461 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _45655 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45461 + 650]
                                                mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45461 + 650])] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45461 + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45461 + 650])]
                                                mem[64] = (32 * _45655) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _45655) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _45655) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _50258 = mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _45655) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45655) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45655) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _45655) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50258 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45655) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (4 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45463 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45656 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45463 + 650]
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45463 + 650])] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45463 + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45463 + 650])]
                                                    mem[64] = (32 * _45656) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45656) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45656) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50262 = mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45656) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45656) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45656) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45656) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50262 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45656) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (4 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _53623 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _53688 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53623 + 650]
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53623 + 650])] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53623 + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53623 + 650])]
                                                    mem[64] = (32 * _53688) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _53688) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _53688) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _55126 = mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _53688) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53688) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _53688) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _53688) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _55126 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53688) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        if not ext_call.success:
                                            revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                                        if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 727 len 22]
                                        mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            var126001 = floor32(token1ToEarnedPath.length)
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _45453 = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _45651 = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45453 + 649]
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45453 + 649])] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45453 + 681 len floor32(mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45453 + 649])]
                                            mem[64] = (32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                            _50244 = mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50244 / 1000
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _50244 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45651) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45455 = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45652 = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45455 + 649]
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45455 + 649])] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45455 + 681 len floor32(mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45455 + 649])]
                                                mem[64] = (32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _50248 = mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50248 / 1000
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50248 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45652) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _53619 = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _53686 = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53619 + 649]
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53619 + 649])] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53619 + 681 len floor32(mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53619 + 649])]
                                                mem[64] = (32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _55120 = mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _55120 / 1000
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _55120 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53686) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                        else:
                            if slippageFactor * mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325] / mem[(32 * mem[ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 293] - 1) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 325] != slippageFactor:
                                revert with 0, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 490 len 31]
                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 389] = 26
                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 421] = 'SafeMath: division by zero'
                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token0ToEarnedPath.length)] = mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)]
                            require ext_code.size(address(uniRouterAddress))
                            call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args ext_call.return_data[0], slippageFactor * _26538 / 1000, Array(len=token0ToEarnedPath.length, data=mem[ceil32(return_data.size) + 293 len floor32(token0ToEarnedPath.length)], mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + floor32(token0ToEarnedPath.length) + 649 len (32 * token0ToEarnedPath.length) - floor32(token0ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(token1Address)
                            staticcall token1Address.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if earnedAddress != token1Address:
                                if ext_call.return_data[0] > 0:
                                    require ext_code.size(token1Address)
                                    staticcall token1Address.0xdd62ed3e with:
                                            gas gas_remaining wei
                                           args address(this.address), address(uniRouterAddress)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489] = address(uniRouterAddress)
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 521] = 2 * ext_call.return_data[0]
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 453] = 68
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 489 len 28] = Mask(224, 0, stor8)
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 485 len 4] = approve(address arg1, uint256 arg2)
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 553] = 32
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 585] = 'SafeERC20: low-level call failed'
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 
                                                    32,
                                                    38,
                                                    0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 723 len 26]
                                    if not ext_code.size(token1Address):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), Mask(224, 31, ext_call.return_data[0]) >> 31
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 709 len 4] = 0
                                    mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681 len 0] = 0
                                    call token1Address with:
                                       funct uint32(stor8)
                                         gas gas_remaining wei
                                        args Mask(224, 31, ext_call.return_data[0]) << 225, mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681 len 4]
                                    if return_data.size:
                                        mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = return_data.size
                                        mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 622] = 32
                                            mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 654] = 32
                                            mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 686] = 'SafeERC20: low-level call failed'
                                            revert with memory
                                              from (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618
                                               len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                        if not return_data.size:
                                            mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                var126001 = floor32(token1ToEarnedPath.length)
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (4 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + (-2 * ceil32(return_data.size)) + 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _45441 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _45645 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45441 + 650]
                                                mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45441 + 650])] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45441 + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45441 + 650])]
                                                mem[64] = (32 * _45645) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _45645) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _45645) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _50223 = mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _45645) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45645) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45645) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _45645) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50223 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45645) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (4 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45443 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45646 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45443 + 650]
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45443 + 650])] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45443 + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45443 + 650])]
                                                    mem[64] = (32 * _45646) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45646) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45646) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50227 = mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45646) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45646) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45646) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45646) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50227 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45646) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (4 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _53613 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _53683 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53613 + 650]
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53613 + 650])] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53613 + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53613 + 650])]
                                                    mem[64] = (32 * _53683) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _53683) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _53683) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _55111 = mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _53683) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53683) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _53683) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _53683) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _55111 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53683) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            require return_data.size >= 32
                                            if not mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649]:
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 622] = 32
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 654] = 42
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 686 len 42] = 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565
                                                revert with memory
                                                  from (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618
                                                   len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 618] = token1ToEarnedPath.length
                                            if not token1ToEarnedPath.length:
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (4 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + (-2 * ceil32(return_data.size)) + 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                require return_data.size >= 32
                                                _45445 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                _45647 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45445 + 650]
                                                mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45445 + 650])] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45445 + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45445 + 650])]
                                                mem[64] = (32 * _45647) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                mem[(32 * _45647) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                mem[(32 * _45647) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                _50230 = mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                if not mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                    mem[(32 * _45647) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45647) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45647) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                    mem[(32 * _45647) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50230 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45647) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[0] = 28
                                                mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650] = address(token1ToEarnedPath.field_0)
                                                if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (4 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _45447 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _45648 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45447 + 650]
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45447 + 650])] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45447 + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _45447 + 650])]
                                                    mem[64] = (32 * _45648) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _45648) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _45648) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _50234 = mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _45648) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45648) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _45648) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _45648) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _50234 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _45648) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                                else:
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682] = address(token1ToEarnedPath.field_256)
                                                    idx = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 682
                                                    s = 1
                                                    while (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 618 > idx:
                                                        mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                        idx = idx + 32
                                                        s = s + 1
                                                        continue 
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654] = ext_call.return_data[0]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 686] = 64
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 718] = token1ToEarnedPath.length
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 750 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                            gas gas_remaining wei
                                                           args mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 654 len (4 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + (-2 * ceil32(return_data.size)) + 96]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = (32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650
                                                    require return_data.size >= 32
                                                    _53615 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28]
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                    require mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650] <= 4294967296 and mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]) + 32 <= return_data.size
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650 len 4], ext_call.return_data[0 len 28] + 650]
                                                    _53684 = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53615 + 650]
                                                    mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53615 + 650])] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53615 + 682 len floor32(mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + _53615 + 650])]
                                                    mem[64] = (32 * _53684) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 746
                                                    mem[(32 * _53684) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] = 30
                                                    mem[(32 * _53684) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 714] = 'SafeMath: subtraction overflow'
                                                    if 1 > mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1 < mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650]
                                                    _55114 = mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]
                                                    if not mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682]:
                                                        mem[(32 * _53684) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53684) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                    else:
                                                        if slippageFactor * mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] / mem[(32 * mem[(32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 650] - 1) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 682] != slippageFactor:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[(32 * _53684) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 847 len 31]
                                                        mem[(32 * _53684) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + 1006 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)]
                                                        require ext_code.size(address(uniRouterAddress))
                                                        call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                             gas gas_remaining wei
                                                            args ext_call.return_data[0], slippageFactor * _55114 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + (4 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + 650 len floor32(token1ToEarnedPath.length)], mem[(32 * _53684) + (32 * _19640) + (6 * ceil32(return_data.size)) + (32 * token0ToEarnedPath.length) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1006 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    else:
                                        if not ext_call.success:
                                            revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor8), uint32(stor8), 2 * ext_call.return_data[0]
                                        if not approve(address arg1, uint256 arg2), Mask(224, 0, stor8):
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 727 len 22]
                                        mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 617] = token1ToEarnedPath.length
                                        if not token1ToEarnedPath.length:
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                            require ext_code.size(address(uniRouterAddress))
                                            staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                    gas gas_remaining wei
                                                   args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                            require return_data.size >= 32
                                            _45437 = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                            require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                            require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                            require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                            _45643 = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45437 + 649]
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45437 + 649])] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45437 + 681 len floor32(mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45437 + 649])]
                                            mem[64] = (32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                            mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                            mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                            if 1 > mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                            _50216 = mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                            if not mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                            else:
                                                if slippageFactor * mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50216 / 1000
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args ext_call.return_data[0], slippageFactor * _50216 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45643) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                        else:
                                            mem[0] = 28
                                            mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649] = address(token1ToEarnedPath.field_0)
                                            if (32 * token1ToEarnedPath.length) + 32 <= 64:
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _45439 = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _45644 = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45439 + 649]
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45439 + 649])] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45439 + 681 len floor32(mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _45439 + 649])]
                                                mem[64] = (32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _50220 = mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _50220 / 1000
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _50220 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _45644) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                            else:
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681] = address(token1ToEarnedPath.field_256)
                                                idx = (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 681
                                                s = 1
                                                while (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 617 > idx:
                                                    mem[idx + 32] = token1ToEarnedPath[s].field_256
                                                    idx = idx + 32
                                                    s = s + 1
                                                    continue 
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 653] = ext_call.return_data[0]
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 685] = 64
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 717] = token1ToEarnedPath.length
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 749 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                require ext_code.size(address(uniRouterAddress))
                                                staticcall address(uniRouterAddress).getAmountsOut(uint256 arg1, address[] arg2) with:
                                                        gas gas_remaining wei
                                                       args ext_call.return_data[0], Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 749 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)])
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                mem[64] = (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649
                                                require return_data.size >= 32
                                                _53611 = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28]
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] <= 4294967296
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 32 <= return_data.size
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649] <= 4294967296 and mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + (32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]) + 32 <= return_data.size
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + 649 len 4], ext_call.return_data[0 len 28] + 649]
                                                _53682 = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53611 + 649]
                                                mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681 len floor32(mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53611 + 649])] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53611 + 681 len floor32(mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + (32 * token1ToEarnedPath.length) + _53611 + 649])]
                                                mem[64] = (32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745
                                                mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] = 30
                                                mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 713] = 'SafeMath: subtraction overflow'
                                                if 1 > mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1 < mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649]
                                                _55108 = mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]
                                                if not mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681]:
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = 0
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp + sub_1b61e055, token1ToEarnedPath.length, mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]
                                                else:
                                                    if slippageFactor * mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] / mem[(32 * mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 649] - 1) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 681] != slippageFactor:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 846 len 31]
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 745] = 26
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 777] = 'SafeMath: division by zero'
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 809] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 813] = ext_call.return_data[0]
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 845] = slippageFactor * _55108 / 1000
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 909] = this.address
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 941] = block.timestamp + sub_1b61e055
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 877] = 160
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 973] = token1ToEarnedPath.length
                                                    mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + 1005 len floor32(token1ToEarnedPath.length)] = mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)]
                                                    require ext_code.size(address(uniRouterAddress))
                                                    call address(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                         gas gas_remaining wei
                                                        args ext_call.return_data[0], slippageFactor * _55108 / 1000, Array(len=token1ToEarnedPath.length, data=mem[(32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + ceil32(return_data.size) + 649 len floor32(token1ToEarnedPath.length)], mem[(32 * _53682) + (32 * _19640) + ceil32(return_data.size) + (32 * token0ToEarnedPath.length) + (2 * ceil32(return_data.size)) + (32 * token1ToEarnedPath.length) + floor32(token1ToEarnedPath.length) + 1005 len (32 * token1ToEarnedPath.length) - floor32(token1ToEarnedPath.length)]), address(this.address), block.timestamp + sub_1b61e055
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
}



}
