contract main {




// =====================  Runtime code  =====================


const chainmail = 7, 150 * 10^18, 2, 40, 5, 2, -5, 30, 320, 384, 9, 0, 0, 27, Mask(216, 40, 'The suit includes gauntlets') >> 40, 0

const shield_tower = 18, 30 * 10^18, 4, 45, 4, 2, -10, 50, 320, 384, 13, 0, 0, 459, 0xfe54686973206d61737369766520776f6f64656e20736869656c64206973206e6561726c792061732074616c6c20617320796f75206172652e20496e206d6f737420736974756174696f6e732c2069742070726f76696465732074686520696e6469636174656420736869656c6420626f6e757320746f20796f75722041432e20486f77657665722c20796f752063616e20696e73746561642075736520697420617320746f74616c20636f7665722c2074686f75676820796f75206d757374206769766520757020796f75722061747461636b7320746f20646f20736f2e2054686520736869656c6420646f6573206e6f742c20686f77657665722c2070726f7669646520636f76657220616761696e7374207461726765746564207370656c6c733b2061207370656c6c6361737465722063616e20636173742061207370656c6c206f6e20796f7520627920746172676574696e672074686520736869656c6420796f752061726520686f6c64696e672e20596f752063616e6e6f7420626173682077697468206120746f77657220736869656c642c206e6f722063616e20796f752075736520796f757220736869656c642068616e6420666f7220616e797468696e6720656c7365, mem[651 len 21] >> 3416, 0

const full_plate = 12, 1500 * 10^18, 3, 50, 8, 1, -6, 35, 320, 384, 10, Mask(80, 176, 'Full plate') >> 176, 0, 326, 0x2e546865207375697420696e636c75646573206761756e746c6574732c206865617679206c65617468657220626f6f74732c2061207669736f7265642068656c6d65742c20616e64206120746869636b206c61796572206f662070616464696e67207468617420697320776f726e20756e6465726e65617468207468652061726d6f722e20456163682073756974206f662066756c6c20706c617465206d75737420626520696e646976696475616c6c792066697474656420746f20697473206f776e65722062792061206d61737465722061726d6f72736d6974682c20616c74686f756768206120636170747572656420737569742063616e20626520726573697a656420746f206669742061206e6577206f776e6572206174206120636f7374206f662032303020746f203830302028326434783130302920676f6c6420706965636573, mem[518 len 26] >> 2352, 0

const leather = 2, 10 * 10^18, 1, 15, 2, 6, 0, 10, 320, 384, 7, 0, 0, 0

const index = '', 0

const scale_mail = 6, 50 * 10^18, 2, 30, 4, 3, -4, 25, 320, 384, 10, 0, 0, 28, 0x2e546865207375697420696e636c75646573206761756e74, 0

const chain_shirt = 4, 100 * 10^18, 1, 25, 4, 4, -2, 20, 320, 384, 11, 0, 0, 37, 0x4120636861696e20736869727420636f6d65732077697468206120737465656c2063617000, mem[229 len 27] >> 40, 0

const padded = 1, 5 * 10^18, 1, 10, 1, 8, 0, 5, 320, 384, 6, 0, 0, 0

const shield_heavy_wooden = 16, 7 * 10^18, 4, 10, 2, 8, -2, 15, 320, 384, 20, 6010169587057044512, 0, 109, 0x73576f6f64656e20616e6420737465656c20736869656c6473206f66666572207468652073616d652062617369632070726f74656374696f6e2c2074686f756768207468657920726573706f6e6420646966666572656e746c7920746f207370656369616c2061747461636b73, mem[301 len 19] >> 616, 0

const studded_leather = 3, 25 * 10^18, 1, 20, 3, 5, -1, 15, 320, 384, 15, 0, 0, 0

const banded_mail = 10, 250 * 10^18, 3, 35, 6, 1, -6, 35, 320, 384, 11, 0, 0, 28, 0x2e546865207375697420696e636c75646573206761756e74, 0

const shield_light_steel = 15, 25 * 10^14 * 3600, 4, 6, 1, 8, -1, 5, 320, 384, 19, 91707909958756, 0, 108, 0x2e576f6f64656e20616e6420737465656c20736869656c6473206f66666572207468652073616d652062617369632070726f74656374696f6e2c2074686f756768207468657920726573706f6e6420646966666572656e746c7920746f207370656369616c2061747461636b, mem[300 len 20] >> 608, 0

const half_plate = 11, 600 * 10^18, 3, 50, 7, 0, -7, 40, 320, 384, 10, Mask(80, 176, 'Half-plate') >> 176, 0, 28, 0x2e546865207375697420696e636c75646573206761756e74, 0

const splint_mail = 9, 200 * 10^18, 3, 45, 6, 0, -7, 40, 320, 384, 11, 0, 0, 28, 0x2e546865207375697420696e636c75646573206761756e74, 0

const hide = 5, 15 * 10^18, 2, 25, 3, 4, -3, 20, 320, 384, 4, 0, 0, 0

const class = '', 0

const breastplate = 8, 200 * 10^18, 2, 30, 5, 3, -4, 25, 320, 384, 11, Mask(88, 168, 'Breastplate') >> 168, 0, 35, 0x2e497420636f6d6573207769746820612068656c6d657420616e642067726561766573, mem[227 len 29] >> 24, 0

const shield_light_wooden = 14, 3 * 10^18, 4, 5, 1, 8, -1, 5, 320, 384, 20, 6010169587057044512, 0, 108, 0x2e576f6f64656e20616e6420737465656c20736869656c6473206f66666572207468652073616d652062617369632070726f74656374696f6e2c2074686f756768207468657920726573706f6e6420646966666572656e746c7920746f207370656369616c2061747461636b, mem[300 len 20] >> 608, 0

const buckler = 13, 15 * 10^18, 4, 5, 1, 8, -1, 5, 320, 384, 7, 0, 0, 558, 0x2e5468697320736d616c6c206d6574616c20736869656c6420697320776f726e20737472617070656420746f20796f757220666f726561726d2e20596f752063616e20757365206120626f77206f722063726f7373626f7720776974686f75742070656e616c7479207768696c65206361727279696e672069742e20596f752063616e20616c736f2075736520796f757220736869656c642061726d20746f207769656c64206120776561706f6e20287768657468657220796f7520617265207573696e6720616e206f66662d68616e6420776561706f6e206f72207573696e6720796f7572206f66662068616e6420746f2068656c70207769656c6420612074776f2d68616e64656420776561706f6e292c2062757420796f752074616b652061202d312070656e616c7479206f6e2061747461636b20726f6c6c73207768696c6520646f696e6720736f2e20546869732070656e616c747920737461636b7320776974682074686f73652074686174206d6179206170706c7920666f72206669676874696e67207769746820796f7572206f66662068616e6420616e6420666f72206669676874696e6720776974682074776f20776561706f6e732e20496e20616e7920636173652c20696620796f7520757365206120776561706f6e20696e20796f7572206f66662068616e642c20796f7520646f6e742067657420746865206275636b6c65727320414320626f6e757320666f72207468652072657374206f662074686520726f756e64, mem[750 len 18] >> 4208, 0

const shield_heavy_steel = 17, 20 * 10^18, 4, 15, 2, 8, -2, 15, 320, 384, 19, 91707909958756, 0, 109, 0x73576f6f64656e20616e6420737465656c20736869656c6473206f66666572207468652073616d652062617369632070726f74656374696f6e2c2074686f756768207468657920726573706f6e6420646966666572656e746c7920746f207370656369616c2061747461636b73, mem[301 len 19] >> 616, 0


function _fallback() payable {
    revert
}

function get_proficiency_by_id(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if 1 == arg1:
        return '', 0
    if 2 == arg1:
        return '', 0
    if 3 == arg1:
        return '', 0
    if arg1 != 4:
        return ' '
    return 'Shields', 0
}

function item_by_id(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if 1 == arg1:
        return 1, 5 * 10^18, 1, 10, 1, 8, 0, 5, 320, 384, 6, 0, 0, 0
    if 2 == arg1:
        return 2, 10 * 10^18, 1, 15, 2, 6, 0, 10, 320, 384, 7, 0, 0, 0
    if 3 == arg1:
        return 3, 25 * 10^18, 1, 20, 3, 5, -1, 15, 320, 384, 15, 0, 0, 0
    if 4 == arg1:
        return 4, 
               100 * 10^18,
               1,
               25,
               4,
               4,
               -2,
               20,
               320,
               384,
               11,
               0,
               0,
               37,
               0x4120636861696e20736869727420636f6d65732077697468206120737465656c2063617000, mem[229 len 27] >> 40,
               0
    if 5 == arg1:
        return 5, 15 * 10^18, 2, 25, 3, 4, -3, 20, 320, 384, 4, 0, 0, 0
    if 6 == arg1:
        return 6, 50 * 10^18, 2, 30, 4, 3, -4, 25, 320, 384, 10, 0, 0, 28, 0x2e546865207375697420696e636c75646573206761756e74, 0
    if 7 == arg1:
        return 7, 150 * 10^18, 2, 40, 5, 2, -5, 30, 320, 384, 9, 0, 0, 27, 'The suit includes gauntlets', 0
    if 8 == arg1:
        return 8, 
               200 * 10^18,
               2,
               30,
               5,
               3,
               -4,
               25,
               320,
               384,
               11,
               'Breastplate',
               0,
               35,
               0x2e497420636f6d6573207769746820612068656c6d657420616e642067726561766573, mem[227 len 29] >> 24,
               0
    if 9 == arg1:
        return 9, 200 * 10^18, 3, 45, 6, 0, -7, 40, 320, 384, 11, 0, 0, 28, 0x2e546865207375697420696e636c75646573206761756e74, 0
    if 10 == arg1:
        return 10, 250 * 10^18, 3, 35, 6, 1, -6, 35, 320, 384, 11, 0, 0, 28, 0x2e546865207375697420696e636c75646573206761756e74, 0
    if 11 == arg1:
        return 11, 
               600 * 10^18,
               3,
               50,
               7,
               0,
               -7,
               40,
               320,
               384,
               10,
               'Half-plate',
               0,
               28,
               0x2e546865207375697420696e636c75646573206761756e74,
               0
    if 12 == arg1:
        return 12, 
               1500 * 10^18,
               3,
               50,
               8,
               1,
               -6,
               35,
               320,
               384,
               10,
               'Full plate',
               0,
               326,
               0x2e546865207375697420696e636c75646573206761756e746c6574732c206865617679206c65617468657220626f6f74732c2061207669736f7265642068656c6d65742c20616e64206120746869636b206c61796572206f662070616464696e67207468617420697320776f726e20756e6465726e65617468207468652061726d6f722e20456163682073756974206f662066756c6c20706c617465206d75737420626520696e646976696475616c6c792066697474656420746f20697473206f776e65722062792061206d61737465722061726d6f72736d6974682c20616c74686f756768206120636170747572656420737569742063616e20626520726573697a656420746f206669742061206e6577206f776e6572206174206120636f7374206f662032303020746f203830302028326434783130302920676f6c6420706965636573, mem[518 len 26] >> 2352,
               0
    if 13 == arg1:
        return 13, 
               15 * 10^18,
               4,
               5,
               1,
               8,
               -1,
               5,
               320,
               384,
               7,
               0,
               0,
               558,
               0x2e5468697320736d616c6c206d6574616c20736869656c6420697320776f726e20737472617070656420746f20796f757220666f726561726d2e20596f752063616e20757365206120626f77206f722063726f7373626f7720776974686f75742070656e616c7479207768696c65206361727279696e672069742e20596f752063616e20616c736f2075736520796f757220736869656c642061726d20746f207769656c64206120776561706f6e20287768657468657220796f7520617265207573696e6720616e206f66662d68616e6420776561706f6e206f72207573696e6720796f7572206f66662068616e6420746f2068656c70207769656c6420612074776f2d68616e64656420776561706f6e292c2062757420796f752074616b652061202d312070656e616c7479206f6e2061747461636b20726f6c6c73207768696c6520646f696e6720736f2e20546869732070656e616c747920737461636b7320776974682074686f73652074686174206d6179206170706c7920666f72206669676874696e67207769746820796f7572206f66662068616e6420616e6420666f72206669676874696e6720776974682074776f20776561706f6e732e20496e20616e7920636173652c20696620796f7520757365206120776561706f6e20696e20796f7572206f66662068616e642c20796f7520646f6e742067657420746865206275636b6c65727320414320626f6e757320666f72207468652072657374206f662074686520726f756e64, mem[750 len 18] >> 4208,
               0
    if 14 == arg1:
        return 14, 
               3 * 10^18,
               4,
               5,
               1,
               8,
               -1,
               5,
               320,
               384,
               20,
               6010169587057044512,
               0,
               108,
               0x2e576f6f64656e20616e6420737465656c20736869656c6473206f66666572207468652073616d652062617369632070726f74656374696f6e2c2074686f756768207468657920726573706f6e6420646966666572656e746c7920746f207370656369616c2061747461636b, mem[300 len 20] >> 608,
               0
    if 15 == arg1:
        return 15, 
               25 * 10^14 * 3600,
               4,
               6,
               1,
               8,
               -1,
               5,
               320,
               384,
               19,
               91707909958756,
               0,
               108,
               0x2e576f6f64656e20616e6420737465656c20736869656c6473206f66666572207468652073616d652062617369632070726f74656374696f6e2c2074686f756768207468657920726573706f6e6420646966666572656e746c7920746f207370656369616c2061747461636b, mem[300 len 20] >> 608,
               0
    if 16 == arg1:
        return 16, 
               7 * 10^18,
               4,
               10,
               2,
               8,
               -2,
               15,
               320,
               384,
               20,
               6010169587057044512,
               0,
               109,
               0x73576f6f64656e20616e6420737465656c20736869656c6473206f66666572207468652073616d652062617369632070726f74656374696f6e2c2074686f756768207468657920726573706f6e6420646966666572656e746c7920746f207370656369616c2061747461636b73, mem[301 len 19] >> 616,
               0
    if 17 == arg1:
        return 17, 
               20 * 10^18,
               4,
               15,
               2,
               8,
               -2,
               15,
               320,
               384,
               19,
               91707909958756,
               0,
               109,
               0x73576f6f64656e20616e6420737465656c20736869656c6473206f66666572207468652073616d652062617369632070726f74656374696f6e2c2074686f756768207468657920726573706f6e6420646966666572656e746c7920746f207370656369616c2061747461636b73, mem[301 len 19] >> 616,
               0
    if arg1 != 18:
        return 0, 0, 0, 0, 0, 0, 0, 0, 320, 352, 0, 0
    return 18, 
           30 * 10^18,
           4,
           45,
           4,
           2,
           -10,
           50,
           320,
           384,
           13,
           0,
           0,
           459,
           0xfe54686973206d61737369766520776f6f64656e20736869656c64206973206e6561726c792061732074616c6c20617320796f75206172652e20496e206d6f737420736974756174696f6e732c2069742070726f76696465732074686520696e6469636174656420736869656c6420626f6e757320746f20796f75722041432e20486f77657665722c20796f752063616e20696e73746561642075736520697420617320746f74616c20636f7665722c2074686f75676820796f75206d757374206769766520757020796f75722061747461636b7320746f20646f20736f2e2054686520736869656c6420646f6573206e6f742c20686f77657665722c2070726f7669646520636f76657220616761696e7374207461726765746564207370656c6c733b2061207370656c6c6361737465722063616e20636173742061207370656c6c206f6e20796f7520627920746172676574696e672074686520736869656c6420796f752061726520686f6c64696e672e20596f752063616e6e6f7420626173682077697468206120746f77657220736869656c642c206e6f722063616e20796f752075736520796f757220736869656c642068616e6420666f7220616e797468696e6720656c7365, mem[651 len 21] >> 3416,
           0
}



}
