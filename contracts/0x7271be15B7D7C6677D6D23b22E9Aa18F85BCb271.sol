contract main {




// =====================  Runtime code  =====================


#
#  - getTotalTVL()
#  - sub_0e631718(?)
#  - sub_28b3cd61(?)
#  - sub_37108b02(?)
#  - sub_69d2bf84(?)
#  - sub_860b2bfd(?)
#  - sub_9a6e23e4(?)
#  - getLPValue(address arg1)
#  - getTokenPrice(address arg1, uint256 arg2)
#
address owner;
address sub_abc7e0dfAddress;
address usdcTokenAddress;
address wNativeAddress;
address sub_8ed8ea7eAddress;
address sub_d4384dbeAddress;
address sub_a46507b4Address;
address sub_f5a45b5cAddress;
array of struct vaults;
array of struct sub_cce3db19;

function usdcToken() payable {
    return usdcTokenAddress
}

function sub_18b1eca4(?) payable {
    return sub_cce3db19.length
}

function wNative() payable {
    return wNativeAddress
}

function getVaultsLength() payable {
    return vaults.length
}

function vaults(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < vaults.length
    return vaults[arg1].field_0
}

function owner() payable {
    return owner
}

function sub_8ed8ea7e(?) payable {
    return sub_8ed8ea7eAddress
}

function sub_a46507b4(?) payable {
    return sub_a46507b4Address
}

function sub_abc7e0df(?) payable {
    return sub_abc7e0dfAddress
}

function sub_cce3db19(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < sub_cce3db19.length
    return sub_cce3db19[arg1].field_0
}

function sub_d4384dbe(?) payable {
    return sub_d4384dbeAddress
}

function sub_f5a45b5c(?) payable {
    return sub_f5a45b5cAddress
}

function _fallback() payable {
    revert
}

function getBalance(address arg1) payable {
    require calldata.size - 4 >= 32
    return eth.balance(arg1)
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    emit 0x728be007: owner, 0
    owner = 0
}

function sub_8f990b8b(?) payable {
    require ext_code.size(sub_a46507b4Address)
    staticcall sub_a46507b4Address.0x8f990b8b with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_f0b3110e(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.pid() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_75f5be71(?) payable {
    require ext_code.size(sub_a46507b4Address)
    staticcall sub_a46507b4Address.totalAllocPoint() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_51b05a53(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.boo() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[12 len 20]
}

function totalToken(address arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.totalToken() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function totalSupply(address arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.totalSupply() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getLpToken(address arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.lpToken() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[12 len 20]
}

function getBaseToken(address arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.baseToken() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[12 len 20]
}

function getMasterChef(address arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.masterChef() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[12 len 20]
}

function getReinvestBounty(address arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.reinvestBountyBps() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getFarmingToken(address arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.farmingToken() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[12 len 20]
}

function sub_e9217d63(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_a46507b4Address)
    staticcall sub_a46507b4Address.0x1526fe27 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 128
    return ext_call.return_data[32]
}

function balanceOf(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require ext_code.size(arg1)
    staticcall arg1.balanceOf(address arg1) with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_c186d07e(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_a46507b4Address)
    staticcall sub_a46507b4Address.0x1526fe27 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 128
    return ext_call.return_data[12 len 20], ext_call.return_data[32], ext_call.return_data[64], ext_call.return_data[96]
}

function poolInfo(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_f5a45b5cAddress)
    staticcall sub_f5a45b5cAddress.0x1526fe27 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 128
    return ext_call.return_data[12 len 20], ext_call.return_data[32], ext_call.return_data[64], ext_call.return_data[96]
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0xfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                    mem[202 len 26]
    emit 0x728be007: owner, arg1
    owner = arg1
}

function sub_a21a4781(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.pid() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_a46507b4Address)
    staticcall sub_a46507b4Address.userInfo(uint256 arg1, address arg2) with:
            gas gas_remaining wei
           args ext_call.return_data[0], arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    return ext_call.return_data[0]
}

function sub_dc527f9f(?) payable {
    if sub_cce3db19.length:
        mem[128] = address(sub_cce3db19.field_0)
        if (32 * sub_cce3db19.length) + 32 > 64:
            mem[160] = address(sub_cce3db19.field_256)
            idx = 160
            s = 1
            while (32 * sub_cce3db19.length) + 96 > idx:
                mem[idx + 32] = sub_cce3db19[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
    mem[(32 * sub_cce3db19.length) + 128] = 32
    mem[(32 * sub_cce3db19.length) + 160] = sub_cce3db19.length
    mem[(32 * sub_cce3db19.length) + 192 len floor32(sub_cce3db19.length)] = mem[128 len floor32(sub_cce3db19.length)]
    return memory
      from (32 * sub_cce3db19.length) + 128
       len (96 * sub_cce3db19.length) + 64
}

function getVaults() payable {
    if not vaults.length:
        mem[(32 * vaults.length) + 128] = 32
        mem[(32 * vaults.length) + 160] = vaults.length
        mem[(32 * vaults.length) + 192 len floor32(vaults.length)] = mem[128 len floor32(vaults.length)]
        return memory
          from (32 * vaults.length) + 128
           len (96 * vaults.length) + 64
    mem[128] = address(vaults.field_0)
    idx = 128
    s = 0
    while (32 * vaults.length) + 96 > idx:
        mem[idx + 32] = vaults[s].field_256
        idx = idx + 32
        s = s + 1
        continue 
    mem[(32 * vaults.length) + 192 len floor32(vaults.length)] = mem[128 len floor32(vaults.length)]
    return Array(len=vaults.length, data=mem[128 len floor32(vaults.length)], mem[(32 * vaults.length) + floor32(vaults.length) + 192 len (32 * vaults.length) - floor32(vaults.length)]), 
}

function setVaults(address[] arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 <= 4294967296
    require arg1 + 36 <= calldata.size
    require arg1.length <= 4294967296 and arg1 + (32 * arg1.length) + 36 <= calldata.size
    mem[128 len 32 * arg1.length] = call.data[arg1 + 36 len 32 * arg1.length]
    mem[(32 * arg1.length) + 128] = 0
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    vaults.length = arg1.length
    if not arg1.length:
        idx = 0
        while vaults.length > idx:
            vaults[idx].field_0 = 0
            idx = idx + 1
            continue 
    else:
        s = 0
        idx = 128
        while (32 * arg1.length) + 128 > idx:
            vaults[s].field_0 = mem[idx + 12 len 20]
            s = s + 1
            idx = idx + 32
            continue 
        idx = Mask(251, 0, (32 * arg1.length) + 31) >> 5
        while vaults.length > idx:
            vaults[idx].field_0 = 0
            idx = idx + 1
            continue 
}

function sub_ab25f70a(?) payable {
    require calldata.size - 4 >= 32
    require arg1 <= 4294967296
    require arg1 + 36 <= calldata.size
    require arg1.length <= 4294967296 and arg1 + (32 * arg1.length) + 36 <= calldata.size
    mem[128 len 32 * arg1.length] = call.data[arg1 + 36 len 32 * arg1.length]
    mem[(32 * arg1.length) + 128] = 0
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    sub_cce3db19.length = arg1.length
    if not arg1.length:
        idx = 0
        while sub_cce3db19.length > idx:
            sub_cce3db19[idx].field_0 = 0
            idx = idx + 1
            continue 
    else:
        s = 0
        idx = 128
        while (32 * arg1.length) + 128 > idx:
            sub_cce3db19[s].field_0 = mem[idx + 12 len 20]
            s = s + 1
            idx = idx + 32
            continue 
        idx = Mask(251, 0, (32 * arg1.length) + 31) >> 5
        while sub_cce3db19.length > idx:
            sub_cce3db19[idx].field_0 = 0
            idx = idx + 1
            continue 
}

function getTokenBalance(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require ext_code.size(arg1)
    staticcall arg1.config() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getWrappedNativeAddr() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(arg1)
    staticcall arg1.token() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] == address(ext_call.return_data[0]):
        return eth.balance(arg2)
    require ext_code.size(arg1)
    staticcall arg1.token() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).balanceOf(address arg1) with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function ibTokenPrice(address arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.decimals() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(arg1)
    staticcall arg1.totalSupply() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    require ext_code.size(arg1)
    staticcall arg1.totalSupply() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(arg1)
    staticcall arg1.totalToken() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        if ext_call.return_data[0]:
            return (0 / ext_call.return_data[0])
    else:
        if 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(ext_call.return_data[0]):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        if ext_call.return_data[0]:
            return (10^uint8(ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0])
    ('iszero', ('ext_call.return_data', 0, 32))
    revert
}

function sub_9f1390b0(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_a46507b4Address)
    staticcall sub_a46507b4Address.totalAllocPoint() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    require ext_code.size(sub_a46507b4Address)
    staticcall sub_a46507b4Address.0x8f990b8b with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        require ext_code.size(sub_a46507b4Address)
        staticcall sub_a46507b4Address.0x1526fe27 with:
                gas gas_remaining wei
               args arg1
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 128
        if ext_call.return_data[32]:
            if 10^18 * ext_call.return_data[32] / ext_call.return_data[32] != 10^18:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            ext_call.return_data[101 len 27],
                            mem[224 len 4]
            if 10^18 * ext_call.return_data[32]:
                if 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[32] != 10^18:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                ext_call.return_data[101 len 27],
                                mem[224 len 4]
        revert with 0, 'SafeMath: division by zero'
    if 10^18 * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    require ext_code.size(sub_a46507b4Address)
    staticcall sub_a46507b4Address.0x1526fe27 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 128
    if not ext_call.return_data[32]:
        if 10^18 * ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require 10^18 * ext_call.return_data[0]
        if not 0 / 10^18 * ext_call.return_data[0]:
            return 0
        if ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 0 / 10^18 * ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 27],
                        mem[224 len 4]
        return (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 10^18)
    if 10^18 * ext_call.return_data[32] / ext_call.return_data[32] != 10^18:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    ext_call.return_data[101 len 27],
                    mem[224 len 4]
    if not 10^18 * ext_call.return_data[32]:
        if 10^18 * ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require 10^18 * ext_call.return_data[0]
        if not 0 / 10^18 * ext_call.return_data[0]:
            return 0
        if ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 0 / 10^18 * ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 27],
                        mem[224 len 4]
        return (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 10^18)
    if 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[32] != 10^18:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    ext_call.return_data[101 len 27],
                    mem[224 len 4]
    if 10^18 * ext_call.return_data[0] <= 0:
        revert with 0, 'SafeMath: division by zero'
    require 10^18 * ext_call.return_data[0]
    if not 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[0]:
        return 0
    if ext_call.return_data[0] * 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[0] / 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    ext_call.return_data[101 len 27],
                    mem[224 len 4]
    return (ext_call.return_data[0] * 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[0] / 10^18)
}

function sub_686a2371(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_a46507b4Address)
    staticcall sub_a46507b4Address.totalAllocPoint() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    require ext_code.size(sub_a46507b4Address)
    staticcall sub_a46507b4Address.0x8f990b8b with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        require ext_code.size(sub_a46507b4Address)
        staticcall sub_a46507b4Address.0x1526fe27 with:
                gas gas_remaining wei
               args arg1
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 128
        if ext_call.return_data[32]:
            if 10^18 * ext_call.return_data[32] / ext_call.return_data[32] != 10^18:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            ext_call.return_data[101 len 27],
                            mem[224 len 4]
            if 10^18 * ext_call.return_data[32]:
                if 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[32] != 10^18:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                ext_call.return_data[101 len 27],
                                mem[224 len 4]
        revert with 0, 'SafeMath: division by zero'
    if 10^18 * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    require ext_code.size(sub_a46507b4Address)
    staticcall sub_a46507b4Address.0x1526fe27 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 128
    if not ext_call.return_data[32]:
        if 10^18 * ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require 10^18 * ext_call.return_data[0]
        if not 0 / 10^18 * ext_call.return_data[0]:
            return 0
        if ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 0 / 10^18 * ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 27],
                        mem[224 len 4]
        if not ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 10^18:
            return 0
        if 8760 * 24 * 3600 * ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 10^18 / ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 10^18 != 8760 * 24 * 3600:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 27],
                        mem[224 len 4]
        return (8760 * 24 * 3600 * ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 10^18)
    if 10^18 * ext_call.return_data[32] / ext_call.return_data[32] != 10^18:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    ext_call.return_data[101 len 27],
                    mem[224 len 4]
    if not 10^18 * ext_call.return_data[32]:
        if 10^18 * ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require 10^18 * ext_call.return_data[0]
        if not 0 / 10^18 * ext_call.return_data[0]:
            return 0
        if ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 0 / 10^18 * ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 27],
                        mem[224 len 4]
        if not ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 10^18:
            return 0
        if 8760 * 24 * 3600 * ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 10^18 / ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 10^18 != 8760 * 24 * 3600:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 27],
                        mem[224 len 4]
        return (8760 * 24 * 3600 * ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[0] / 10^18)
    if 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[32] != 10^18:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    ext_call.return_data[101 len 27],
                    mem[224 len 4]
    if 10^18 * ext_call.return_data[0] <= 0:
        revert with 0, 'SafeMath: division by zero'
    require 10^18 * ext_call.return_data[0]
    if not 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[0]:
        return 0
    if ext_call.return_data[0] * 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[0] / 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    ext_call.return_data[101 len 27],
                    mem[224 len 4]
    if not ext_call.return_data[0] * 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[0] / 10^18:
        return 0
    if 8760 * 24 * 3600 * ext_call.return_data[0] * 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[0] / 10^18 / ext_call.return_data[0] * 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[0] / 10^18 != 8760 * 24 * 3600:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    ext_call.return_data[101 len 27],
                    mem[224 len 4]
    return (8760 * 24 * 3600 * ext_call.return_data[0] * 1000000000000000000 * 10^18 * ext_call.return_data[32] / 10^18 * ext_call.return_data[0] / 10^18)
}

function sub_59592396(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.getReserves() with:
            gas gas_remaining wei
    mem[96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(arg1)
    staticcall arg1.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[96] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).symbol() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _13 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require return_data.size >= mem[mem[96] + 96] + mem[96] + 32 and mem[mem[96] + 96] <= 4294967296
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _16 = mem[_13 + 96]
    mem[ceil32(return_data.size) + 128 len ceil32(mem[_13 + 96])] = mem[_13 + 128 len ceil32(mem[_13 + 96])]
    if not _16 % 32:
        mem[_16 + ceil32(return_data.size) + 128] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.symbol() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[_16 + ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = _16 + (2 * ceil32(return_data.size)) + 128
        require return_data.size >= 32
        _136 = mem[_16 + ceil32(return_data.size) + 128]
        require mem[_16 + ceil32(return_data.size) + 128] <= 4294967296
        require mem[_16 + ceil32(return_data.size) + 128] + 32 <= return_data.size
        require return_data.size >= mem[_16 + ceil32(return_data.size) + mem[_16 + ceil32(return_data.size) + 128] + 128] + mem[_16 + ceil32(return_data.size) + 128] + 32 and mem[_16 + ceil32(return_data.size) + mem[_16 + ceil32(return_data.size) + 128] + 128] <= 4294967296
        mem[_16 + (2 * ceil32(return_data.size)) + 128] = mem[_16 + ceil32(return_data.size) + mem[_16 + ceil32(return_data.size) + 128] + 128]
        _142 = mem[_16 + ceil32(return_data.size) + _136 + 128]
        mem[_16 + (2 * ceil32(return_data.size)) + 160 len ceil32(mem[_16 + ceil32(return_data.size) + _136 + 128])] = mem[_16 + ceil32(return_data.size) + _136 + 160 len ceil32(mem[_16 + ceil32(return_data.size) + _136 + 128])]
        if not _142 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_16 + (2 * ceil32(return_data.size)) + 160 len mem[_16 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_142 + _16 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (0 / Mask(112, 0, ext_call.return_data[32]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_142 + _16 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))
        else:
            mem[floor32(_142) + _16 + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_142) + _16 + (2 * ceil32(return_data.size)) + -(_142 % 32) + 192 len _142 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_16 + (2 * ceil32(return_data.size)) + 160 len mem[_16 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_142) + _16 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (0 / Mask(112, 0, ext_call.return_data[32]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_142) + _16 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))
    else:
        mem[floor32(_16) + ceil32(return_data.size) + 128] = mem[floor32(_16) + ceil32(return_data.size) + -(_16 % 32) + 160 len _16 % 32]
        mem[floor32(_16) + ceil32(return_data.size) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.symbol() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[floor32(_16) + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = floor32(_16) + (2 * ceil32(return_data.size)) + 160
        require return_data.size >= 32
        _139 = mem[floor32(_16) + ceil32(return_data.size) + 160]
        require mem[floor32(_16) + ceil32(return_data.size) + 160] <= 4294967296
        require mem[floor32(_16) + ceil32(return_data.size) + 160] + 32 <= return_data.size
        require return_data.size >= mem[floor32(_16) + ceil32(return_data.size) + mem[floor32(_16) + ceil32(return_data.size) + 160] + 160] + mem[floor32(_16) + ceil32(return_data.size) + 160] + 32 and mem[floor32(_16) + ceil32(return_data.size) + mem[floor32(_16) + ceil32(return_data.size) + 160] + 160] <= 4294967296
        mem[floor32(_16) + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_16) + ceil32(return_data.size) + mem[floor32(_16) + ceil32(return_data.size) + 160] + 160]
        _144 = mem[floor32(_16) + ceil32(return_data.size) + _139 + 160]
        mem[floor32(_16) + (2 * ceil32(return_data.size)) + 192 len ceil32(mem[floor32(_16) + ceil32(return_data.size) + _139 + 160])] = mem[floor32(_16) + ceil32(return_data.size) + _139 + 192 len ceil32(mem[floor32(_16) + ceil32(return_data.size) + _139 + 160])]
        if not _144 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_16) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_16) + (2 * ceil32(return_data.size)) + 160]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_144 + floor32(_16) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (0 / Mask(112, 0, ext_call.return_data[32]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_144 + floor32(_16) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))
        else:
            mem[floor32(_144) + floor32(_16) + (2 * ceil32(return_data.size)) + 192] = mem[floor32(_144) + floor32(_16) + (2 * ceil32(return_data.size)) + -(_144 % 32) + 224 len _144 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_16) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_16) + (2 * ceil32(return_data.size)) + 160]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_144) + floor32(_16) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (0 / Mask(112, 0, ext_call.return_data[32]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_144) + floor32(_16) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))
    revert
}

function sub_97ff562e(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.getReserves() with:
            gas gas_remaining wei
    mem[96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(arg1)
    staticcall arg1.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[96] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).symbol() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _13 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require return_data.size >= mem[mem[96] + 96] + mem[96] + 32 and mem[mem[96] + 96] <= 4294967296
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _16 = mem[_13 + 96]
    mem[ceil32(return_data.size) + 128 len ceil32(mem[_13 + 96])] = mem[_13 + 128 len ceil32(mem[_13 + 96])]
    if not _16 % 32:
        mem[_16 + ceil32(return_data.size) + 128] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.symbol() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[_16 + ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = _16 + (2 * ceil32(return_data.size)) + 128
        require return_data.size >= 32
        _200 = mem[_16 + ceil32(return_data.size) + 128]
        require mem[_16 + ceil32(return_data.size) + 128] <= 4294967296
        require mem[_16 + ceil32(return_data.size) + 128] + 32 <= return_data.size
        require return_data.size >= mem[_16 + ceil32(return_data.size) + mem[_16 + ceil32(return_data.size) + 128] + 128] + mem[_16 + ceil32(return_data.size) + 128] + 32 and mem[_16 + ceil32(return_data.size) + mem[_16 + ceil32(return_data.size) + 128] + 128] <= 4294967296
        mem[_16 + (2 * ceil32(return_data.size)) + 128] = mem[_16 + ceil32(return_data.size) + mem[_16 + ceil32(return_data.size) + 128] + 128]
        _206 = mem[_16 + ceil32(return_data.size) + _200 + 128]
        mem[_16 + (2 * ceil32(return_data.size)) + 160 len ceil32(mem[_16 + ceil32(return_data.size) + _200 + 128])] = mem[_16 + ceil32(return_data.size) + _200 + 160 len ceil32(mem[_16 + ceil32(return_data.size) + _200 + 128])]
        if not _206 % 32:
            require ext_code.size(arg1)
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_16 + (2 * ceil32(return_data.size)) + 160 len mem[_16 + (2 * ceil32(return_data.size)) + 128]]):
                staticcall arg1.token1() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (0 / Mask(112, 0, ext_call.return_data[32]))
                else:
                    if 10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^ext_call.return_data[31 len 1]:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_206 + _16 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))
            else:
                staticcall arg1.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                else:
                    if 10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^ext_call.return_data[31 len 1]:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_206 + _16 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))
        else:
            mem[floor32(_206) + _16 + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_206) + _16 + (2 * ceil32(return_data.size)) + -(_206 % 32) + 192 len _206 % 32]
            require ext_code.size(arg1)
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_16 + (2 * ceil32(return_data.size)) + 160 len mem[_16 + (2 * ceil32(return_data.size)) + 128]]):
                staticcall arg1.token1() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (0 / Mask(112, 0, ext_call.return_data[32]))
                else:
                    if 10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^ext_call.return_data[31 len 1]:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_206) + _16 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))
            else:
                staticcall arg1.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                else:
                    if 10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^ext_call.return_data[31 len 1]:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_206) + _16 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))
    else:
        mem[floor32(_16) + ceil32(return_data.size) + 128] = mem[floor32(_16) + ceil32(return_data.size) + -(_16 % 32) + 160 len _16 % 32]
        mem[floor32(_16) + ceil32(return_data.size) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.symbol() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[floor32(_16) + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = floor32(_16) + (2 * ceil32(return_data.size)) + 160
        require return_data.size >= 32
        _203 = mem[floor32(_16) + ceil32(return_data.size) + 160]
        require mem[floor32(_16) + ceil32(return_data.size) + 160] <= 4294967296
        require mem[floor32(_16) + ceil32(return_data.size) + 160] + 32 <= return_data.size
        require return_data.size >= mem[floor32(_16) + ceil32(return_data.size) + mem[floor32(_16) + ceil32(return_data.size) + 160] + 160] + mem[floor32(_16) + ceil32(return_data.size) + 160] + 32 and mem[floor32(_16) + ceil32(return_data.size) + mem[floor32(_16) + ceil32(return_data.size) + 160] + 160] <= 4294967296
        mem[floor32(_16) + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_16) + ceil32(return_data.size) + mem[floor32(_16) + ceil32(return_data.size) + 160] + 160]
        _208 = mem[floor32(_16) + ceil32(return_data.size) + _203 + 160]
        mem[floor32(_16) + (2 * ceil32(return_data.size)) + 192 len ceil32(mem[floor32(_16) + ceil32(return_data.size) + _203 + 160])] = mem[floor32(_16) + ceil32(return_data.size) + _203 + 192 len ceil32(mem[floor32(_16) + ceil32(return_data.size) + _203 + 160])]
        if not _208 % 32:
            require ext_code.size(arg1)
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_16) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_16) + (2 * ceil32(return_data.size)) + 160]]):
                staticcall arg1.token1() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (0 / Mask(112, 0, ext_call.return_data[32]))
                else:
                    if 10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^ext_call.return_data[31 len 1]:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_208 + floor32(_16) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))
            else:
                staticcall arg1.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                else:
                    if 10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^ext_call.return_data[31 len 1]:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_208 + floor32(_16) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))
        else:
            mem[floor32(_208) + floor32(_16) + (2 * ceil32(return_data.size)) + 192] = mem[floor32(_208) + floor32(_16) + (2 * ceil32(return_data.size)) + -(_208 % 32) + 224 len _208 % 32]
            require ext_code.size(arg1)
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_16) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_16) + (2 * ceil32(return_data.size)) + 160]]):
                staticcall arg1.token1() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (0 / Mask(112, 0, ext_call.return_data[32]))
                else:
                    if 10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^ext_call.return_data[31 len 1]:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_208) + floor32(_16) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))
            else:
                staticcall arg1.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                else:
                    if 10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^ext_call.return_data[31 len 1]:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_208) + floor32(_16) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (10^ext_call.return_data[31 len 1] * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))
    revert
}

function sub_c3a84049(?) payable {
    require ext_code.size(sub_a46507b4Address)
    staticcall sub_a46507b4Address.boo() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_d4384dbeAddress)
    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args wNativeAddress, address(ext_call.return_data[0])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    mem[96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[96] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).symbol() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _21 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require return_data.size >= mem[mem[96] + 96] + mem[96] + 32 and mem[mem[96] + 96] <= 4294967296
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _24 = mem[_21 + 96]
    mem[ceil32(return_data.size) + 128 len ceil32(mem[_21 + 96])] = mem[_21 + 128 len ceil32(mem[_21 + 96])]
    if not _24 % 32:
        mem[_24 + ceil32(return_data.size) + 128] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.symbol() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[_24 + ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = _24 + (2 * ceil32(return_data.size)) + 128
        require return_data.size >= 32
        _4304 = mem[_24 + ceil32(return_data.size) + 128]
        require mem[_24 + ceil32(return_data.size) + 128] <= 4294967296
        require mem[_24 + ceil32(return_data.size) + 128] + 32 <= return_data.size
        require return_data.size >= mem[_24 + ceil32(return_data.size) + mem[_24 + ceil32(return_data.size) + 128] + 128] + mem[_24 + ceil32(return_data.size) + 128] + 32 and mem[_24 + ceil32(return_data.size) + mem[_24 + ceil32(return_data.size) + 128] + 128] <= 4294967296
        mem[_24 + (2 * ceil32(return_data.size)) + 128] = mem[_24 + ceil32(return_data.size) + mem[_24 + ceil32(return_data.size) + 128] + 128]
        _4310 = mem[_24 + ceil32(return_data.size) + _4304 + 128]
        mem[_24 + (2 * ceil32(return_data.size)) + 160 len ceil32(mem[_24 + ceil32(return_data.size) + _4304 + 128])] = mem[_24 + ceil32(return_data.size) + _4304 + 160 len ceil32(mem[_24 + ceil32(return_data.size) + _4304 + 128])]
        if not _4310 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_24 + (2 * ceil32(return_data.size)) + 160 len mem[_24 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4310 + _24 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8878 = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4310 + _24 + (2 * ceil32(return_data.size)) + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4310 + _24 + (2 * ceil32(return_data.size)) + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160] = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _8928 = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8878 + 160]
                        mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8878 + 160])] = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8878 + 192 len ceil32(mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8878 + 160])]
                        if not _8928 % 32:
                            mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _12916 = mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192] = mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13011 = mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12916 + 192]
                            mem[_8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12916 + 192])] = mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12916 + 224 len ceil32(mem[_8928 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12916 + 192])]
                            if not _13011 % 32:
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224 len mem[_8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13011 + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13011 + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13011 + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13011 + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13011 + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13011 + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13011) + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13011) + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + -(_13011 % 32) + 256 len _13011 % 32]
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224 len mem[_8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13011) + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13011) + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13011) + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13011) + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13011) + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13011) + _8928 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + -(_8928 % 32) + 224 len _8928 % 32]
                            mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12963 = mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13042 = mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12963 + 224]
                            mem[floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12963 + 224])] = mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12963 + 256 len ceil32(mem[floor32(_8928) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12963 + 224])]
                            if not _13042 % 32:
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13042 + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13042 + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13042 + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13042 + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13042 + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13042 + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13042) + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13042) + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + -(_13042 % 32) + 288 len _13042 % 32]
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13042) + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13042) + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13042) + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13042) + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13042) + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13042) + floor32(_8928) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4310 + _24 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8893 = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4310 + _24 + (2 * ceil32(return_data.size)) + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4310 + _24 + (2 * ceil32(return_data.size)) + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160] = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _8939 = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8893 + 160]
                        mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8893 + 160])] = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8893 + 192 len ceil32(mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8893 + 160])]
                        if not _8939 % 32:
                            mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _12913 = mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192] = mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13009 = mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12913 + 192]
                            mem[_8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12913 + 192])] = mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12913 + 224 len ceil32(mem[_8939 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12913 + 192])]
                            if not _13009 % 32:
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224 len mem[_8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13009 + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13009 + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13009 + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13009 + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13009 + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13009 + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13009) + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13009) + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + -(_13009 % 32) + 256 len _13009 % 32]
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224 len mem[_8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13009) + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13009) + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13009) + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13009) + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13009) + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13009) + _8939 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + -(_8939 % 32) + 224 len _8939 % 32]
                            mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12961 = mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13041 = mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12961 + 224]
                            mem[floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12961 + 224])] = mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12961 + 256 len ceil32(mem[floor32(_8939) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12961 + 224])]
                            if not _13041 % 32:
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13041 + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13041 + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13041 + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13041 + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13041 + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13041 + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13041) + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13041) + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + -(_13041 % 32) + 288 len _13041 % 32]
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13041) + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13041) + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13041) + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13041) + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13041) + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13041) + floor32(_8939) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4310 + _24 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8896 = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4310 + _24 + (2 * ceil32(return_data.size)) + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4310 + _24 + (2 * ceil32(return_data.size)) + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160] = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _8941 = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8896 + 160]
                        mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8896 + 160])] = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8896 + 192 len ceil32(mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8896 + 160])]
                        if not _8941 % 32:
                            mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _12922 = mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192] = mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13015 = mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12922 + 192]
                            mem[_8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12922 + 192])] = mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12922 + 224 len ceil32(mem[_8941 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12922 + 192])]
                            if not _13015 % 32:
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224 len mem[_8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13015 + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13015 + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13015 + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13015 + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13015 + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13015 + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13015) + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13015) + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + -(_13015 % 32) + 256 len _13015 % 32]
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224 len mem[_8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13015) + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13015) + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13015) + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13015) + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13015) + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13015) + _8941 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + -(_8941 % 32) + 224 len _8941 % 32]
                            mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12967 = mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13044 = mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12967 + 224]
                            mem[floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12967 + 224])] = mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12967 + 256 len ceil32(mem[floor32(_8941) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12967 + 224])]
                            if not _13044 % 32:
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13044 + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13044 + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13044 + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13044 + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13044 + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13044 + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13044) + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13044) + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + -(_13044 % 32) + 288 len _13044 % 32]
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13044) + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13044) + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13044) + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13044) + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13044) + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13044) + floor32(_8941) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4310 + _24 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8912 = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4310 + _24 + (2 * ceil32(return_data.size)) + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4310 + _24 + (2 * ceil32(return_data.size)) + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160] = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + mem[_4310 + _24 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _8952 = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8912 + 160]
                        mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8912 + 160])] = mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8912 + 192 len ceil32(mem[_4310 + _24 + (2 * ceil32(return_data.size)) + _8912 + 160])]
                        if not _8952 % 32:
                            mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _12919 = mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192] = mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13013 = mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12919 + 192]
                            mem[_8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12919 + 192])] = mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12919 + 224 len ceil32(mem[_8952 + _4310 + _24 + (4 * ceil32(return_data.size)) + _12919 + 192])]
                            if not _13013 % 32:
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224 len mem[_8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13013 + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13013 + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13013 + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13013 + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13013 + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13013 + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13013) + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13013) + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + -(_13013 % 32) + 256 len _13013 % 32]
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 224 len mem[_8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13013) + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13013) + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13013) + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13013) + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13013) + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13013) + _8952 + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + -(_8952 % 32) + 224 len _8952 % 32]
                            mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12965 = mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13043 = mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12965 + 224]
                            mem[floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12965 + 224])] = mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12965 + 256 len ceil32(mem[floor32(_8952) + _4310 + _24 + (4 * ceil32(return_data.size)) + _12965 + 224])]
                            if not _13043 % 32:
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13043 + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13043 + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13043 + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13043 + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13043 + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13043 + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13043) + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13043) + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + -(_13043 % 32) + 288 len _13043 % 32]
                                if sha3(mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 192 len mem[_4310 + _24 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13043) + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13043) + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13043) + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13043) + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13043) + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13043) + floor32(_8952) + _4310 + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
        else:
            mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + -(_4310 % 32) + 192 len _4310 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_24 + (2 * ceil32(return_data.size)) + 160 len mem[_24 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8899 = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8943 = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8899 + 192]
                        mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8899 + 192])] = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8899 + 224 len ceil32(mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8899 + 192])]
                        if not _8943 % 32:
                            mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12928 = mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224] = mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13019 = mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12928 + 224]
                            mem[_8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12928 + 224])] = mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12928 + 256 len ceil32(mem[_8943 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12928 + 224])]
                            if not _13019 % 32:
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256 len mem[_8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13019 + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13019 + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13019 + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13019 + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13019 + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13019 + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13019) + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13019) + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + -(_13019 % 32) + 288 len _13019 % 32]
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256 len mem[_8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13019) + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13019) + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13019) + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13019) + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13019) + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13019) + _8943 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + -(_8943 % 32) + 256 len _8943 % 32]
                            mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12971 = mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13046 = mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12971 + 256]
                            mem[floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12971 + 256])] = mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12971 + 288 len ceil32(mem[floor32(_8943) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12971 + 256])]
                            if not _13046 % 32:
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13046 + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13046 + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13046 + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13046 + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13046 + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13046 + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13046) + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13046) + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + -(_13046 % 32) + 320 len _13046 % 32]
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13046) + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13046) + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13046) + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13046) + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13046) + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13046) + floor32(_8943) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8914 = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8953 = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8914 + 192]
                        mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8914 + 192])] = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8914 + 224 len ceil32(mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8914 + 192])]
                        if not _8953 % 32:
                            mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12925 = mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224] = mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13017 = mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12925 + 224]
                            mem[_8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12925 + 224])] = mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12925 + 256 len ceil32(mem[_8953 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12925 + 224])]
                            if not _13017 % 32:
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256 len mem[_8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13017 + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13017 + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13017 + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13017 + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13017 + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13017 + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13017) + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13017) + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + -(_13017 % 32) + 288 len _13017 % 32]
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256 len mem[_8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13017) + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13017) + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13017) + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13017) + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13017) + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13017) + _8953 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + -(_8953 % 32) + 256 len _8953 % 32]
                            mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12969 = mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13045 = mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12969 + 256]
                            mem[floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12969 + 256])] = mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12969 + 288 len ceil32(mem[floor32(_8953) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12969 + 256])]
                            if not _13045 % 32:
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13045 + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13045 + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13045 + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13045 + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13045 + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13045 + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13045) + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13045) + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + -(_13045 % 32) + 320 len _13045 % 32]
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13045) + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13045) + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13045) + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13045) + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13045) + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13045) + floor32(_8953) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8917 = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8955 = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8917 + 192]
                        mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8917 + 192])] = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8917 + 224 len ceil32(mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8917 + 192])]
                        if not _8955 % 32:
                            mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12934 = mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224] = mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13023 = mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12934 + 224]
                            mem[_8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12934 + 224])] = mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12934 + 256 len ceil32(mem[_8955 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12934 + 224])]
                            if not _13023 % 32:
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256 len mem[_8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13023 + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13023 + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13023 + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13023 + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13023 + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13023 + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13023) + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13023) + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + -(_13023 % 32) + 288 len _13023 % 32]
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256 len mem[_8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13023) + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13023) + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13023) + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13023) + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13023) + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13023) + _8955 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + -(_8955 % 32) + 256 len _8955 % 32]
                            mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12975 = mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13048 = mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12975 + 256]
                            mem[floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12975 + 256])] = mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12975 + 288 len ceil32(mem[floor32(_8955) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12975 + 256])]
                            if not _13048 % 32:
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13048 + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13048 + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13048 + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13048 + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13048 + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13048 + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13048) + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13048) + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + -(_13048 % 32) + 320 len _13048 % 32]
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13048) + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13048) + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13048) + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13048) + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13048) + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13048) + floor32(_8955) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8931 = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8966 = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8931 + 192]
                        mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8931 + 192])] = mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8931 + 224 len ceil32(mem[floor32(_4310) + _24 + (2 * ceil32(return_data.size)) + _8931 + 192])]
                        if not _8966 % 32:
                            mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12931 = mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224] = mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13021 = mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12931 + 224]
                            mem[_8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12931 + 224])] = mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12931 + 256 len ceil32(mem[_8966 + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12931 + 224])]
                            if not _13021 % 32:
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256 len mem[_8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13021 + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13021 + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13021 + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13021 + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13021 + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13021 + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13021) + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13021) + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + -(_13021 % 32) + 288 len _13021 % 32]
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256 len mem[_8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13021) + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13021) + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13021) + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13021) + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13021) + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13021) + _8966 + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + -(_8966 % 32) + 256 len _8966 % 32]
                            mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12973 = mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13047 = mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12973 + 256]
                            mem[floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12973 + 256])] = mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12973 + 288 len ceil32(mem[floor32(_8966) + floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + _12973 + 256])]
                            if not _13047 % 32:
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13047 + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13047 + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13047 + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13047 + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13047 + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13047 + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13047) + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13047) + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + -(_13047 % 32) + 320 len _13047 % 32]
                                if sha3(mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4310) + _24 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13047) + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13047) + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13047) + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13047) + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13047) + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13047) + floor32(_8966) + floor32(_4310) + _24 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
    else:
        mem[floor32(_24) + ceil32(return_data.size) + 128] = mem[floor32(_24) + ceil32(return_data.size) + -(_24 % 32) + 160 len _24 % 32]
        mem[floor32(_24) + ceil32(return_data.size) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.symbol() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[floor32(_24) + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = floor32(_24) + (2 * ceil32(return_data.size)) + 160
        require return_data.size >= 32
        _4307 = mem[floor32(_24) + ceil32(return_data.size) + 160]
        require mem[floor32(_24) + ceil32(return_data.size) + 160] <= 4294967296
        require mem[floor32(_24) + ceil32(return_data.size) + 160] + 32 <= return_data.size
        require return_data.size >= mem[floor32(_24) + ceil32(return_data.size) + mem[floor32(_24) + ceil32(return_data.size) + 160] + 160] + mem[floor32(_24) + ceil32(return_data.size) + 160] + 32 and mem[floor32(_24) + ceil32(return_data.size) + mem[floor32(_24) + ceil32(return_data.size) + 160] + 160] <= 4294967296
        mem[floor32(_24) + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_24) + ceil32(return_data.size) + mem[floor32(_24) + ceil32(return_data.size) + 160] + 160]
        _4312 = mem[floor32(_24) + ceil32(return_data.size) + _4307 + 160]
        mem[floor32(_24) + (2 * ceil32(return_data.size)) + 192 len ceil32(mem[floor32(_24) + ceil32(return_data.size) + _4307 + 160])] = mem[floor32(_24) + ceil32(return_data.size) + _4307 + 192 len ceil32(mem[floor32(_24) + ceil32(return_data.size) + _4307 + 160])]
        if not _4312 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_24) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_24) + (2 * ceil32(return_data.size)) + 160]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8886 = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192] = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8934 = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8886 + 192]
                        mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8886 + 192])] = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8886 + 224 len ceil32(mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8886 + 192])]
                        if not _8934 % 32:
                            mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12940 = mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224] = mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13027 = mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12940 + 224]
                            mem[_8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12940 + 224])] = mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12940 + 256 len ceil32(mem[_8934 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12940 + 224])]
                            if not _13027 % 32:
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256 len mem[_8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13027 + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13027 + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13027 + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13027 + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13027 + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13027 + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13027) + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13027) + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13027 % 32) + 288 len _13027 % 32]
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256 len mem[_8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13027) + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13027) + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13027) + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13027) + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13027) + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13027) + _8934 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + -(_8934 % 32) + 256 len _8934 % 32]
                            mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12979 = mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13050 = mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12979 + 256]
                            mem[floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12979 + 256])] = mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12979 + 288 len ceil32(mem[floor32(_8934) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12979 + 256])]
                            if not _13050 % 32:
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13050 + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13050 + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13050 + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13050 + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13050 + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13050 + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13050) + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13050) + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13050 % 32) + 320 len _13050 % 32]
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13050) + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13050) + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13050) + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13050) + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13050) + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13050) + floor32(_8934) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8902 = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192] = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8945 = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8902 + 192]
                        mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8902 + 192])] = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8902 + 224 len ceil32(mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8902 + 192])]
                        if not _8945 % 32:
                            mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12937 = mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224] = mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13025 = mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12937 + 224]
                            mem[_8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12937 + 224])] = mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12937 + 256 len ceil32(mem[_8945 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12937 + 224])]
                            if not _13025 % 32:
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256 len mem[_8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13025 + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13025 + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13025 + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13025 + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13025 + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13025 + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13025) + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13025) + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13025 % 32) + 288 len _13025 % 32]
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256 len mem[_8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13025) + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13025) + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13025) + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13025) + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13025) + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13025) + _8945 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + -(_8945 % 32) + 256 len _8945 % 32]
                            mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12977 = mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13049 = mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12977 + 256]
                            mem[floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12977 + 256])] = mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12977 + 288 len ceil32(mem[floor32(_8945) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12977 + 256])]
                            if not _13049 % 32:
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13049 + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13049 + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13049 + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13049 + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13049 + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13049 + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13049) + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13049) + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13049 % 32) + 320 len _13049 % 32]
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13049) + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13049) + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13049) + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13049) + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13049) + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13049) + floor32(_8945) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8905 = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192] = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8947 = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8905 + 192]
                        mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8905 + 192])] = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8905 + 224 len ceil32(mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8905 + 192])]
                        if not _8947 % 32:
                            mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12946 = mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224] = mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13031 = mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12946 + 224]
                            mem[_8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12946 + 224])] = mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12946 + 256 len ceil32(mem[_8947 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12946 + 224])]
                            if not _13031 % 32:
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256 len mem[_8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13031 + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13031 + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13031 + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13031 + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13031 + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13031 + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13031) + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13031) + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13031 % 32) + 288 len _13031 % 32]
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256 len mem[_8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13031) + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13031) + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13031) + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13031) + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13031) + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13031) + _8947 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + -(_8947 % 32) + 256 len _8947 % 32]
                            mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12983 = mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13052 = mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12983 + 256]
                            mem[floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12983 + 256])] = mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12983 + 288 len ceil32(mem[floor32(_8947) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12983 + 256])]
                            if not _13052 % 32:
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13052 + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13052 + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13052 + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13052 + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13052 + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13052 + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13052) + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13052) + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13052 % 32) + 320 len _13052 % 32]
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13052) + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13052) + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13052) + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13052) + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13052) + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13052) + floor32(_8947) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8920 = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192] = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8957 = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8920 + 192]
                        mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8920 + 192])] = mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8920 + 224 len ceil32(mem[_4312 + floor32(_24) + (2 * ceil32(return_data.size)) + _8920 + 192])]
                        if not _8957 % 32:
                            mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12943 = mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224] = mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13029 = mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12943 + 224]
                            mem[_8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12943 + 224])] = mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12943 + 256 len ceil32(mem[_8957 + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12943 + 224])]
                            if not _13029 % 32:
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256 len mem[_8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13029 + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13029 + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13029 + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13029 + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13029 + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13029 + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13029) + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13029) + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13029 % 32) + 288 len _13029 % 32]
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256 len mem[_8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13029) + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13029) + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13029) + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13029) + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13029) + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13029) + _8957 + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + -(_8957 % 32) + 256 len _8957 % 32]
                            mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12981 = mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13051 = mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12981 + 256]
                            mem[floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12981 + 256])] = mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12981 + 288 len ceil32(mem[floor32(_8957) + _4312 + floor32(_24) + (4 * ceil32(return_data.size)) + _12981 + 256])]
                            if not _13051 % 32:
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13051 + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13051 + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13051 + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13051 + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13051 + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13051 + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13051) + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13051) + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13051 % 32) + 320 len _13051 % 32]
                                if sha3(mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 224 len mem[_4312 + floor32(_24) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13051) + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13051) + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13051) + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13051) + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13051) + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13051) + floor32(_8957) + _4312 + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
        else:
            mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 192] = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + -(_4312 % 32) + 224 len _4312 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_24) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_24) + (2 * ceil32(return_data.size)) + 160]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _8908 = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _8949 = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8908 + 224]
                        mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8908 + 224])] = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8908 + 256 len ceil32(mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8908 + 224])]
                        if not _8949 % 32:
                            mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12952 = mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256] = mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13035 = mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12952 + 256]
                            mem[_8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12952 + 256])] = mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12952 + 288 len ceil32(mem[_8949 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12952 + 256])]
                            if not _13035 % 32:
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[_8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13035 + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13035 + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13035 + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13035 + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13035 + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13035 + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13035) + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13035) + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13035 % 32) + 320 len _13035 % 32]
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[_8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13035) + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13035) + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13035) + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13035) + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13035) + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13035) + _8949 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + -(_8949 % 32) + 288 len _8949 % 32]
                            mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _12987 = mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13054 = mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12987 + 288]
                            mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12987 + 288])] = mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12987 + 320 len ceil32(mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12987 + 288])]
                            if not _13054 % 32:
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13054 + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13054 + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13054 + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13054 + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13054 + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13054 + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13054) + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13054) + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13054 % 32) + 352 len _13054 % 32]
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13054) + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13054) + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13054) + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13054) + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13054) + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13054) + floor32(_8949) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _8922 = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _8958 = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8922 + 224]
                        mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8922 + 224])] = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8922 + 256 len ceil32(mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8922 + 224])]
                        if not _8958 % 32:
                            mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12949 = mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256] = mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13033 = mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12949 + 256]
                            mem[_8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12949 + 256])] = mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12949 + 288 len ceil32(mem[_8958 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12949 + 256])]
                            if not _13033 % 32:
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[_8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13033 + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13033 + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13033 + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13033 + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13033 + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13033 + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13033) + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13033) + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13033 % 32) + 320 len _13033 % 32]
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[_8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13033) + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13033) + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13033) + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13033) + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13033) + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13033) + _8958 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + -(_8958 % 32) + 288 len _8958 % 32]
                            mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _12985 = mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13053 = mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12985 + 288]
                            mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12985 + 288])] = mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12985 + 320 len ceil32(mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12985 + 288])]
                            if not _13053 % 32:
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13053 + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13053 + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13053 + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13053 + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13053 + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13053 + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13053) + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13053) + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13053 % 32) + 352 len _13053 % 32]
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13053) + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13053) + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13053) + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13053) + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13053) + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13053) + floor32(_8958) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _8925 = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _8960 = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8925 + 224]
                        mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8925 + 224])] = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8925 + 256 len ceil32(mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8925 + 224])]
                        if not _8960 % 32:
                            mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12958 = mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256] = mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13039 = mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12958 + 256]
                            mem[_8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12958 + 256])] = mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12958 + 288 len ceil32(mem[_8960 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12958 + 256])]
                            if not _13039 % 32:
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[_8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13039 + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13039 + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13039 + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13039 + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13039 + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13039 + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13039) + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13039) + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13039 % 32) + 320 len _13039 % 32]
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[_8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13039) + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13039) + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13039) + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13039) + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13039) + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13039) + _8960 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + -(_8960 % 32) + 288 len _8960 % 32]
                            mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _12991 = mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13056 = mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12991 + 288]
                            mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12991 + 288])] = mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12991 + 320 len ceil32(mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12991 + 288])]
                            if not _13056 % 32:
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13056 + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13056 + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13056 + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13056 + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13056 + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13056 + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13056) + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13056) + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13056 % 32) + 352 len _13056 % 32]
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13056) + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13056) + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13056) + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13056) + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13056) + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13056) + floor32(_8960) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _8937 = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _8972 = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8937 + 224]
                        mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8937 + 224])] = mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8937 + 256 len ceil32(mem[floor32(_4312) + floor32(_24) + (2 * ceil32(return_data.size)) + _8937 + 224])]
                        if not _8972 % 32:
                            mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12955 = mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256] = mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13037 = mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12955 + 256]
                            mem[_8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12955 + 256])] = mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12955 + 288 len ceil32(mem[_8972 + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12955 + 256])]
                            if not _13037 % 32:
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[_8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13037 + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13037 + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13037 + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13037 + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13037 + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13037 + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13037) + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13037) + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13037 % 32) + 320 len _13037 % 32]
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288 len mem[_8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13037) + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13037) + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13037) + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13037) + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13037) + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13037) + _8972 + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + -(_8972 % 32) + 288 len _8972 % 32]
                            mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _12989 = mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13055 = mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12989 + 288]
                            mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12989 + 288])] = mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12989 + 320 len ceil32(mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + _12989 + 288])]
                            if not _13055 % 32:
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13055 + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13055 + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13055 + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13055 + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13055 + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13055 + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13055) + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13055) + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + -(_13055 % 32) + 352 len _13055 % 32]
                                if sha3(mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4312) + floor32(_24) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13055) + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13055) + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13055) + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13055) + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13055) + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13055) + floor32(_8972) + floor32(_4312) + floor32(_24) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
    revert
}

function meowPrice() payable {
    require ext_code.size(sub_d4384dbeAddress)
    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args wNativeAddress, sub_abc7e0dfAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[12 len 20]:
        return 0
    require ext_code.size(sub_d4384dbeAddress)
    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args wNativeAddress, sub_abc7e0dfAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    mem[96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[96] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).symbol() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _23 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require return_data.size >= mem[mem[96] + 96] + mem[96] + 32 and mem[mem[96] + 96] <= 4294967296
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _26 = mem[_23 + 96]
    mem[ceil32(return_data.size) + 128 len ceil32(mem[_23 + 96])] = mem[_23 + 128 len ceil32(mem[_23 + 96])]
    if not _26 % 32:
        mem[_26 + ceil32(return_data.size) + 128] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.symbol() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[_26 + ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = _26 + (2 * ceil32(return_data.size)) + 128
        require return_data.size >= 32
        _4306 = mem[_26 + ceil32(return_data.size) + 128]
        require mem[_26 + ceil32(return_data.size) + 128] <= 4294967296
        require mem[_26 + ceil32(return_data.size) + 128] + 32 <= return_data.size
        require return_data.size >= mem[_26 + ceil32(return_data.size) + mem[_26 + ceil32(return_data.size) + 128] + 128] + mem[_26 + ceil32(return_data.size) + 128] + 32 and mem[_26 + ceil32(return_data.size) + mem[_26 + ceil32(return_data.size) + 128] + 128] <= 4294967296
        mem[_26 + (2 * ceil32(return_data.size)) + 128] = mem[_26 + ceil32(return_data.size) + mem[_26 + ceil32(return_data.size) + 128] + 128]
        _4312 = mem[_26 + ceil32(return_data.size) + _4306 + 128]
        mem[_26 + (2 * ceil32(return_data.size)) + 160 len ceil32(mem[_26 + ceil32(return_data.size) + _4306 + 128])] = mem[_26 + ceil32(return_data.size) + _4306 + 160 len ceil32(mem[_26 + ceil32(return_data.size) + _4306 + 128])]
        if not _4312 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_26 + (2 * ceil32(return_data.size)) + 160 len mem[_26 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4312 + _26 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8880 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _8930 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8880 + 160]
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8880 + 160])] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8880 + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8880 + 160])]
                        if not _8930 % 32:
                            mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _12918 = mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192] = mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13013 = mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12918 + 192]
                            mem[_8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12918 + 192])] = mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12918 + 224 len ceil32(mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12918 + 192])]
                            if not _13013 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13013 + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13013 + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13013 + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13013 + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13013 + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13013 + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13013 % 32) + 256 len _13013 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + -(_8930 % 32) + 224 len _8930 % 32]
                            mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12965 = mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13044 = mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12965 + 224]
                            mem[floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12965 + 224])] = mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12965 + 256 len ceil32(mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12965 + 224])]
                            if not _13044 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13044 + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13044 + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13044 + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13044 + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13044 + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13044 + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13044 % 32) + 288 len _13044 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4312 + _26 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8895 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _8941 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8895 + 160]
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8895 + 160])] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8895 + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8895 + 160])]
                        if not _8941 % 32:
                            mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _12915 = mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192] = mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13011 = mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12915 + 192]
                            mem[_8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12915 + 192])] = mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12915 + 224 len ceil32(mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12915 + 192])]
                            if not _13011 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13011 + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13011 + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13011 + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13011 + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13011 + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13011 + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13011 % 32) + 256 len _13011 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + -(_8941 % 32) + 224 len _8941 % 32]
                            mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12963 = mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13043 = mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12963 + 224]
                            mem[floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12963 + 224])] = mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12963 + 256 len ceil32(mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12963 + 224])]
                            if not _13043 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13043 + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13043 + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13043 + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13043 + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13043 + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13043 + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13043 % 32) + 288 len _13043 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4312 + _26 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8898 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _8943 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8898 + 160]
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8898 + 160])] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8898 + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8898 + 160])]
                        if not _8943 % 32:
                            mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _12924 = mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192] = mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13017 = mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12924 + 192]
                            mem[_8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12924 + 192])] = mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12924 + 224 len ceil32(mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12924 + 192])]
                            if not _13017 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13017 + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13017 + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13017 + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13017 + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13017 + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13017 + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13017 % 32) + 256 len _13017 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + -(_8943 % 32) + 224 len _8943 % 32]
                            mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12969 = mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13046 = mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12969 + 224]
                            mem[floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12969 + 224])] = mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12969 + 256 len ceil32(mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12969 + 224])]
                            if not _13046 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13046 + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13046 + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13046 + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13046 + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13046 + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13046 + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13046 % 32) + 288 len _13046 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4312 + _26 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8914 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _8954 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8914 + 160]
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8914 + 160])] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8914 + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8914 + 160])]
                        if not _8954 % 32:
                            mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _12921 = mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192] = mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13015 = mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12921 + 192]
                            mem[_8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12921 + 192])] = mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12921 + 224 len ceil32(mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12921 + 192])]
                            if not _13015 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13015 + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13015 + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13015 + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13015 + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13015 + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13015 + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13015 % 32) + 256 len _13015 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + -(_8954 % 32) + 224 len _8954 % 32]
                            mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12967 = mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13045 = mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12967 + 224]
                            mem[floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12967 + 224])] = mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12967 + 256 len ceil32(mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12967 + 224])]
                            if not _13045 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13045 + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13045 + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13045 + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13045 + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13045 + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13045 + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13045 % 32) + 288 len _13045 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
        else:
            mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + -(_4312 % 32) + 192 len _4312 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_26 + (2 * ceil32(return_data.size)) + 160 len mem[_26 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8901 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8945 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8901 + 192]
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8901 + 192])] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8901 + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8901 + 192])]
                        if not _8945 % 32:
                            mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12930 = mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224] = mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13021 = mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12930 + 224]
                            mem[_8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12930 + 224])] = mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12930 + 256 len ceil32(mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12930 + 224])]
                            if not _13021 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13021 + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13021 + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13021 + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13021 + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13021 + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13021 + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13021 % 32) + 288 len _13021 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + -(_8945 % 32) + 256 len _8945 % 32]
                            mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12973 = mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13048 = mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12973 + 256]
                            mem[floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12973 + 256])] = mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12973 + 288 len ceil32(mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12973 + 256])]
                            if not _13048 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13048 + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13048 + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13048 + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13048 + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13048 + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13048 + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13048 % 32) + 320 len _13048 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8916 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8955 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8916 + 192]
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8916 + 192])] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8916 + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8916 + 192])]
                        if not _8955 % 32:
                            mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12927 = mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224] = mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13019 = mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12927 + 224]
                            mem[_8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12927 + 224])] = mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12927 + 256 len ceil32(mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12927 + 224])]
                            if not _13019 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13019 + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13019 + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13019 + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13019 + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13019 + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13019 + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13019 % 32) + 288 len _13019 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + -(_8955 % 32) + 256 len _8955 % 32]
                            mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12971 = mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13047 = mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12971 + 256]
                            mem[floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12971 + 256])] = mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12971 + 288 len ceil32(mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12971 + 256])]
                            if not _13047 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13047 + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13047 + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13047 + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13047 + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13047 + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13047 + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13047 % 32) + 320 len _13047 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8919 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8957 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8919 + 192]
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8919 + 192])] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8919 + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8919 + 192])]
                        if not _8957 % 32:
                            mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12936 = mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224] = mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13025 = mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12936 + 224]
                            mem[_8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12936 + 224])] = mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12936 + 256 len ceil32(mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12936 + 224])]
                            if not _13025 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13025 + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13025 + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13025 + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13025 + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13025 + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13025 + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13025 % 32) + 288 len _13025 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + -(_8957 % 32) + 256 len _8957 % 32]
                            mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12977 = mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13050 = mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12977 + 256]
                            mem[floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12977 + 256])] = mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12977 + 288 len ceil32(mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12977 + 256])]
                            if not _13050 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13050 + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13050 + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13050 + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13050 + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13050 + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13050 + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13050 % 32) + 320 len _13050 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8933 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8968 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8933 + 192]
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8933 + 192])] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8933 + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8933 + 192])]
                        if not _8968 % 32:
                            mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12933 = mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224] = mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13023 = mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12933 + 224]
                            mem[_8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12933 + 224])] = mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12933 + 256 len ceil32(mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12933 + 224])]
                            if not _13023 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13023 + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13023 + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13023 + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13023 + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13023 + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13023 + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13023 % 32) + 288 len _13023 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + -(_8968 % 32) + 256 len _8968 % 32]
                            mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12975 = mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13049 = mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12975 + 256]
                            mem[floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12975 + 256])] = mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12975 + 288 len ceil32(mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12975 + 256])]
                            if not _13049 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13049 + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13049 + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13049 + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13049 + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13049 + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13049 + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13049 % 32) + 320 len _13049 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
    else:
        mem[floor32(_26) + ceil32(return_data.size) + 128] = mem[floor32(_26) + ceil32(return_data.size) + -(_26 % 32) + 160 len _26 % 32]
        mem[floor32(_26) + ceil32(return_data.size) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.symbol() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[floor32(_26) + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = floor32(_26) + (2 * ceil32(return_data.size)) + 160
        require return_data.size >= 32
        _4309 = mem[floor32(_26) + ceil32(return_data.size) + 160]
        require mem[floor32(_26) + ceil32(return_data.size) + 160] <= 4294967296
        require mem[floor32(_26) + ceil32(return_data.size) + 160] + 32 <= return_data.size
        require return_data.size >= mem[floor32(_26) + ceil32(return_data.size) + mem[floor32(_26) + ceil32(return_data.size) + 160] + 160] + mem[floor32(_26) + ceil32(return_data.size) + 160] + 32 and mem[floor32(_26) + ceil32(return_data.size) + mem[floor32(_26) + ceil32(return_data.size) + 160] + 160] <= 4294967296
        mem[floor32(_26) + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_26) + ceil32(return_data.size) + mem[floor32(_26) + ceil32(return_data.size) + 160] + 160]
        _4314 = mem[floor32(_26) + ceil32(return_data.size) + _4309 + 160]
        mem[floor32(_26) + (2 * ceil32(return_data.size)) + 192 len ceil32(mem[floor32(_26) + ceil32(return_data.size) + _4309 + 160])] = mem[floor32(_26) + ceil32(return_data.size) + _4309 + 192 len ceil32(mem[floor32(_26) + ceil32(return_data.size) + _4309 + 160])]
        if not _4314 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_26) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_26) + (2 * ceil32(return_data.size)) + 160]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8888 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8936 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8888 + 192]
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8888 + 192])] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8888 + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8888 + 192])]
                        if not _8936 % 32:
                            mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12942 = mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224] = mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13029 = mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12942 + 224]
                            mem[_8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12942 + 224])] = mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12942 + 256 len ceil32(mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12942 + 224])]
                            if not _13029 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13029 + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13029 + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13029 + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13029 + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13029 + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13029 + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13029 % 32) + 288 len _13029 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8936 % 32) + 256 len _8936 % 32]
                            mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12981 = mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13052 = mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12981 + 256]
                            mem[floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12981 + 256])] = mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12981 + 288 len ceil32(mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12981 + 256])]
                            if not _13052 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13052 + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13052 + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13052 + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13052 + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13052 + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13052 + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13052 % 32) + 320 len _13052 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8904 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8947 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8904 + 192]
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8904 + 192])] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8904 + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8904 + 192])]
                        if not _8947 % 32:
                            mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12939 = mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224] = mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13027 = mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12939 + 224]
                            mem[_8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12939 + 224])] = mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12939 + 256 len ceil32(mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12939 + 224])]
                            if not _13027 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13027 + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13027 + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13027 + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13027 + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13027 + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13027 + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13027 % 32) + 288 len _13027 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8947 % 32) + 256 len _8947 % 32]
                            mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12979 = mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13051 = mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12979 + 256]
                            mem[floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12979 + 256])] = mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12979 + 288 len ceil32(mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12979 + 256])]
                            if not _13051 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13051 + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13051 + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13051 + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13051 + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13051 + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13051 + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13051 % 32) + 320 len _13051 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8907 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8949 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8907 + 192]
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8907 + 192])] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8907 + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8907 + 192])]
                        if not _8949 % 32:
                            mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12948 = mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224] = mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13033 = mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12948 + 224]
                            mem[_8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12948 + 224])] = mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12948 + 256 len ceil32(mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12948 + 224])]
                            if not _13033 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13033 + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13033 + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13033 + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13033 + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13033 + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13033 + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13033 % 32) + 288 len _13033 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8949 % 32) + 256 len _8949 % 32]
                            mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12985 = mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13054 = mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12985 + 256]
                            mem[floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12985 + 256])] = mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12985 + 288 len ceil32(mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12985 + 256])]
                            if not _13054 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13054 + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13054 + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13054 + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13054 + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13054 + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13054 + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13054 % 32) + 320 len _13054 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8922 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8959 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8922 + 192]
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8922 + 192])] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8922 + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8922 + 192])]
                        if not _8959 % 32:
                            mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12945 = mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224] = mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13031 = mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12945 + 224]
                            mem[_8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12945 + 224])] = mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12945 + 256 len ceil32(mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12945 + 224])]
                            if not _13031 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13031 + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13031 + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13031 + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13031 + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13031 + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13031 + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13031 % 32) + 288 len _13031 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8959 % 32) + 256 len _8959 % 32]
                            mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12983 = mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13053 = mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12983 + 256]
                            mem[floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12983 + 256])] = mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12983 + 288 len ceil32(mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12983 + 256])]
                            if not _13053 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13053 + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13053 + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13053 + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13053 + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13053 + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13053 + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13053 % 32) + 320 len _13053 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
        else:
            mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 192] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + -(_4314 % 32) + 224 len _4314 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_26) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_26) + (2 * ceil32(return_data.size)) + 160]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _8910 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _8951 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8910 + 224]
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8910 + 224])] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8910 + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8910 + 224])]
                        if not _8951 % 32:
                            mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12954 = mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13037 = mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12954 + 256]
                            mem[_8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12954 + 256])] = mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12954 + 288 len ceil32(mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12954 + 256])]
                            if not _13037 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13037 + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13037 + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13037 + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13037 + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13037 + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13037 + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13037 % 32) + 320 len _13037 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8951 % 32) + 288 len _8951 % 32]
                            mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _12989 = mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13056 = mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12989 + 288]
                            mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12989 + 288])] = mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12989 + 320 len ceil32(mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12989 + 288])]
                            if not _13056 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13056 + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13056 + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13056 + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13056 + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13056 + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13056 + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13056 % 32) + 352 len _13056 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _8924 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _8960 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8924 + 224]
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8924 + 224])] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8924 + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8924 + 224])]
                        if not _8960 % 32:
                            mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12951 = mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13035 = mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12951 + 256]
                            mem[_8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12951 + 256])] = mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12951 + 288 len ceil32(mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12951 + 256])]
                            if not _13035 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13035 + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13035 + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13035 + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13035 + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13035 + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13035 + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13035 % 32) + 320 len _13035 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8960 % 32) + 288 len _8960 % 32]
                            mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _12987 = mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13055 = mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12987 + 288]
                            mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12987 + 288])] = mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12987 + 320 len ceil32(mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12987 + 288])]
                            if not _13055 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13055 + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13055 + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13055 + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13055 + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13055 + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13055 + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13055 % 32) + 352 len _13055 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _8927 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _8962 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8927 + 224]
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8927 + 224])] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8927 + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8927 + 224])]
                        if not _8962 % 32:
                            mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12960 = mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13041 = mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12960 + 256]
                            mem[_8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12960 + 256])] = mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12960 + 288 len ceil32(mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12960 + 256])]
                            if not _13041 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13041 + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13041 + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13041 + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13041 + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13041 + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13041 + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13041 % 32) + 320 len _13041 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8962 % 32) + 288 len _8962 % 32]
                            mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _12993 = mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13058 = mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12993 + 288]
                            mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12993 + 288])] = mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12993 + 320 len ceil32(mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12993 + 288])]
                            if not _13058 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13058 + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13058 + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13058 + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13058 + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13058 + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13058 + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13058 % 32) + 352 len _13058 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _8939 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _8974 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8939 + 224]
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8939 + 224])] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8939 + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8939 + 224])]
                        if not _8974 % 32:
                            mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12957 = mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13039 = mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12957 + 256]
                            mem[_8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12957 + 256])] = mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12957 + 288 len ceil32(mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12957 + 256])]
                            if not _13039 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13039 + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13039 + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13039 + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13039 + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13039 + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13039 + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13039 % 32) + 320 len _13039 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8974 % 32) + 288 len _8974 % 32]
                            mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _12991 = mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13057 = mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12991 + 288]
                            mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12991 + 288])] = mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12991 + 320 len ceil32(mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12991 + 288])]
                            if not _13057 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13057 + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13057 + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13057 + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13057 + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13057 + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13057 + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13057 % 32) + 352 len _13057 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
    revert
}

function baseTokenPrice(address arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.token() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(arg1)
    staticcall arg1.decimals() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_d4384dbeAddress)
    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args wNativeAddress, usdcTokenAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    mem[96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[96] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).symbol() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _25 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require return_data.size >= mem[mem[96] + 96] + mem[96] + 32 and mem[mem[96] + 96] <= 4294967296
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _28 = mem[_25 + 96]
    mem[ceil32(return_data.size) + 128 len ceil32(mem[_25 + 96])] = mem[_25 + 128 len ceil32(mem[_25 + 96])]
    if not _28 % 32:
        mem[_28 + ceil32(return_data.size) + 128] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.symbol() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[_28 + ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = _28 + (2 * ceil32(return_data.size)) + 128
        require return_data.size >= 32
        _4340 = mem[_28 + ceil32(return_data.size) + 128]
        require mem[_28 + ceil32(return_data.size) + 128] <= 4294967296
        require mem[_28 + ceil32(return_data.size) + 128] + 32 <= return_data.size
        require return_data.size >= mem[_28 + ceil32(return_data.size) + mem[_28 + ceil32(return_data.size) + 128] + 128] + mem[_28 + ceil32(return_data.size) + 128] + 32 and mem[_28 + ceil32(return_data.size) + mem[_28 + ceil32(return_data.size) + 128] + 128] <= 4294967296
        mem[_28 + (2 * ceil32(return_data.size)) + 128] = mem[_28 + ceil32(return_data.size) + mem[_28 + ceil32(return_data.size) + 128] + 128]
        _4346 = mem[_28 + ceil32(return_data.size) + _4340 + 128]
        mem[_28 + (2 * ceil32(return_data.size)) + 160 len ceil32(mem[_28 + ceil32(return_data.size) + _4340 + 128])] = mem[_28 + ceil32(return_data.size) + _4340 + 160 len ceil32(mem[_28 + ceil32(return_data.size) + _4340 + 128])]
        if not _4346 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_28 + (2 * ceil32(return_data.size)) + 160 len mem[_28 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (0 / Mask(112, 0, ext_call.return_data[0]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4346 + _28 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8978 = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4346 + _28 + (2 * ceil32(return_data.size)) + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4346 + _28 + (2 * ceil32(return_data.size)) + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160] = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _9028 = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _8978 + 160]
                        mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _8978 + 160])] = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _8978 + 192 len ceil32(mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _8978 + 160])]
                        if not _9028 % 32:
                            mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _13016 = mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192] = mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13111 = mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13016 + 192]
                            mem[_9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13016 + 192])] = mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13016 + 224 len ceil32(mem[_9028 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13016 + 192])]
                            if not _13111 % 32:
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224 len mem[_9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13111 + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13111 + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13111 + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13111 + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13111 + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13111 + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13111) + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13111) + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + -(_13111 % 32) + 256 len _13111 % 32]
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224 len mem[_9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13111) + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13111) + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13111) + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13111) + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13111) + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13111) + _9028 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + -(_9028 % 32) + 224 len _9028 % 32]
                            mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _13063 = mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13142 = mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13063 + 224]
                            mem[floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13063 + 224])] = mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13063 + 256 len ceil32(mem[floor32(_9028) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13063 + 224])]
                            if not _13142 % 32:
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13142 + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13142 + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13142 + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13142 + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13142 + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13142 + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13142) + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13142) + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + -(_13142 % 32) + 288 len _13142 % 32]
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13142) + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13142) + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13142) + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13142) + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13142) + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13142) + floor32(_9028) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4346 + _28 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8993 = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4346 + _28 + (2 * ceil32(return_data.size)) + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4346 + _28 + (2 * ceil32(return_data.size)) + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160] = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _9039 = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _8993 + 160]
                        mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _8993 + 160])] = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _8993 + 192 len ceil32(mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _8993 + 160])]
                        if not _9039 % 32:
                            mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _13013 = mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192] = mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13109 = mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13013 + 192]
                            mem[_9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13013 + 192])] = mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13013 + 224 len ceil32(mem[_9039 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13013 + 192])]
                            if not _13109 % 32:
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224 len mem[_9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13109 + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13109 + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13109 + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13109 + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13109 + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13109 + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13109) + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13109) + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + -(_13109 % 32) + 256 len _13109 % 32]
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224 len mem[_9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13109) + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13109) + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13109) + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13109) + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13109) + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13109) + _9039 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + -(_9039 % 32) + 224 len _9039 % 32]
                            mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _13061 = mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13141 = mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13061 + 224]
                            mem[floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13061 + 224])] = mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13061 + 256 len ceil32(mem[floor32(_9039) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13061 + 224])]
                            if not _13141 % 32:
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13141 + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13141 + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13141 + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13141 + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13141 + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13141 + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13141) + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13141) + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + -(_13141 % 32) + 288 len _13141 % 32]
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13141) + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13141) + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13141) + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13141) + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13141) + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13141) + floor32(_9039) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (0 / Mask(112, 0, ext_call.return_data[32]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4346 + _28 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8996 = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4346 + _28 + (2 * ceil32(return_data.size)) + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4346 + _28 + (2 * ceil32(return_data.size)) + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160] = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _9041 = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _8996 + 160]
                        mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _8996 + 160])] = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _8996 + 192 len ceil32(mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _8996 + 160])]
                        if not _9041 % 32:
                            mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _13022 = mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192] = mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13115 = mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13022 + 192]
                            mem[_9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13022 + 192])] = mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13022 + 224 len ceil32(mem[_9041 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13022 + 192])]
                            if not _13115 % 32:
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224 len mem[_9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13115 + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13115 + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13115 + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13115 + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13115 + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13115 + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13115) + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13115) + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + -(_13115 % 32) + 256 len _13115 % 32]
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224 len mem[_9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13115) + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13115) + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13115) + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13115) + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13115) + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13115) + _9041 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + -(_9041 % 32) + 224 len _9041 % 32]
                            mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _13067 = mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13144 = mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13067 + 224]
                            mem[floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13067 + 224])] = mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13067 + 256 len ceil32(mem[floor32(_9041) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13067 + 224])]
                            if not _13144 % 32:
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13144 + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13144 + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13144 + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13144 + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13144 + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13144 + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13144) + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13144) + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + -(_13144 % 32) + 288 len _13144 % 32]
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13144) + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13144) + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13144) + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13144) + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13144) + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13144) + floor32(_9041) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4346 + _28 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _9012 = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4346 + _28 + (2 * ceil32(return_data.size)) + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4346 + _28 + (2 * ceil32(return_data.size)) + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160] = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + mem[_4346 + _28 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _9052 = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _9012 + 160]
                        mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _9012 + 160])] = mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _9012 + 192 len ceil32(mem[_4346 + _28 + (2 * ceil32(return_data.size)) + _9012 + 160])]
                        if not _9052 % 32:
                            mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _13019 = mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192] = mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13113 = mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13019 + 192]
                            mem[_9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13019 + 192])] = mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13019 + 224 len ceil32(mem[_9052 + _4346 + _28 + (4 * ceil32(return_data.size)) + _13019 + 192])]
                            if not _13113 % 32:
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224 len mem[_9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13113 + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13113 + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13113 + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13113 + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13113 + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13113 + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13113) + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13113) + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + -(_13113 % 32) + 256 len _13113 % 32]
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 224 len mem[_9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13113) + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13113) + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13113) + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13113) + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13113) + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13113) + _9052 + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + -(_9052 % 32) + 224 len _9052 % 32]
                            mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _13065 = mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13143 = mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13065 + 224]
                            mem[floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13065 + 224])] = mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13065 + 256 len ceil32(mem[floor32(_9052) + _4346 + _28 + (4 * ceil32(return_data.size)) + _13065 + 224])]
                            if not _13143 % 32:
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13143 + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13143 + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13143 + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13143 + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13143 + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13143 + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13143) + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13143) + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + -(_13143 % 32) + 288 len _13143 % 32]
                                if sha3(mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 192 len mem[_4346 + _28 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13143) + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13143) + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13143) + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13143) + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13143) + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13143) + floor32(_9052) + _4346 + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
        else:
            mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + -(_4346 % 32) + 192 len _4346 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_28 + (2 * ceil32(return_data.size)) + 160 len mem[_28 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (0 / Mask(112, 0, ext_call.return_data[0]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8999 = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _9043 = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _8999 + 192]
                        mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _8999 + 192])] = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _8999 + 224 len ceil32(mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _8999 + 192])]
                        if not _9043 % 32:
                            mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _13028 = mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224] = mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13119 = mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13028 + 224]
                            mem[_9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13028 + 224])] = mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13028 + 256 len ceil32(mem[_9043 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13028 + 224])]
                            if not _13119 % 32:
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256 len mem[_9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13119 + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13119 + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13119 + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13119 + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13119 + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13119 + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13119) + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13119) + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + -(_13119 % 32) + 288 len _13119 % 32]
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256 len mem[_9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13119) + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13119) + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13119) + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13119) + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13119) + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13119) + _9043 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + -(_9043 % 32) + 256 len _9043 % 32]
                            mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _13071 = mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13146 = mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13071 + 256]
                            mem[floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13071 + 256])] = mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13071 + 288 len ceil32(mem[floor32(_9043) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13071 + 256])]
                            if not _13146 % 32:
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13146 + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13146 + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13146 + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13146 + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13146 + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13146 + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13146) + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13146) + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + -(_13146 % 32) + 320 len _13146 % 32]
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13146) + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13146) + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13146) + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13146) + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13146) + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13146) + floor32(_9043) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _9014 = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _9053 = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _9014 + 192]
                        mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _9014 + 192])] = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _9014 + 224 len ceil32(mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _9014 + 192])]
                        if not _9053 % 32:
                            mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _13025 = mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224] = mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13117 = mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13025 + 224]
                            mem[_9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13025 + 224])] = mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13025 + 256 len ceil32(mem[_9053 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13025 + 224])]
                            if not _13117 % 32:
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256 len mem[_9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13117 + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13117 + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13117 + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13117 + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13117 + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13117 + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13117) + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13117) + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + -(_13117 % 32) + 288 len _13117 % 32]
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256 len mem[_9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13117) + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13117) + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13117) + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13117) + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13117) + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13117) + _9053 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + -(_9053 % 32) + 256 len _9053 % 32]
                            mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _13069 = mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13145 = mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13069 + 256]
                            mem[floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13069 + 256])] = mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13069 + 288 len ceil32(mem[floor32(_9053) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13069 + 256])]
                            if not _13145 % 32:
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13145 + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13145 + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13145 + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13145 + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13145 + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13145 + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13145) + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13145) + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + -(_13145 % 32) + 320 len _13145 % 32]
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13145) + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13145) + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13145) + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13145) + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13145) + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13145) + floor32(_9053) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (0 / Mask(112, 0, ext_call.return_data[32]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _9017 = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _9055 = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _9017 + 192]
                        mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _9017 + 192])] = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _9017 + 224 len ceil32(mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _9017 + 192])]
                        if not _9055 % 32:
                            mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _13034 = mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224] = mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13123 = mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13034 + 224]
                            mem[_9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13034 + 224])] = mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13034 + 256 len ceil32(mem[_9055 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13034 + 224])]
                            if not _13123 % 32:
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256 len mem[_9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13123 + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13123 + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13123 + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13123 + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13123 + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13123 + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13123) + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13123) + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + -(_13123 % 32) + 288 len _13123 % 32]
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256 len mem[_9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13123) + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13123) + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13123) + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13123) + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13123) + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13123) + _9055 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + -(_9055 % 32) + 256 len _9055 % 32]
                            mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _13075 = mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13148 = mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13075 + 256]
                            mem[floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13075 + 256])] = mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13075 + 288 len ceil32(mem[floor32(_9055) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13075 + 256])]
                            if not _13148 % 32:
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13148 + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13148 + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13148 + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13148 + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13148 + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13148 + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13148) + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13148) + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + -(_13148 % 32) + 320 len _13148 % 32]
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13148) + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13148) + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13148) + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13148) + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13148) + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13148) + floor32(_9055) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _9031 = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _9066 = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _9031 + 192]
                        mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _9031 + 192])] = mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _9031 + 224 len ceil32(mem[floor32(_4346) + _28 + (2 * ceil32(return_data.size)) + _9031 + 192])]
                        if not _9066 % 32:
                            mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _13031 = mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224] = mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13121 = mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13031 + 224]
                            mem[_9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13031 + 224])] = mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13031 + 256 len ceil32(mem[_9066 + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13031 + 224])]
                            if not _13121 % 32:
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256 len mem[_9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13121 + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13121 + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13121 + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13121 + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13121 + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13121 + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13121) + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13121) + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + -(_13121 % 32) + 288 len _13121 % 32]
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256 len mem[_9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13121) + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13121) + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13121) + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13121) + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13121) + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13121) + _9066 + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + -(_9066 % 32) + 256 len _9066 % 32]
                            mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _13073 = mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13147 = mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13073 + 256]
                            mem[floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13073 + 256])] = mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13073 + 288 len ceil32(mem[floor32(_9066) + floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + _13073 + 256])]
                            if not _13147 % 32:
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13147 + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13147 + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13147 + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13147 + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13147 + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13147 + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13147) + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13147) + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + -(_13147 % 32) + 320 len _13147 % 32]
                                if sha3(mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4346) + _28 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13147) + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13147) + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13147) + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13147) + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13147) + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13147) + floor32(_9066) + floor32(_4346) + _28 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
    else:
        mem[floor32(_28) + ceil32(return_data.size) + 128] = mem[floor32(_28) + ceil32(return_data.size) + -(_28 % 32) + 160 len _28 % 32]
        mem[floor32(_28) + ceil32(return_data.size) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.symbol() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[floor32(_28) + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = floor32(_28) + (2 * ceil32(return_data.size)) + 160
        require return_data.size >= 32
        _4343 = mem[floor32(_28) + ceil32(return_data.size) + 160]
        require mem[floor32(_28) + ceil32(return_data.size) + 160] <= 4294967296
        require mem[floor32(_28) + ceil32(return_data.size) + 160] + 32 <= return_data.size
        require return_data.size >= mem[floor32(_28) + ceil32(return_data.size) + mem[floor32(_28) + ceil32(return_data.size) + 160] + 160] + mem[floor32(_28) + ceil32(return_data.size) + 160] + 32 and mem[floor32(_28) + ceil32(return_data.size) + mem[floor32(_28) + ceil32(return_data.size) + 160] + 160] <= 4294967296
        mem[floor32(_28) + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_28) + ceil32(return_data.size) + mem[floor32(_28) + ceil32(return_data.size) + 160] + 160]
        _4348 = mem[floor32(_28) + ceil32(return_data.size) + _4343 + 160]
        mem[floor32(_28) + (2 * ceil32(return_data.size)) + 192 len ceil32(mem[floor32(_28) + ceil32(return_data.size) + _4343 + 160])] = mem[floor32(_28) + ceil32(return_data.size) + _4343 + 192 len ceil32(mem[floor32(_28) + ceil32(return_data.size) + _4343 + 160])]
        if not _4348 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_28) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_28) + (2 * ceil32(return_data.size)) + 160]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (0 / Mask(112, 0, ext_call.return_data[0]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8986 = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192] = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _9034 = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _8986 + 192]
                        mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _8986 + 192])] = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _8986 + 224 len ceil32(mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _8986 + 192])]
                        if not _9034 % 32:
                            mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _13040 = mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224] = mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13127 = mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13040 + 224]
                            mem[_9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13040 + 224])] = mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13040 + 256 len ceil32(mem[_9034 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13040 + 224])]
                            if not _13127 % 32:
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256 len mem[_9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13127 + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13127 + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13127 + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13127 + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13127 + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13127 + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13127) + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13127) + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13127 % 32) + 288 len _13127 % 32]
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256 len mem[_9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13127) + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13127) + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13127) + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13127) + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13127) + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13127) + _9034 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + -(_9034 % 32) + 256 len _9034 % 32]
                            mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _13079 = mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13150 = mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13079 + 256]
                            mem[floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13079 + 256])] = mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13079 + 288 len ceil32(mem[floor32(_9034) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13079 + 256])]
                            if not _13150 % 32:
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13150 + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13150 + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13150 + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13150 + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13150 + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13150 + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13150) + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13150) + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13150 % 32) + 320 len _13150 % 32]
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13150) + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13150) + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13150) + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13150) + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13150) + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13150) + floor32(_9034) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _9002 = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192] = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _9045 = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _9002 + 192]
                        mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _9002 + 192])] = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _9002 + 224 len ceil32(mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _9002 + 192])]
                        if not _9045 % 32:
                            mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _13037 = mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224] = mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13125 = mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13037 + 224]
                            mem[_9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13037 + 224])] = mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13037 + 256 len ceil32(mem[_9045 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13037 + 224])]
                            if not _13125 % 32:
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256 len mem[_9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13125 + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13125 + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13125 + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13125 + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13125 + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13125 + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13125) + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13125) + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13125 % 32) + 288 len _13125 % 32]
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256 len mem[_9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13125) + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13125) + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13125) + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13125) + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13125) + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13125) + _9045 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + -(_9045 % 32) + 256 len _9045 % 32]
                            mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _13077 = mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13149 = mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13077 + 256]
                            mem[floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13077 + 256])] = mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13077 + 288 len ceil32(mem[floor32(_9045) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13077 + 256])]
                            if not _13149 % 32:
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13149 + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13149 + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13149 + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13149 + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13149 + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13149 + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13149) + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13149) + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13149 % 32) + 320 len _13149 % 32]
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13149) + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13149) + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13149) + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13149) + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13149) + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13149) + floor32(_9045) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (0 / Mask(112, 0, ext_call.return_data[32]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _9005 = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192] = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _9047 = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _9005 + 192]
                        mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _9005 + 192])] = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _9005 + 224 len ceil32(mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _9005 + 192])]
                        if not _9047 % 32:
                            mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _13046 = mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224] = mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13131 = mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13046 + 224]
                            mem[_9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13046 + 224])] = mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13046 + 256 len ceil32(mem[_9047 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13046 + 224])]
                            if not _13131 % 32:
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256 len mem[_9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13131 + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13131 + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13131 + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13131 + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13131 + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13131 + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13131) + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13131) + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13131 % 32) + 288 len _13131 % 32]
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256 len mem[_9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13131) + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13131) + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13131) + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13131) + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13131) + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13131) + _9047 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + -(_9047 % 32) + 256 len _9047 % 32]
                            mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _13083 = mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13152 = mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13083 + 256]
                            mem[floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13083 + 256])] = mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13083 + 288 len ceil32(mem[floor32(_9047) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13083 + 256])]
                            if not _13152 % 32:
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13152 + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13152 + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13152 + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13152 + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13152 + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13152 + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13152) + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13152) + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13152 % 32) + 320 len _13152 % 32]
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13152) + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13152) + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13152) + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13152) + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13152) + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13152) + floor32(_9047) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _9020 = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192] = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _9057 = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _9020 + 192]
                        mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _9020 + 192])] = mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _9020 + 224 len ceil32(mem[_4348 + floor32(_28) + (2 * ceil32(return_data.size)) + _9020 + 192])]
                        if not _9057 % 32:
                            mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _13043 = mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224] = mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13129 = mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13043 + 224]
                            mem[_9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13043 + 224])] = mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13043 + 256 len ceil32(mem[_9057 + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13043 + 224])]
                            if not _13129 % 32:
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256 len mem[_9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13129 + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13129 + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13129 + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13129 + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13129 + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13129 + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13129) + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13129) + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13129 % 32) + 288 len _13129 % 32]
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256 len mem[_9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13129) + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13129) + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13129) + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13129) + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13129) + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13129) + _9057 + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + -(_9057 % 32) + 256 len _9057 % 32]
                            mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _13081 = mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13151 = mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13081 + 256]
                            mem[floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13081 + 256])] = mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13081 + 288 len ceil32(mem[floor32(_9057) + _4348 + floor32(_28) + (4 * ceil32(return_data.size)) + _13081 + 256])]
                            if not _13151 % 32:
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13151 + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13151 + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13151 + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13151 + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13151 + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13151 + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13151) + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13151) + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13151 % 32) + 320 len _13151 % 32]
                                if sha3(mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 224 len mem[_4348 + floor32(_28) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13151) + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13151) + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13151) + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13151) + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13151) + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13151) + floor32(_9057) + _4348 + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
        else:
            mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 192] = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + -(_4348 % 32) + 224 len _4348 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_28) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_28) + (2 * ceil32(return_data.size)) + 160]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (0 / Mask(112, 0, ext_call.return_data[0]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _9008 = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _9049 = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9008 + 224]
                        mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9008 + 224])] = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9008 + 256 len ceil32(mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9008 + 224])]
                        if not _9049 % 32:
                            mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _13052 = mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256] = mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13135 = mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13052 + 256]
                            mem[_9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13052 + 256])] = mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13052 + 288 len ceil32(mem[_9049 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13052 + 256])]
                            if not _13135 % 32:
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[_9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13135 + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13135 + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13135 + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13135 + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13135 + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13135 + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13135) + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13135) + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13135 % 32) + 320 len _13135 % 32]
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[_9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13135) + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13135) + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13135) + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13135) + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13135) + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13135) + _9049 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + -(_9049 % 32) + 288 len _9049 % 32]
                            mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _13087 = mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13154 = mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13087 + 288]
                            mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13087 + 288])] = mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13087 + 320 len ceil32(mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13087 + 288])]
                            if not _13154 % 32:
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13154 + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13154 + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13154 + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13154 + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13154 + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13154 + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13154) + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13154) + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13154 % 32) + 352 len _13154 % 32]
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13154) + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13154) + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13154) + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13154) + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13154) + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13154) + floor32(_9049) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _9022 = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _9058 = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9022 + 224]
                        mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9022 + 224])] = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9022 + 256 len ceil32(mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9022 + 224])]
                        if not _9058 % 32:
                            mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _13049 = mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256] = mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13133 = mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13049 + 256]
                            mem[_9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13049 + 256])] = mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13049 + 288 len ceil32(mem[_9058 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13049 + 256])]
                            if not _13133 % 32:
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[_9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13133 + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13133 + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13133 + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13133 + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13133 + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13133 + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13133) + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13133) + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13133 % 32) + 320 len _13133 % 32]
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[_9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13133) + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13133) + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13133) + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13133) + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13133) + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13133) + _9058 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + -(_9058 % 32) + 288 len _9058 % 32]
                            mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _13085 = mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13153 = mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13085 + 288]
                            mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13085 + 288])] = mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13085 + 320 len ceil32(mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13085 + 288])]
                            if not _13153 % 32:
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13153 + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13153 + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13153 + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13153 + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13153 + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13153 + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13153) + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13153) + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13153 % 32) + 352 len _13153 % 32]
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13153) + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13153) + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13153) + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13153) + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13153) + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13153) + floor32(_9058) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (0 / Mask(112, 0, ext_call.return_data[32]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _9025 = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _9060 = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9025 + 224]
                        mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9025 + 224])] = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9025 + 256 len ceil32(mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9025 + 224])]
                        if not _9060 % 32:
                            mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _13058 = mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256] = mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13139 = mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13058 + 256]
                            mem[_9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13058 + 256])] = mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13058 + 288 len ceil32(mem[_9060 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13058 + 256])]
                            if not _13139 % 32:
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[_9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13139 + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13139 + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13139 + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13139 + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13139 + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13139 + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13139) + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13139) + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13139 % 32) + 320 len _13139 % 32]
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[_9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13139) + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13139) + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13139) + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13139) + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13139) + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13139) + _9060 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + -(_9060 % 32) + 288 len _9060 % 32]
                            mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _13091 = mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13156 = mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13091 + 288]
                            mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13091 + 288])] = mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13091 + 320 len ceil32(mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13091 + 288])]
                            if not _13156 % 32:
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13156 + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13156 + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13156 + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13156 + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13156 + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13156 + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13156) + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13156) + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13156 % 32) + 352 len _13156 % 32]
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13156) + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13156) + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13156) + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13156) + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13156) + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13156) + floor32(_9060) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        if wNativeAddress == address(ext_call.return_data[0]):
                            return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), wNativeAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).symbol() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _9037 = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _9072 = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9037 + 224]
                        mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9037 + 224])] = mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9037 + 256 len ceil32(mem[floor32(_4348) + floor32(_28) + (2 * ceil32(return_data.size)) + _9037 + 224])]
                        if not _9072 % 32:
                            mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _13055 = mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256] = mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13137 = mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13055 + 256]
                            mem[_9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13055 + 256])] = mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13055 + 288 len ceil32(mem[_9072 + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13055 + 256])]
                            if not _13137 % 32:
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[_9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13137 + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13137 + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13137 + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13137 + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13137 + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13137 + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13137) + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13137) + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13137 % 32) + 320 len _13137 % 32]
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288 len mem[_9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13137) + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13137) + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13137) + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13137) + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13137) + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13137) + _9072 + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + -(_9072 % 32) + 288 len _9072 % 32]
                            mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.symbol() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _13089 = mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13155 = mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13089 + 288]
                            mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13089 + 288])] = mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13089 + 320 len ceil32(mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + _13089 + 288])]
                            if not _13155 % 32:
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13155 + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13155 + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13155 + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13155 + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13155 + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13155 + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13155) + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13155) + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + -(_13155 % 32) + 352 len _13155 % 32]
                                if sha3(mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4348) + floor32(_28) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13155) + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13155) + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13155) + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13155) + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13155) + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(ext_call.return_data[0]):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13155) + floor32(_9072) + floor32(_4348) + floor32(_28) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^uint8(ext_call.return_data[0]) * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
    revert
}



}
