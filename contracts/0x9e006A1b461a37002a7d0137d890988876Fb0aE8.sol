contract main {




// =====================  Runtime code  =====================


#
#  - symbol(bytes arg1)
#
function _fallback() payable {
    revert
}

function peekSpot(bytes arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 <= 4294967296
    require arg1 + 36 <= calldata.size
    require arg1.length <= 4294967296 and arg1 + arg1.length + 36 <= calldata.size
    require arg1.length >= 128
    require cd[(arg1 + 100)] <= 4294967296
    require cd[(arg1 + 100)] + 68 <= arg1.length + 36
    require cd[(arg1 + cd[(arg1 + 100)] + 36)] <= 4294967296 and cd[(arg1 + 100)] + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 68 <= arg1.length + 36
    mem[96] = cd[(arg1 + cd[(arg1 + 100)] + 36)]
    mem[128 len cd[(arg1 + cd[(arg1 + 100)] + 36)]] = call.data[arg1 + cd[(arg1 + 100)] + 68 len cd[(arg1 + cd[(arg1 + 100)] + 36)]]
    mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 128] = 0
    require cd[(arg1 + 132)] <= 4294967296
    require cd[(arg1 + 132)] + 68 <= arg1.length + 36
    require cd[(arg1 + cd[(arg1 + 132)] + 36)] <= 4294967296 and cd[(arg1 + 132)] + cd[(arg1 + cd[(arg1 + 132)] + 36)] + 68 <= arg1.length + 36
    mem[64] = ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 160
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + 128] = cd[(arg1 + cd[(arg1 + 132)] + 36)]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + 160 len cd[(arg1 + cd[(arg1 + 132)] + 36)]] = call.data[arg1 + cd[(arg1 + 132)] + 68 len cd[(arg1 + cd[(arg1 + 132)] + 36)]]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 132)] + 36)] + 160] = 0
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 228 len ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] = call.data[arg1 + cd[(arg1 + 100)] + 68 len cd[(arg1 + cd[(arg1 + 100)] + 36)]], mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 128 len ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) - cd[(arg1 + cd[(arg1 + 100)] + 36)]]
    require ext_code.size(address(cd[(arg1 + 36)]))
    staticcall address(cd[(arg1 + 36)]) with:
            gas gas_remaining wei
           args Array(len=cd[(arg1 + cd[(arg1 + 100)] + 36)], data=call.data[arg1 + cd[(arg1 + 100)] + 68 len cd[(arg1 + cd[(arg1 + 100)] + 36)]])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 160] = 0xd39bbef000000000000000000000000000000000000000000000000000000000
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 164] = 32
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 196] = Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 228 len ceil32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + 160 len ceil32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])])]
    if not Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32:
        require ext_code.size(address(cd[(arg1 + 68)]))
        staticcall address(cd[(arg1 + 68)]) with:
                gas gas_remaining wei
               args mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 164 len Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] + 64]
    else:
        mem[floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 228] = mem[floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + -(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32) + 260 len Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32]
        require ext_code.size(address(cd[(arg1 + 68)]))
        staticcall address(cd[(arg1 + 68)]) with:
                gas gas_remaining wei
               args mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 164 len floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    require ext_call.return_data[0]
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'BoringMath: Mul Overflow'
    return 0, Mask(224, 0, ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
}

function get(bytes arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 <= 4294967296
    require arg1 + 36 <= calldata.size
    require arg1.length <= 4294967296 and arg1 + arg1.length + 36 <= calldata.size
    require arg1.length >= 128
    require cd[(arg1 + 100)] <= 4294967296
    require cd[(arg1 + 100)] + 68 <= arg1.length + 36
    require cd[(arg1 + cd[(arg1 + 100)] + 36)] <= 4294967296 and cd[(arg1 + 100)] + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 68 <= arg1.length + 36
    mem[96] = cd[(arg1 + cd[(arg1 + 100)] + 36)]
    mem[128 len cd[(arg1 + cd[(arg1 + 100)] + 36)]] = call.data[arg1 + cd[(arg1 + 100)] + 68 len cd[(arg1 + cd[(arg1 + 100)] + 36)]]
    mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 128] = 0
    require cd[(arg1 + 132)] <= 4294967296
    require cd[(arg1 + 132)] + 68 <= arg1.length + 36
    require cd[(arg1 + cd[(arg1 + 132)] + 36)] <= 4294967296 and cd[(arg1 + 132)] + cd[(arg1 + cd[(arg1 + 132)] + 36)] + 68 <= arg1.length + 36
    mem[64] = ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 160
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + 128] = cd[(arg1 + cd[(arg1 + 132)] + 36)]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + 160 len cd[(arg1 + cd[(arg1 + 132)] + 36)]] = call.data[arg1 + cd[(arg1 + 132)] + 68 len cd[(arg1 + cd[(arg1 + 132)] + 36)]]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 132)] + 36)] + 160] = 0
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 228 len ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] = call.data[arg1 + cd[(arg1 + 100)] + 68 len cd[(arg1 + cd[(arg1 + 100)] + 36)]], mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 128 len ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) - cd[(arg1 + cd[(arg1 + 100)] + 36)]]
    require ext_code.size(address(cd[(arg1 + 36)]))
    call address(cd[(arg1 + 36)]) with:
         gas gas_remaining wei
        args Array(len=cd[(arg1 + cd[(arg1 + 100)] + 36)], data=call.data[arg1 + cd[(arg1 + 100)] + 68 len cd[(arg1 + cd[(arg1 + 100)] + 36)]])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 160] = 0xd6d7d52500000000000000000000000000000000000000000000000000000000
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 164] = 32
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 196] = Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 228 len ceil32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + 160 len ceil32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])])]
    if not Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32:
        require ext_code.size(address(cd[(arg1 + 68)]))
        call address(cd[(arg1 + 68)]) with:
             gas gas_remaining wei
            args mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 164 len Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] + 64]
    else:
        mem[floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 228] = mem[floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + -(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32) + 260 len Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32]
        require ext_code.size(address(cd[(arg1 + 68)]))
        call address(cd[(arg1 + 68)]) with:
             gas gas_remaining wei
            args mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 164 len floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        return 0, Mask(224, 0, bool(ext_call.return_data[0])), 0
    require ext_call.return_data[32]
    if ext_call.return_data[32] * ext_call.return_data[32] / ext_call.return_data[32] != ext_call.return_data[32]:
        revert with 0, 'BoringMath: Mul Overflow'
    return 0, Mask(224, 0, bool(ext_call.return_data[0])), ext_call.return_data[32] * ext_call.return_data[32] / 10^18
}

function peek(bytes arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 <= 4294967296
    require arg1 + 36 <= calldata.size
    require arg1.length <= 4294967296 and arg1 + arg1.length + 36 <= calldata.size
    require arg1.length >= 128
    require cd[(arg1 + 100)] <= 4294967296
    require cd[(arg1 + 100)] + 68 <= arg1.length + 36
    require cd[(arg1 + cd[(arg1 + 100)] + 36)] <= 4294967296 and cd[(arg1 + 100)] + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 68 <= arg1.length + 36
    mem[96] = cd[(arg1 + cd[(arg1 + 100)] + 36)]
    mem[128 len cd[(arg1 + cd[(arg1 + 100)] + 36)]] = call.data[arg1 + cd[(arg1 + 100)] + 68 len cd[(arg1 + cd[(arg1 + 100)] + 36)]]
    mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 128] = 0
    require cd[(arg1 + 132)] <= 4294967296
    require cd[(arg1 + 132)] + 68 <= arg1.length + 36
    require cd[(arg1 + cd[(arg1 + 132)] + 36)] <= 4294967296 and cd[(arg1 + 132)] + cd[(arg1 + cd[(arg1 + 132)] + 36)] + 68 <= arg1.length + 36
    mem[64] = ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 160
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + 128] = cd[(arg1 + cd[(arg1 + 132)] + 36)]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + 160 len cd[(arg1 + cd[(arg1 + 132)] + 36)]] = call.data[arg1 + cd[(arg1 + 132)] + 68 len cd[(arg1 + cd[(arg1 + 132)] + 36)]]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 132)] + 36)] + 160] = 0
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 228 len ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] = call.data[arg1 + cd[(arg1 + 100)] + 68 len cd[(arg1 + cd[(arg1 + 100)] + 36)]], mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 128 len ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) - cd[(arg1 + cd[(arg1 + 100)] + 36)]]
    require ext_code.size(address(cd[(arg1 + 36)]))
    staticcall address(cd[(arg1 + 36)]) with:
            gas gas_remaining wei
           args Array(len=cd[(arg1 + cd[(arg1 + 100)] + 36)], data=call.data[arg1 + cd[(arg1 + 100)] + 68 len cd[(arg1 + cd[(arg1 + 100)] + 36)]])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 160] = 0xeeb8a8d300000000000000000000000000000000000000000000000000000000
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 164] = 32
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 196] = Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 228 len ceil32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + 160 len ceil32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])])]
    if not Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32:
        require ext_code.size(address(cd[(arg1 + 68)]))
        staticcall address(cd[(arg1 + 68)]) with:
                gas gas_remaining wei
               args mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 164 len Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] + 64]
    else:
        mem[floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 228] = mem[floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + -(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32) + 260 len Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32]
        require ext_code.size(address(cd[(arg1 + 68)]))
        staticcall address(cd[(arg1 + 68)]) with:
                gas gas_remaining wei
               args mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 164 len floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not ext_call.return_data[32]:
        return 0, Mask(224, 0, bool(ext_call.return_data[0])), 0
    require ext_call.return_data[32]
    if ext_call.return_data[32] * ext_call.return_data[32] / ext_call.return_data[32] != ext_call.return_data[32]:
        revert with 0, 'BoringMath: Mul Overflow'
    return 0, Mask(224, 0, bool(ext_call.return_data[0])), ext_call.return_data[32] * ext_call.return_data[32] / 10^18
}

function getDataParameter(address arg1, address arg2, bytes arg3, bytes arg4) payable {
    require calldata.size - 4 >= 128
    require arg3 <= 4294967296
    require arg3 + 36 <= calldata.size
    require arg3.length <= 4294967296 and arg3 + arg3.length + 36 <= calldata.size
    mem[96] = arg3.length
    mem[128 len arg3.length] = arg3[all]
    mem[arg3.length + 128] = 0
    require arg4 <= 4294967296
    require arg4 + 36 <= calldata.size
    require arg4.length <= 4294967296 and arg4 + arg4.length + 36 <= calldata.size
    mem[64] = ceil32(arg3.length) + ceil32(arg4.length) + 160
    mem[ceil32(arg3.length) + 128] = arg4.length
    mem[ceil32(arg3.length) + 160 len arg4.length] = arg4[all]
    mem[ceil32(arg3.length) + arg4.length + 160] = 0
    mem[ceil32(arg3.length) + ceil32(arg4.length) + 192] = arg1
    mem[ceil32(arg3.length) + ceil32(arg4.length) + 224] = arg2
    mem[ceil32(arg3.length) + ceil32(arg4.length) + 256] = 128
    mem[ceil32(arg3.length) + ceil32(arg4.length) + 320] = arg3.length
    mem[ceil32(arg3.length) + ceil32(arg4.length) + 352 len ceil32(arg3.length)] = arg3[all], mem[arg3.length + 128 len ceil32(arg3.length) - arg3.length]
    if not arg3.length % 32:
        mem[ceil32(arg3.length) + ceil32(arg4.length) + 288] = arg3.length + 160
        mem[arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + 352] = Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]
        mem[arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + 384 len ceil32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)])] = mem[ceil32(arg3.length) + 160 len ceil32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)])]
        if not Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] % 32:
            mem[ceil32(arg3.length) + ceil32(arg4.length) + 160] = Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] + arg3.length + 192
            mem[64] = Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] + arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + 384
            _96 = Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] + arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + 384
            mem[Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] + arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + 384] = 32
            mem[Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] + arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + 416] = Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]
            _98 = Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]
            mem[Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] + arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + 448 len ceil32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)])] = mem[ceil32(arg3.length) + ceil32(arg4.length) + 192 len ceil32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)])]
            if not Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] % 32:
                return memory
                  from mem[64]
                   len Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] + _96 + -mem[64] + 64
            mem[floor32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]) + _96 + 64] = mem[floor32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]) + _96 + -(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] % 32) + 96 len Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] % 32]
            return memory
              from mem[64]
               len floor32(_98) + _96 + -mem[64] + 96
        mem[floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + 384] = mem[floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + -(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] % 32) + 416 len Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] % 32]
        mem[ceil32(arg3.length) + ceil32(arg4.length) + 160] = floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + arg3.length + 224
        mem[64] = floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + 416
        _104 = floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + 416
        mem[floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + 416] = 32
        mem[floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + 448] = Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]
        _106 = Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]
        mem[floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + arg3.length + ceil32(arg3.length) + ceil32(arg4.length) + 480 len ceil32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)])] = mem[ceil32(arg3.length) + ceil32(arg4.length) + 192 len ceil32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)])]
        if not Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] % 32:
            return memory
              from mem[64]
               len Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] + _104 + -mem[64] + 64
        mem[floor32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]) + _104 + 64] = mem[floor32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]) + _104 + -(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] % 32) + 96 len Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] % 32]
        return memory
          from mem[64]
           len floor32(_106) + _104 + -mem[64] + 96
    mem[floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 352] = mem[floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + -(arg3.length % 32) + 384 len arg3.length % 32]
    mem[ceil32(arg3.length) + ceil32(arg4.length) + 288] = floor32(arg3.length) + 192
    mem[floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 384] = Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]
    mem[floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 416 len ceil32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)])] = mem[ceil32(arg3.length) + 160 len ceil32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)])]
    if not Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] % 32:
        mem[ceil32(arg3.length) + ceil32(arg4.length) + 160] = Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] + floor32(arg3.length) + 224
        mem[64] = Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] + floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 416
        _100 = Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] + floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 416
        mem[Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] + floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 416] = 32
        mem[Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] + floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 448] = Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]
        _102 = Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]
        mem[Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] + floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 480 len ceil32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)])] = mem[ceil32(arg3.length) + ceil32(arg4.length) + 192 len ceil32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)])]
        if not Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] % 32:
            return memory
              from mem[64]
               len Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] + _100 + -mem[64] + 64
        mem[floor32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]) + _100 + 64] = mem[floor32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]) + _100 + -(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] % 32) + 96 len Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] % 32]
        return memory
          from mem[64]
           len floor32(_102) + _100 + -mem[64] + 96
    mem[floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 416] = mem[floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + -(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] % 32) + 448 len Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)] % 32]
    mem[ceil32(arg3.length) + ceil32(arg4.length) + 160] = floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + floor32(arg3.length) + 256
    mem[64] = floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 448
    _107 = floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 448
    mem[floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 448] = 32
    mem[floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 480] = Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]
    _109 = Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]
    mem[floor32(Mask(8 * -ceil32(arg3.length) + arg3.length + 32, 0, 0), mem[arg3.length + 160 len -arg3.length + ceil32(arg3.length)]) + floor32(arg3.length) + ceil32(arg3.length) + ceil32(arg4.length) + 512 len ceil32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)])] = mem[ceil32(arg3.length) + ceil32(arg4.length) + 192 len ceil32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)])]
    if not Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] % 32:
        return memory
          from mem[64]
           len Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] + _107 + -mem[64] + 64
    mem[floor32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]) + _107 + 64] = mem[floor32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)]) + _107 + -(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] % 32) + 96 len Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[ceil32(arg3.length) + arg4.length + 192 len -arg4.length + ceil32(arg4.length)] % 32]
    return memory
      from mem[64]
       len floor32(_109) + _107 + -mem[64] + 96
}

function name(bytes arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 <= 4294967296
    require arg1 + 36 <= calldata.size
    require arg1.length <= 4294967296 and arg1 + arg1.length + 36 <= calldata.size
    require arg1.length >= 128
    require cd[(arg1 + 100)] <= 4294967296
    require cd[(arg1 + 100)] + 68 <= arg1.length + 36
    require cd[(arg1 + cd[(arg1 + 100)] + 36)] <= 4294967296 and cd[(arg1 + 100)] + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 68 <= arg1.length + 36
    mem[96] = cd[(arg1 + cd[(arg1 + 100)] + 36)]
    mem[128 len cd[(arg1 + cd[(arg1 + 100)] + 36)]] = call.data[arg1 + cd[(arg1 + 100)] + 68 len cd[(arg1 + cd[(arg1 + 100)] + 36)]]
    mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 128] = 0
    require cd[(arg1 + 132)] <= 4294967296
    require cd[(arg1 + 132)] + 68 <= arg1.length + 36
    require cd[(arg1 + cd[(arg1 + 132)] + 36)] <= 4294967296 and cd[(arg1 + 132)] + cd[(arg1 + cd[(arg1 + 132)] + 36)] + 68 <= arg1.length + 36
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + 128] = cd[(arg1 + cd[(arg1 + 132)] + 36)]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + 160 len cd[(arg1 + cd[(arg1 + 132)] + 36)]] = call.data[arg1 + cd[(arg1 + 132)] + 68 len cd[(arg1 + cd[(arg1 + 132)] + 36)]]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 132)] + 36)] + 160] = 0
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 160] = 0xd568866c00000000000000000000000000000000000000000000000000000000
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 164] = 32
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 196] = cd[(arg1 + cd[(arg1 + 100)] + 36)]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 228 len ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] = call.data[arg1 + cd[(arg1 + 100)] + 68 len cd[(arg1 + cd[(arg1 + 100)] + 36)]], mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 128 len ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) - cd[(arg1 + cd[(arg1 + 100)] + 36)]]
    require ext_code.size(address(cd[(arg1 + 36)]))
    staticcall address(cd[(arg1 + 36)]) with:
            gas gas_remaining wei
           args Array(len=cd[(arg1 + cd[(arg1 + 100)] + 36)], data=call.data[arg1 + cd[(arg1 + 100)] + 68 len cd[(arg1 + cd[(arg1 + 100)] + 36)]])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require 32 <= return_data.size
    require bool(return_data.size >= 32)
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 160] = 0
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 0] = None
    mem[64] = ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192] = 0xd568866c00000000000000000000000000000000000000000000000000000000
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 196] = 32
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 228] = Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]
    _1437 = Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]
    if not Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]:
        if not Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32:
            require ext_code.size(address(cd[(arg1 + 68)]))
            staticcall address(cd[(arg1 + 68)]).0xd568866c with:
                    gas gas_remaining wei
                   args 32, mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 228 len Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1472 = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0
            require mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 <= 4294967296
            require mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 32 <= return_data.size
            require return_data.size >= mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 192] + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 32 and mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 192] <= 4294967296
            mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 192]
            _1514 = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _1472 + 192]
            mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len ceil32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _1472 + 192])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _1472 + 224 len ceil32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _1472 + 192])]
            if not _1514 % 32:
                mem[64] = _1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224
                mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256 len 0] = None
                mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288 len 0] = None
                mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] = 0x2b00000000000000000000000000000000000000000000000000000000000000
                mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 257 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])]
                mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 289 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 256 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32]
                mem[64] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 257
                mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 257] = 32
                mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289] = mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
                mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321 len ceil32(mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224])] = mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256 len ceil32(mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224])]
                if not mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] % 32:
                    return 32, mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289 len mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] + 32], 
                mem[floor32(mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321] = mem[floor32(mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + -(mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] % 32) + 353 len mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] % 32]
                return Array(len=mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224], data=mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321 len floor32(mem[_1514 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32]), 
            mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + -(_1514 % 32) + 256 len _1514 % 32]
            mem[64] = floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256
            mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288 len 0] = None
            mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 320 len 0] = None
            mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288] = 0x2b00000000000000000000000000000000000000000000000000000000000000
            mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])]
            mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 321 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 256 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32]
            mem[64] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289
            mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289] = 32
            mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321] = mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]
            mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 353 len ceil32(mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256])] = mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256])]
            if not mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] % 32:
                return 32, mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321 len mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] + 32], 
            mem[floor32(mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 353] = mem[floor32(mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + -(mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] % 32) + 385 len mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] % 32]
            return Array(len=mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256], data=mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 353 len floor32(mem[floor32(_1514) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]) + 32]), 
        mem[floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 260] = mem[floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + -(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32) + 292 len Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32]
        require ext_code.size(address(cd[(arg1 + 68)]))
        staticcall address(cd[(arg1 + 68)]).0xd568866c with:
                gas gas_remaining wei
               args 32, mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 228 len floor32(_1437) + 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192
        require return_data.size >= 32
        _1486 = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0
        require mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 <= 4294967296
        require mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 32 <= return_data.size
        require return_data.size >= mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 192] + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 32 and mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 192] <= 4294967296
        mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 192]
        _1530 = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _1486 + 192]
        mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len ceil32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _1486 + 192])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _1486 + 224 len ceil32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _1486 + 192])]
        if not _1530 % 32:
            mem[64] = _1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224
            mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256 len 0] = None
            mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288 len 0] = None
            mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] = 0x2b00000000000000000000000000000000000000000000000000000000000000
            mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 257 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])]
            mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 289 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 256 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32]
            mem[64] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 257
            mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 257] = 32
            mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289] = mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
            mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321 len ceil32(mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224])] = mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256 len ceil32(mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224])]
            if not mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] % 32:
                return 32, mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289 len mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] + 32], 
            mem[floor32(mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321] = mem[floor32(mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + -(mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] % 32) + 353 len mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] % 32]
            return Array(len=mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224], data=mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321 len floor32(mem[_1530 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32]), 
        mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + -(_1530 % 32) + 256 len _1530 % 32]
        mem[64] = floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256
        mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288 len 0] = None
        mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 320 len 0] = None
        mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288] = 0x2b00000000000000000000000000000000000000000000000000000000000000
        mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])]
        mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 321 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 256 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32]
        mem[64] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289
        mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289] = 32
        mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321] = mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]
        mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 353 len ceil32(mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256])] = mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256])]
        if not mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] % 32:
            return 32, mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321 len mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] + 32], 
        mem[floor32(mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 353] = mem[floor32(mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + -(mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] % 32) + 385 len mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] % 32]
        return memory
          from mem[64]
           len floor32(mem[floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_1530) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + -mem[64] + 385
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 260] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + 160]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 292 len floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] - 1)] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + 192 len floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] - 1)]
    if not Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32:
        require ext_code.size(address(cd[(arg1 + 68)]))
        staticcall address(cd[(arg1 + 68)]).0xd568866c with:
                gas gas_remaining wei
               args 32, mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 228 len Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192
        require return_data.size >= 32
        _2242 = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0
        require mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 <= 4294967296
        require mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 32 <= return_data.size
        require return_data.size >= mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 192] + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 32 and mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 192] <= 4294967296
        mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 192]
        _2360 = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _2242 + 192]
        mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len ceil32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _2242 + 192])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _2242 + 224 len ceil32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _2242 + 192])]
        if not _2360 % 32:
            mem[64] = _2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224
            mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256 len 0] = None
            mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288 len 0] = None
            mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] = 0x2b00000000000000000000000000000000000000000000000000000000000000
            mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 257 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])]
            mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 289 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 256 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32]
            mem[64] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 257
            mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 257] = 32
            mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289] = mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
            mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321 len ceil32(mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224])] = mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256 len ceil32(mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224])]
            if not mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] % 32:
                return 32, mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289 len mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] + 32], 
            mem[floor32(mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321] = mem[floor32(mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + -(mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] % 32) + 353 len mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] % 32]
            return Array(len=mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224], data=mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321 len floor32(mem[_2360 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32]), 
        mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + -(_2360 % 32) + 256 len _2360 % 32]
        mem[64] = floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256
        mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288 len 0] = None
        mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 320 len 0] = None
        mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288] = 0x2b00000000000000000000000000000000000000000000000000000000000000
        mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])]
        mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 321 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 256 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32]
        mem[64] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289
        mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289] = 32
        mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321] = mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]
        mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 353 len ceil32(mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256])] = mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256])]
        if not mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] % 32:
            return 32, mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321 len mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] + 32], 
        mem[floor32(mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 353] = mem[floor32(mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + -(mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] % 32) + 385 len mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] % 32]
        return Array(len=mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256], data=mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 353 len floor32(mem[floor32(_2360) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]) + 32]), 
    mem[floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 260] = mem[floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + -(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32) + 292 len Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])] % 32]
    require ext_code.size(address(cd[(arg1 + 68)]))
    staticcall address(cd[(arg1 + 68)]).0xd568866c with:
            gas gas_remaining wei
           args 32, mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 228 len floor32(Mask(8 * -ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + cd[(arg1 + cd[(arg1 + 100)] + 36)] + 32, 0, 0), mem[cd[(arg1 + cd[(arg1 + 100)] + 36)] + 160 len -cd[(arg1 + cd[(arg1 + 100)] + 36)] + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)])]) + 64]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192
    require return_data.size >= 32
    _2286 = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0
    require mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 <= 4294967296
    require mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 32 <= return_data.size
    require return_data.size >= mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 192] + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 32 and mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 192] <= 4294967296
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + 192 len 4], 0 + 192]
    _2392 = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _2286 + 192]
    mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len ceil32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _2286 + 192])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _2286 + 224 len ceil32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + ceil32(return_data.size) + _2286 + 192])]
    if not _2392 % 32:
        mem[64] = _2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224
        mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256 len 0] = None
        mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288 len 0] = None
        mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] = 0x2b00000000000000000000000000000000000000000000000000000000000000
        mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 257 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])]
        mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 289 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 256 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32]
        mem[64] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 257
        mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 257] = 32
        mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289] = mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]
        mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321 len ceil32(mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224])] = mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256 len ceil32(mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224])]
        if not mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] % 32:
            return 32, mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289 len mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] + 32], 
        mem[floor32(mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321] = mem[floor32(mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + -(mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] % 32) + 353 len mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] % 32]
        return Array(len=mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224], data=mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + _2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321 len floor32(mem[_2392 + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224]) + 32]), 
    mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224] = mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + -(_2392 % 32) + 256 len _2392 % 32]
    mem[64] = floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256
    mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288 len 0] = None
    mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 320 len 0] = None
    mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288] = 0x2b00000000000000000000000000000000000000000000000000000000000000
    mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 224 len floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192])]
    mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 321 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192]) + -(mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32) + 256 len mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] % 32]
    mem[64] = mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289
    mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 289] = 32
    mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321] = mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]
    mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 353 len ceil32(mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256])] = mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256])]
    if not mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] % 32:
        return 32, mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 321 len mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] + 32], 
    mem[floor32(mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 353] = mem[floor32(mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]) + mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + -(mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] % 32) + 385 len mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256] % 32]
    return Array(len=mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256], data=mem[mem[ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 192] + floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 353 len floor32(mem[floor32(_2392) + ceil32(cd[(arg1 + cd[(arg1 + 100)] + 36)]) + ceil32(cd[(arg1 + cd[(arg1 + 132)] + 36)]) + (2 * ceil32(return_data.size)) + 256]) + 32]), 
}



}
