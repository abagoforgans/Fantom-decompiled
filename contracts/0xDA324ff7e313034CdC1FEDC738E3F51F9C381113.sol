contract main {




// =====================  Runtime code  =====================


#
#  - sub_05ca1239(?)
#  - sub_1436f14a(?)
#
function _fallback() payable {
    revert
}

function addressToString(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    mem[244 len 42] = call.data[calldata.size len 42]
    idx = 0
    while idx < 20:
        if idx >= 20:
            revert with 0, 50
        if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if 2 > !(2 * idx):
            revert with 0, 17
        if (2 * idx) + 2 >= 42:
            revert with 0, 50
        mem[(2 * idx) + 246 len 8] = Mask(8, -(2713877091499598330239944961141122840311015265600950719674787125185463975936, 0) + 256, 0) << (2713877091499598330239944961141122840311015265600950719674787125185463975936, 0) - 256
        if idx >= 20:
            revert with 0, 50
        if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if 3 > !(2 * idx):
            revert with 0, 17
        if (2 * idx) + 3 >= 42:
            revert with 0, 50
        mem[(2 * idx) + 247 len 8] = Mask(8, -(2713877091499598330239944961141122840311015265600950719674787125185463975936, 0) + 256, 0) << (2713877091499598330239944961141122840311015265600950719674787125185463975936, 0) - 256
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    return 32, 42, mem[276 len 42], 0
}

function getShape(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if 3 == arg1:
        return 32, 81, 
               0x3e3c706174682069643d2270617468312220643d224d31302c3330352048333430223e3c2f706174683e3c636972636c652063783d22313030222063793d223235302220723d22323530222066696c6c3d, mem[209 len 15] >> 392,
               0
    if 2 == arg1:
        return 32, 81, 
               0x223c706174682069643d2270617468312220643d224d31302c3330352048333430223e3c2f706174683e3c636972636c652063783d22323530222063793d223235302220723d22323530222066696c6c3d, mem[209 len 15] >> 392,
               0
    if arg1 != 1:
        return 32, 501, 
               0x3e3c706174682069643d2270617468312220643d224d31302c31302048333430204d31302c32302048333430204d31302c33302048333430204d31302c34302048333430204d31302c35302048333430204d31302c36302048333430204d31302c37302048333430204d31302c38302048333430204d31302c39302048333430204d31302c3130302048333430204d31302c3131302048333430204d31302c3132302048333430204d31302c3133302048333430204d31302c3134302048333430204d31302c3135302048333430204d31302c3136302048333430204d31302c3137302048333430204d31302c3138302048333430204d31302c3139302048333430204d31302c3230302048333430204d31302c3231302048333430204d31302c3232302048333430204d31302c3233302048333430204d31302c3234302048333430204d31302c3235302048333430204d31302c3236302048333430204d31302c3237302048333430204d31302c3238302048333430204d31302c3239302048333430204d31302c3330302048333430204d31302c3331302048333430204d31302c3332302048333430204d31302c3333302048333430204d31302c333430204833343020223e3c2f706174683e3c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d, mem[629 len 11] >> 3752,
               0
    return 32, 83, 
           0x203c706174682069643d2270617468312220643d224d37302c333035204832383020223e3c2f706174683e3c636972636c652063783d22313735222063793d223137352220723d2231373522202066696c6c3d, mem[211 len 13] >> 408,
           0
}

function sub_1f6c7756(?) payable {
    require calldata.size - 4 >= 32
    require arg1 <= test266151307()
    require calldata.size > arg1 + 35
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg1.length)) + 97 < 96 or ceil32(ceil32(arg1.length)) + 97 > test266151307():
        revert with 0, 65
    require arg1 + arg1.length + 36 <= calldata.size
    if arg1.length > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 2 > !(2 * arg1.length):
        revert with 0, 17
    if (2 * arg1.length) + 2 > test266151307():
        revert with 0, 65
    if (2 * arg1.length) + 2:
        mem[ceil32(ceil32(arg1.length)) + 193 len (2 * arg1.length) + 2] = call.data[calldata.size len (2 * arg1.length) + 2]
    if 0 >= (2 * arg1.length) + 2:
        revert with 0, 50
    if 1 >= (2 * arg1.length) + 2:
        revert with 0, 50
    mem[ceil32(ceil32(arg1.length)) + 194 len 8] = Mask(8, -(6784692728748995825599862402852807100777538164002376799186967812963659939840, 0) + 256, 0) << (6784692728748995825599862402852807100777538164002376799186967812963659939840, 0) - 256
    idx = 0
    while idx < arg1.length:
        if idx >= arg1.length:
            revert with 0, 50
        if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if 2 > !(2 * idx):
            revert with 0, 17
        if 2 * idx >= 2 * arg1.length:
            revert with 0, 50
        mem[(2 * idx) + ceil32(ceil32(arg1.length)) + 195 len 8] = Mask(8, -(2713877091499598330239944961141122840311015265600950719674787125185463975936, 0) + 256, 0) << (2713877091499598330239944961141122840311015265600950719674787125185463975936, 0) - 256
        if idx >= arg1.length:
            revert with 0, 50
        if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if 3 > !(2 * idx):
            revert with 0, 17
        if (2 * idx) + 3 >= (2 * arg1.length) + 2:
            revert with 0, 50
        mem[(2 * idx) + ceil32(ceil32(arg1.length)) + 196 len 8] = Mask(8, -(2713877091499598330239944961141122840311015265600950719674787125185463975936, 0) + 256, 0) << (2713877091499598330239944961141122840311015265600950719674787125185463975936, 0) - 256
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    return 32, (2 * arg1.length) + 2, 0, mem[ceil32(ceil32(arg1.length)) + 194 len floor32((2 * arg1.length) + 33) - 1]
}

function sub_d0610786(?) payable {
    require calldata.size - 4 >= 32
    if 2 == arg1:
        return 32, 2077, 
               0x203c67207472616e73666f726d3d227472616e736c617465283135362c35352922203e3c67207472616e73666f726d3d227363616c6528302e30372922203e3c706174682066696c6c2d6f7061636974793d22302e3522207374726f6b653d227472616e73706172656e74222066696c6c3d22236666662220643d224d3435302e3838362c304839352e3131374c302c3235392e3739344c3131352e3732352c373230683331342e3535314c3534362c3235392e3739344c3435302e3838362c307a204d3430302e3630332c3638312e393239483135312e333331682d352e3933354c33392e3736392c3236312e383738206c38312e39342d3232332e383037683330322e3538336c38312e3933382c3232332e3830344c3430302e3630332c3638312e3932397a222f3e3c706174682066696c6c2d6f7061636974793d22302e3522207374726f6b653d227472616e73706172656e7422202066696c6c3d22236666662220643d224d3431332e3635342c35332e323937483133322e3334376c2d37362e36372c3230392e3431346c3130312e3538392c3430332e3939683233312e3436396c3130312e3538392d3430332e3939344c3431332e3635342c35332e3239377a204d3337372e3934342c3230322e3335332063362e3632382c32322e3237352d342e3833342c33302e3935372d342e3833342c33302e3935376331382e3731382c302c34312e3039372d31372e3236332c34312e3039372d31372e323633732d312e31372c33322e3836382d32392e3234332c33322e38363820632d32382e3037362c302d36342e3333392c302d36342e3333392c30433333392e3334312c3234342e3830362c3337352e3630342c3231302e35372c3337372e3934342c3230322e3335337a204d3137322e3839312c3233332e333163302c302d31312e34362d382e3638322d342e3833342d33302e3935372063322e3334322c382e3231362c33382e3630352c34322e3435332c35372e33322c34362e35363263302c302d33362e3236332c302d36342e3333372c30632d32382e3037362c302d32392e3234362d33322e3836382d32392e3234362d33322e38363820533135342e3137362c3233332e33312c3137322e3839312c3233332e33317a204d3139332e362c3439372e3230396331382e3632312c332e3732352c31342e3839372d31312e3137362c302d32322e333532632d31342e3839372d31312e3137382d32362e3037322d32362e3037392d32322e3334352d35302e3239352063302c302c31312e3137332c32322e3335322c32342e3230382c31362e3736356331332e3033332d352e3538392d31312e3137352d33392e3131362d31362e37362d34362e3536396332392e3739332c392e3331342c33352e3338312c32362e3037392c33352e3338312c32362e3037397639382e37323320433231342e3038352c3531392e35362c3137362e38342c3439332e3438332c3139332e362c3439372e3230397a204d3335322e342c3437342e383537632d31342e3839372c31312e3137362d31382e3632312c32362e3037372c302c32322e333532206331362e37362d332e3732352d32302e3438342c32322e3335322d32302e3438342c32322e333532762d39382e37323363302c302c352e3538382d31362e3736352c33352e3338332d32362e303739632d352e3538372c372e3435332d32392e3739362c34302e39382d31362e37362c34362e353639206331332e3033362c352e3538372c32342e3230382d31362e3736352c32342e3230382d31362e373635433337382e3437312c3434382e3737382c3336372e3239392c3436332e3637392c3335322e342c3437342e3835377a204d3433352e30372c3338302e35343620632d382e3537332d31312e3134382d34302e3239342d32352e3334332d36322e3538352d32352e333433682d36342e383038763138322e34363163302c32322e3239352c31342e3139312c35342e3032352c32352e3333362c36322e36303120433239322e3731392c3630362e3236372c3237332c3537382e3433352c3237332c3537382e343335732d31392e3731392c32372e3833322d36302e3031332c32312e3832396331312e3134352d382e3537362c32352e3333362d34302e3330362c32352e3333362d36322e363031563335352e32303520632d32372e3432352c302d36342e3830382c302d36342e3830382c30632d32322e3239312c302d35342e3031322c31342e3139322d36322e3538352c32352e333431632d362e3030312d34302e3330342c32312e3832352d36302e3032382c32312e3832352d36302e30323820732d32372e3832362d31392e3732342d32312e3832352d36302e303363382e3537332c31312e3134382c34302e3239342c32352e3334332c36322e3538352c32352e3334336836342e383038762d36362e39393363302d32322e3239372d31342e3139312d35342e3032372d32352e3333362d36322e36303320433235332e3238312c3135302e3233322c3237332c3137382e3036362c3237332c3137382e3036367331392e3731392d32372e3833342c36302e3031332d32312e383331632d31312e3134352c382e3537362d32352e3333362c34302e3330362d32352e3333362c36322e3630337636362e393933206332372e3838352c302c36342e3830382c302c36342e3830382c306332322e3239312c302c35342e3031322d31342e3139352c36322e3538352d32352e33343363362e3030312c34302e3330362d32312e3832322c36302e30332d32312e3832322c36302e303320533434312e3037312c3334302e32342c3433352e30372c3338302e3534367a222f3e3c2f673e3c2f67, mem[2205 len 3] >> 16360,
               0
    if arg1 != 1:
        return 32, 580, 
               0x223c67207472616e73666f726d3d227472616e736c617465283135342e352c35352922203e3c67207472616e73666f726d3d227363616c6528302e30372922203e3c706174682066696c6c2d6f7061636974793d22302e3522207374726f6b653d227472616e73706172656e74222066696c6c3d22236666662220643d224d3435342e3531362c3732304c3539322c3236332e3639314c3437312e3534312c30483435392e3338483132302e3435394c302c3236332e3639324c3133372e3438342c373230483435342e3531367a204d3134342e3738342c33372e38396c3330322e3433322c302e303031206c3130342e3430372c3232382e3535326c2d3132352e32342c3431352e363635483136352e3631374c34302e3337372c3236362e3434324c3134342e3738342c33372e38397a222f3e3c706f6c79676f6e2066696c6c2d6f7061636974793d22302e3522207374726f6b653d227472616e73706172656e7422202066696c6c3d22236666662220706f696e74733d223235392e3237372c3537322e383431203333322e3732332c3537322e383431203333322e3732332c3335302e383133203434322e3531322c3335302e383133203434322e3531322c3237372e333134203333322e3732332c3237372e333134203333322e3732332c3134372e313539203235392e3237372c3134372e313539203235392e3237372c3237372e333134203134392e3438382c3237372e333134203134392e3438382c3335302e383133203235392e3237372c3335302e383133222f3e3c2f673e3c2f67, mem[708 len 28] >> 4384,
               0
    return 32, 569, 
           0x3e3c67207472616e73666f726d3d227472616e736c617465283135332e332c35352922203e3c67207472616e73666f726d3d227363616c6528302e30372922203e3c706174682066696c6c2d6f7061636974793d22302e3522207374726f6b653d227472616e73706172656e74222066696c6c3d22236666662220643d224d3432392e3730322c3633362e37346c3130362e3538332d3335332e37374c3434352e30362c38332e3236483137392e39344c38382e3731362c3238322e39376c3130362e3538332c3335332e3737483432392e3730327a204d3137362e3032312c3238322e3937683130322e32373120563136312e3731376836382e343138563238322e3937683130322e3237317636382e343732483334362e3731763230362e383431682d36382e343138563335312e343431483137362e303231563238322e39377a222f3e3c706174682066696c6c2d6f7061636974793d22302e3522207374726f6b653d227472616e73706172656e7422202066696c6c3d22236666662220643d224d3134382e3934342c373230683334322e35374c3632352c3237362e3932354c3439382e3530362c30682d3337322e30314c302c3237362e3932354c3133332e3438392c373230483134382e3934347a204d3135332e32322c34312e3633683331382e3536326c3130382e3836322c3233382e333138204c3436302e3630382c3637382e3337483136342e3339344c34342e3335382c3237392e3934374c3135332e32322c34312e36337a222f3e3c2f673e3c2f67, mem[697 len 7] >> 4296,
           0
}



}
