contract main {




// =====================  Runtime code  =====================


#
#  - leaveStaking(uint256 arg1)
#
address owner;
uint256 stor1;
address sub_717559c3Address;
address sub_39e1be0eAddress;
address teamAddress;
address treasuryAddress;
uint32 stor6;
address migratorAddress;
uint256 stor6;
uint256 sub_e5f6e9c9;
uint256 bonusMultiplier;
uint256 startBlock;
uint256 totalAllocPoint;
array of struct poolInfo;
mapping of struct userInfo;
array of address stor660301456019777184113296434797620819555017468543624515662331739614079884729;
array of uint256 stor660301456019777184113296434797620819555017468543624515662331739614079884730;
array of uint256 stor660301456019777184113296434797620819555017468543624515662331739614079884731;
array of uint256 stor660301456019777184113296434797620819555017468543624515662331739614079884732;

function poolLength() payable {
    return poolInfo.length
}

function poolInfo(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    return address(poolInfo[arg1].field_0), poolInfo[arg1].field_256, poolInfo[arg1].field_512, poolInfo[arg1].field_768
}

function totalAllocPoint() payable {
    return totalAllocPoint
}

function sub_39e1be0e(?) payable {
    return sub_39e1be0eAddress
}

function startBlock() payable {
    return startBlock
}

function treasury() payable {
    return treasuryAddress
}

function sub_717559c3(?) payable {
    return sub_717559c3Address
}

function migrator() payable {
    return address(migratorAddress)
}

function team() payable {
    return teamAddress
}

function owner() payable {
    return owner
}

function userInfo(uint256 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return userInfo[arg1][arg2].field_0, userInfo[arg1][arg2].field_256
}

function bonusMultiplier() payable {
    return bonusMultiplier
}

function sub_e5f6e9c9(?) payable {
    return sub_e5f6e9c9
}

function _fallback() payable {
    revert
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function newTeam(address arg1) payable {
    require calldata.size - 4 >= 32
    if teamAddress != msg.sender:
        revert with 0, 'team: le who are you?'
    teamAddress = arg1
    emit Team(arg1);
}

function newTreasury(address arg1) payable {
    require calldata.size - 4 >= 32
    if treasuryAddress != msg.sender:
        if teamAddress != msg.sender:
            revert with 0, 'treasury: invalid permissions'
    treasuryAddress = arg1
    emit Treasury(arg1);
}

function setMigrator(address arg1) payable {
    require calldata.size - 4 >= 32
    if treasuryAddress != msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0x737365744d69677261746f723a206d7573742062652066726f6d2074726561737572,
                    mem[198 len 30]
    address(migratorAddress) = arg1
}

function updateMultiplier(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if treasuryAddress != msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    42,
                    0x797570646174654d756c7469706c6965723a206f6e6c79207472656173757279206d6179207570646174,
                    mem[206 len 22]
    bonusMultiplier = arg1
}

function getMultiplier(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if arg1 > arg2:
        revert with 0, 'SafeMath: subtraction overflow'
    if not arg2 - arg1:
        return 0
    if (arg2 * bonusMultiplier) - (arg1 * bonusMultiplier) / arg2 - arg1 != bonusMultiplier:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    return ((arg2 * bonusMultiplier) - (arg1 * bonusMultiplier))
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657300,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function migrate(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= poolInfo.length:
        revert with 0, 'pool does not exist'
    if not address(migratorAddress):
        revert with 0, 'migrate: no migrator'
    require arg1 < poolInfo.length
    require ext_code.size(address(poolInfo[arg1].field_0))
    staticcall address(poolInfo[arg1].field_0).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
            revert with 0, 'Address: call to non-contract'
        if not ext_code.hash(address(poolInfo[arg1].field_0)):
            revert with 0, 'Address: call to non-contract'
        mem[260 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor6), uint32(stor6), ext_call.return_data[0 len 28]
    else:
        require ext_code.size(address(poolInfo[arg1].field_0))
        staticcall address(poolInfo[arg1].field_0).0xdd62ed3e with:
                gas gas_remaining wei
               args this.address, address(migratorAddress)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        54,
                        0x645361666548524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63,
                        mem[218 len 10]
        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
            revert with 0, 'Address: call to non-contract'
        if not ext_code.hash(address(poolInfo[arg1].field_0)):
            revert with 0, 'Address: call to non-contract'
        mem[260 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor6), uint32(stor6), ext_call.return_data[0 len 28]
        mem[324 len 0] = 0
    call address(poolInfo[arg1].field_0) with:
       funct uint32(stor6)
         gas gas_remaining wei
        args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[324 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with approve(address arg1, uint256 arg2), Mask(224, 0, stor6), uint32(stor6), ext_call.return_data[0]
        if not approve(address arg1, uint256 arg2), Mask(224, 0, stor6):
            revert with 0, 32, 42, 0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
    else:
        mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeHRC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            if not mem[292]:
                revert with 0, 
                            32,
                            42,
                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 371 len 22]
    require ext_code.size(address(migratorAddress))
    call address(migratorAddress).migrate(address arg1) with:
         gas gas_remaining wei
        args address(poolInfo[arg1].field_0)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'migrate: bad'
    address(poolInfo[arg1].field_0) = address(ext_call.return_data[0])
}

function sub_6818e928(?) payable {
    require calldata.size - 4 >= 64
    require arg1 < poolInfo.length
    require ext_code.size(address(poolInfo[arg1].field_0))
    staticcall address(poolInfo[arg1].field_0).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if block.number <= poolInfo[arg1].field_512:
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if not ext_call.return_data[0]:
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if poolInfo[arg1].field_512 > block.number:
        revert with 0, 'SafeMath: subtraction overflow'
    if not block.number - poolInfo[arg1].field_512:
        if not totalAllocPoint:
            revert with 0, 'SafeMath: division by zero'
        if not 0 / totalAllocPoint:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / block.number - poolInfo[arg1].field_512 != bonusMultiplier:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if not (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
        if not totalAllocPoint:
            revert with 0, 'SafeMath: division by zero'
        if not 0 / totalAllocPoint:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9) / (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != sub_e5f6e9c9:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if not (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9):
        if not totalAllocPoint:
            revert with 0, 'SafeMath: division by zero'
        if not 0 / totalAllocPoint:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9) != poolInfo[arg1].field_256:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if not totalAllocPoint:
        revert with 0, 'SafeMath: division by zero'
    if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
        revert with 0, 'SafeMath: addition overflow'
    if not userInfo[arg1][address(arg2)].field_0:
        if userInfo[arg1][address(arg2)].field_256 > 0:
            revert with 0, 'SafeMath: subtraction overflow'
        return -userInfo[arg1][address(arg2)].field_256
    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
    if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
        revert with 0, 'SafeMath: subtraction overflow'
    return (((10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
}

function updatePool(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= poolInfo.length:
        revert with 0, 'pool does not exist'
    if block.number > poolInfo[arg1].field_512:
        require ext_code.size(address(poolInfo[arg1].field_0))
        staticcall address(poolInfo[arg1].field_0).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0]:
            if poolInfo[arg1].field_512 > block.number:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.number - poolInfo[arg1].field_512:
                if not totalAllocPoint:
                    revert with 0, 'SafeMath: division by zero'
                if not 0 / totalAllocPoint:
                    if 0 > 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                    else:
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                else:
                    if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    if not 1000 * 0 / totalAllocPoint / 10650:
                        if 0 > 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args sub_39e1be0eAddress, 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    else:
                        if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
            else:
                if (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / block.number - poolInfo[arg1].field_512 != bonusMultiplier:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if not (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                    if not totalAllocPoint:
                        revert with 0, 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint:
                        if 0 > 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args teamAddress, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args treasuryAddress, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args sub_39e1be0eAddress, 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    else:
                        if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        if not 1000 * 0 / totalAllocPoint / 10650:
                            if 0 > 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                            if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                else:
                    if (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9) / (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != sub_e5f6e9c9:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if not (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9):
                        if not totalAllocPoint:
                            revert with 0, 'SafeMath: division by zero'
                        if not 0 / totalAllocPoint:
                            if 0 > 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            if not 1000 * 0 / totalAllocPoint / 10650:
                                if 0 > 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                    else:
                        if (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9) != poolInfo[arg1].field_256:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        if not totalAllocPoint:
                            revert with 0, 'SafeMath: division by zero'
                        if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                            if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint != 1000:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            if not 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650:
                                if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650 / 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650 != 2:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650):
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650) / ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650) != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if ((10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650) / ext_call.return_data[0]
        poolInfo[arg1].field_512 = block.number
}

function massUpdatePools() payable {
    mem[64] = 96
    idx = 0
    while idx < poolInfo.length:
        mem[0] = 11
        if block.number <= poolInfo[idx].field_512:
            idx = idx + 1
            continue 
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(poolInfo[idx].field_0))
        staticcall address(poolInfo[idx].field_0).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            poolInfo[idx].field_512 = block.number
            idx = idx + 1
            continue 
        _565 = mem[64]
        mem[64] = mem[64] + 64
        mem[_565] = 30
        mem[_565 + 32] = 'SafeMath: subtraction overflow'
        if poolInfo[idx].field_512 > block.number:
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
            idx = 32
            while idx < 30:
                mem[idx + mem[64] + 68] = mem[idx + _565 + 32]
                idx = idx + 32
                continue 
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.number - poolInfo[idx].field_512:
            _581 = mem[64]
            mem[64] = mem[64] + 64
            mem[_581] = 26
            mem[_581 + 32] = 'SafeMath: division by zero'
            if not totalAllocPoint:
                _586 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _586 + 68] = mem[idx + _581 + 32]
                    idx = idx + 32
                    continue 
                mem[_586 + 68] = mem[_586 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _586 + -mem[64] + 100
            if not 0 / totalAllocPoint:
                _619 = mem[64]
                mem[64] = mem[64] + 64
                mem[_619] = 26
                mem[_619 + 32] = 'SafeMath: division by zero'
                _633 = mem[64]
                mem[64] = mem[64] + 64
                mem[_633] = 30
                mem[_633 + 32] = 'SafeMath: subtraction overflow'
                if 0 > 0 / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _633 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, 0 / totalAllocPoint
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not 0 / totalAllocPoint:
                    _861 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_861] = 26
                    mem[_861 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _882 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _882 + 68] = mem[idx + _861 + 32]
                        idx = idx + 32
                        continue 
                    mem[_882 + 68] = mem[_882 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _882 + -mem[64] + 100
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _870 = mem[64]
                mem[64] = mem[64] + 64
                mem[_870] = 26
                mem[_870 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _901 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _901 + 68] = mem[idx + _870 + 32]
                    idx = idx + 32
                    continue 
                mem[_901 + 68] = mem[_901 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _901 + -mem[64] + 100
            if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _623 = mem[64]
            mem[64] = mem[64] + 64
            mem[_623] = 26
            mem[_623 + 32] = 'SafeMath: division by zero'
            if not 1000 * 0 / totalAllocPoint / 10650:
                _637 = mem[64]
                mem[64] = mem[64] + 64
                mem[_637] = 30
                mem[_637 + 32] = 'SafeMath: subtraction overflow'
                if 0 > 0 / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _637 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, 0 / totalAllocPoint
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not 0 / totalAllocPoint:
                    _869 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_869] = 26
                    mem[_869 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _898 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _898 + 68] = mem[idx + _869 + 32]
                        idx = idx + 32
                        continue 
                    mem[_898 + 68] = mem[_898 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _898 + -mem[64] + 100
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _881 = mem[64]
                mem[64] = mem[64] + 64
                mem[_881] = 26
                mem[_881 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _923 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _923 + 68] = mem[idx + _881 + 32]
                    idx = idx + 32
                    continue 
                mem[_923 + 68] = mem[_923 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _923 + -mem[64] + 100
            if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _642 = mem[64]
            mem[64] = mem[64] + 64
            mem[_642] = 30
            mem[_642 + 32] = 'SafeMath: subtraction overflow'
            if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                idx = 32
                while idx < 30:
                    mem[idx + mem[64] + 68] = mem[idx + _642 + 32]
                    idx = idx + 32
                    continue 
                revert with 0, 'SafeMath: subtraction overflow'
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args teamAddress, 1000 * 0 / totalAllocPoint / 10650
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = sub_39e1be0eAddress
            mem[mem[64] + 36] = (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                _880 = mem[64]
                mem[64] = mem[64] + 64
                mem[_880] = 26
                mem[_880 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _920 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _920 + 68] = mem[idx + _880 + 32]
                    idx = idx + 32
                    continue 
                mem[_920 + 68] = mem[_920 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _920 + -mem[64] + 100
            if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _897 = mem[64]
            mem[64] = mem[64] + 64
            mem[_897] = 26
            mem[_897 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0]:
                if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _946 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _946 + 68] = mem[idx + _897 + 32]
                idx = idx + 32
                continue 
            mem[_946 + 68] = mem[_946 + 74 len 26]
            revert with memory
              from mem[64]
               len _946 + -mem[64] + 100
        if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
            _584 = mem[64]
            mem[64] = mem[64] + 64
            mem[_584] = 26
            mem[_584 + 32] = 'SafeMath: division by zero'
            if not totalAllocPoint:
                _590 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _590 + 68] = mem[idx + _584 + 32]
                    idx = idx + 32
                    continue 
                mem[_590 + 68] = mem[_590 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _590 + -mem[64] + 100
            if not 0 / totalAllocPoint:
                _622 = mem[64]
                mem[64] = mem[64] + 64
                mem[_622] = 26
                mem[_622 + 32] = 'SafeMath: division by zero'
                _636 = mem[64]
                mem[64] = mem[64] + 64
                mem[_636] = 30
                mem[_636 + 32] = 'SafeMath: subtraction overflow'
                if 0 > 0 / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _636 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, 0 / totalAllocPoint
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not 0 / totalAllocPoint:
                    _866 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_866] = 26
                    mem[_866 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _894 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _894 + 68] = mem[idx + _866 + 32]
                        idx = idx + 32
                        continue 
                    mem[_894 + 68] = mem[_894 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _894 + -mem[64] + 100
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _879 = mem[64]
                mem[64] = mem[64] + 64
                mem[_879] = 26
                mem[_879 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _917 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _917 + 68] = mem[idx + _879 + 32]
                    idx = idx + 32
                    continue 
                mem[_917 + 68] = mem[_917 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _917 + -mem[64] + 100
            if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _627 = mem[64]
            mem[64] = mem[64] + 64
            mem[_627] = 26
            mem[_627 + 32] = 'SafeMath: division by zero'
            if not 1000 * 0 / totalAllocPoint / 10650:
                _641 = mem[64]
                mem[64] = mem[64] + 64
                mem[_641] = 30
                mem[_641 + 32] = 'SafeMath: subtraction overflow'
                if 0 > 0 / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _641 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, 0 / totalAllocPoint
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not 0 / totalAllocPoint:
                    _878 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_878] = 26
                    mem[_878 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _914 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _914 + 68] = mem[idx + _878 + 32]
                        idx = idx + 32
                        continue 
                    mem[_914 + 68] = mem[_914 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _914 + -mem[64] + 100
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _893 = mem[64]
                mem[64] = mem[64] + 64
                mem[_893] = 26
                mem[_893 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _942 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _942 + 68] = mem[idx + _893 + 32]
                    idx = idx + 32
                    continue 
                mem[_942 + 68] = mem[_942 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _942 + -mem[64] + 100
            if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _650 = mem[64]
            mem[64] = mem[64] + 64
            mem[_650] = 30
            mem[_650 + 32] = 'SafeMath: subtraction overflow'
            if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                idx = 32
                while idx < 30:
                    mem[idx + mem[64] + 68] = mem[idx + _650 + 32]
                    idx = idx + 32
                    continue 
                revert with 0, 'SafeMath: subtraction overflow'
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args teamAddress, 1000 * 0 / totalAllocPoint / 10650
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = sub_39e1be0eAddress
            mem[mem[64] + 36] = (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                _892 = mem[64]
                mem[64] = mem[64] + 64
                mem[_892] = 26
                mem[_892 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _939 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _939 + 68] = mem[idx + _892 + 32]
                    idx = idx + 32
                    continue 
                mem[_939 + 68] = mem[_939 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _939 + -mem[64] + 100
            if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _913 = mem[64]
            mem[64] = mem[64] + 64
            mem[_913] = 26
            mem[_913 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0]:
                if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _967 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _967 + 68] = mem[idx + _913 + 32]
                idx = idx + 32
                continue 
            mem[_967 + 68] = mem[_967 + 74 len 26]
            revert with memory
              from mem[64]
               len _967 + -mem[64] + 100
        if (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != sub_e5f6e9c9:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if not (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9):
            _585 = mem[64]
            mem[64] = mem[64] + 64
            mem[_585] = 26
            mem[_585 + 32] = 'SafeMath: division by zero'
            if not totalAllocPoint:
                _593 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _593 + 68] = mem[idx + _585 + 32]
                    idx = idx + 32
                    continue 
                mem[_593 + 68] = mem[_593 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _593 + -mem[64] + 100
            if not 0 / totalAllocPoint:
                _626 = mem[64]
                mem[64] = mem[64] + 64
                mem[_626] = 26
                mem[_626 + 32] = 'SafeMath: division by zero'
                _640 = mem[64]
                mem[64] = mem[64] + 64
                mem[_640] = 30
                mem[_640 + 32] = 'SafeMath: subtraction overflow'
                if 0 > 0 / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _640 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, 0 / totalAllocPoint
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not 0 / totalAllocPoint:
                    _875 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_875] = 26
                    mem[_875 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _910 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _910 + 68] = mem[idx + _875 + 32]
                        idx = idx + 32
                        continue 
                    mem[_910 + 68] = mem[_910 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _910 + -mem[64] + 100
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _891 = mem[64]
                mem[64] = mem[64] + 64
                mem[_891] = 26
                mem[_891 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _936 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _936 + 68] = mem[idx + _891 + 32]
                    idx = idx + 32
                    continue 
                mem[_936 + 68] = mem[_936 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _936 + -mem[64] + 100
            if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _629 = mem[64]
            mem[64] = mem[64] + 64
            mem[_629] = 26
            mem[_629 + 32] = 'SafeMath: division by zero'
            if not 1000 * 0 / totalAllocPoint / 10650:
                _649 = mem[64]
                mem[64] = mem[64] + 64
                mem[_649] = 30
                mem[_649 + 32] = 'SafeMath: subtraction overflow'
                if 0 > 0 / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _649 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, 0 / totalAllocPoint
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not 0 / totalAllocPoint:
                    _890 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_890] = 26
                    mem[_890 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _933 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _933 + 68] = mem[idx + _890 + 32]
                        idx = idx + 32
                        continue 
                    mem[_933 + 68] = mem[_933 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _933 + -mem[64] + 100
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _909 = mem[64]
                mem[64] = mem[64] + 64
                mem[_909] = 26
                mem[_909 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _963 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _963 + 68] = mem[idx + _909 + 32]
                    idx = idx + 32
                    continue 
                mem[_963 + 68] = mem[_963 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _963 + -mem[64] + 100
            if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _659 = mem[64]
            mem[64] = mem[64] + 64
            mem[_659] = 30
            mem[_659 + 32] = 'SafeMath: subtraction overflow'
            if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                idx = 32
                while idx < 30:
                    mem[idx + mem[64] + 68] = mem[idx + _659 + 32]
                    idx = idx + 32
                    continue 
                revert with 0, 'SafeMath: subtraction overflow'
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args teamAddress, 1000 * 0 / totalAllocPoint / 10650
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = sub_39e1be0eAddress
            mem[mem[64] + 36] = (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                _908 = mem[64]
                mem[64] = mem[64] + 64
                mem[_908] = 26
                mem[_908 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _960 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _960 + 68] = mem[idx + _908 + 32]
                    idx = idx + 32
                    continue 
                mem[_960 + 68] = mem[_960 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _960 + -mem[64] + 100
            if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _932 = mem[64]
            mem[64] = mem[64] + 64
            mem[_932] = 26
            mem[_932 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0]:
                if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _988 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _988 + 68] = mem[idx + _932 + 32]
                idx = idx + 32
                continue 
            mem[_988 + 68] = mem[_988 + 74 len 26]
            revert with memory
              from mem[64]
               len _988 + -mem[64] + 100
        if (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9) != poolInfo[idx].field_256:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        _589 = mem[64]
        mem[64] = mem[64] + 64
        mem[_589] = 26
        mem[_589 + 32] = 'SafeMath: division by zero'
        if not totalAllocPoint:
            _597 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _597 + 68] = mem[idx + _589 + 32]
                idx = idx + 32
                continue 
            mem[_597 + 68] = mem[_597 + 74 len 26]
            revert with memory
              from mem[64]
               len _597 + -mem[64] + 100
        if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
            _628 = mem[64]
            mem[64] = mem[64] + 64
            mem[_628] = 26
            mem[_628 + 32] = 'SafeMath: division by zero'
            _648 = mem[64]
            mem[64] = mem[64] + 64
            mem[_648] = 30
            mem[_648 + 32] = 'SafeMath: subtraction overflow'
            if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                idx = 32
                while idx < 30:
                    mem[idx + mem[64] + 68] = mem[idx + _648 + 32]
                    idx = idx + 32
                    continue 
                revert with 0, 'SafeMath: subtraction overflow'
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args teamAddress, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args treasuryAddress, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = sub_39e1be0eAddress
            mem[mem[64] + 36] = (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                _887 = mem[64]
                mem[64] = mem[64] + 64
                mem[_887] = 26
                mem[_887 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _929 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _929 + 68] = mem[idx + _887 + 32]
                    idx = idx + 32
                    continue 
                mem[_929 + 68] = mem[_929 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _929 + -mem[64] + 100
            if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _907 = mem[64]
            mem[64] = mem[64] + 64
            mem[_907] = 26
            mem[_907 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0]:
                if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _957 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _957 + 68] = mem[idx + _907 + 32]
                idx = idx + 32
                continue 
            mem[_957 + 68] = mem[_957 + 74 len 26]
            revert with memory
              from mem[64]
               len _957 + -mem[64] + 100
        if 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint != 1000:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        _630 = mem[64]
        mem[64] = mem[64] + 64
        mem[_630] = 26
        mem[_630 + 32] = 'SafeMath: division by zero'
        if not 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650:
            _658 = mem[64]
            mem[64] = mem[64] + 64
            mem[_658] = 30
            mem[_658 + 32] = 'SafeMath: subtraction overflow'
            if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                idx = 32
                while idx < 30:
                    mem[idx + mem[64] + 68] = mem[idx + _658 + 32]
                    idx = idx + 32
                    continue 
                revert with 0, 'SafeMath: subtraction overflow'
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = sub_39e1be0eAddress
            mem[mem[64] + 36] = (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                _906 = mem[64]
                mem[64] = mem[64] + 64
                mem[_906] = 26
                mem[_906 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _954 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _954 + 68] = mem[idx + _906 + 32]
                    idx = idx + 32
                    continue 
                mem[_954 + 68] = mem[_954 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _954 + -mem[64] + 100
            if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _928 = mem[64]
            mem[64] = mem[64] + 64
            mem[_928] = 26
            mem[_928 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0]:
                if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _984 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _984 + 68] = mem[idx + _928 + 32]
                idx = idx + 32
                continue 
            mem[_984 + 68] = mem[_984 + 74 len 26]
            revert with memory
              from mem[64]
               len _984 + -mem[64] + 100
        if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650 / 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650 != 2:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        _675 = mem[64]
        mem[64] = mem[64] + 64
        mem[_675] = 30
        mem[_675 + 32] = 'SafeMath: subtraction overflow'
        if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
            idx = 32
            while idx < 30:
                mem[idx + mem[64] + 68] = mem[idx + _675 + 32]
                idx = idx + 32
                continue 
            revert with 0, 'SafeMath: subtraction overflow'
        require ext_code.size(sub_717559c3Address)
        call sub_717559c3Address.0x40c10f19 with:
             gas gas_remaining wei
            args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require ext_code.size(sub_717559c3Address)
        call sub_717559c3Address.0x40c10f19 with:
             gas gas_remaining wei
            args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = sub_39e1be0eAddress
        mem[mem[64] + 36] = ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650)
        require ext_code.size(sub_717559c3Address)
        call sub_717559c3Address.0x40c10f19 with:
             gas gas_remaining wei
            args sub_39e1be0eAddress, ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if not ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650):
            _927 = mem[64]
            mem[64] = mem[64] + 64
            mem[_927] = 26
            mem[_927 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0]:
                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _981 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _981 + 68] = mem[idx + _927 + 32]
                idx = idx + 32
                continue 
            mem[_981 + 68] = mem[_981 + 74 len 26]
            revert with memory
              from mem[64]
               len _981 + -mem[64] + 100
        if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650) / ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650) != 10^12:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        _953 = mem[64]
        mem[64] = mem[64] + 64
        mem[_953] = 26
        mem[_953 + 32] = 'SafeMath: division by zero'
        if ext_call.return_data[0]:
            if ((10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                revert with 0, 'SafeMath: addition overflow'
            poolInfo[idx].field_768 += (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650) / ext_call.return_data[0]
            poolInfo[idx].field_512 = block.number
            idx = idx + 1
            continue 
        _1011 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 26
        idx = 0
        while idx < 26:
            mem[idx + _1011 + 68] = mem[idx + _953 + 32]
            idx = idx + 32
            continue 
        mem[_1011 + 68] = mem[_1011 + 74 len 26]
        revert with memory
          from mem[64]
           len _1011 + -mem[64] + 100
}

function set(uint256 arg1, uint256 arg2, bool arg3) payable {
    mem[64] = 96
    require calldata.size - 4 >= 96
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    if arg1 >= poolInfo.length:
        revert with 0, 'pool does not exist'
    if not arg3:
        require arg1 < poolInfo.length
        poolInfo[arg1].field_256 = arg2
        if poolInfo[arg1].field_256 != arg2:
            if poolInfo[arg1].field_256 > totalAllocPoint:
                revert with 0, 'SafeMath: subtraction overflow'
            if arg2 < 0:
                revert with 0, 'SafeMath: addition overflow'
            totalAllocPoint = arg2 + totalAllocPoint - poolInfo[arg1].field_256
            idx = 1
            s = 0
            while idx < poolInfo.length:
                mem[0] = 11
                if poolInfo[idx].field_256 + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                s = poolInfo[idx].field_256 + s
                continue 
            if -stor[(4 * stor11.length) + _605 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _605 + 1]):
                require 0 < poolInfo.length
                if uint256(poolInfo.field_256) > totalAllocPoint:
                    revert with 0, 'SafeMath: subtraction overflow'
                if -stor[(4 * stor11.length) + _605 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _605 + 1]) / 3 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                totalAllocPoint = (-stor[(4 * stor11.length) + _605 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _605 + 1]) / 3) + totalAllocPoint - uint256(poolInfo.field_256)
                require 0 < poolInfo.length
                uint256(poolInfo.field_256) = -stor[(4 * stor11.length) + _605 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _605 + 1]) / 3
    else:
        idx = 0
        while idx < poolInfo.length:
            mem[0] = 11
            if block.number <= poolInfo[idx].field_512:
                idx = idx + 1
                continue 
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(poolInfo[idx].field_0))
            staticcall address(poolInfo[idx].field_0).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _630 = mem[64]
            mem[64] = mem[64] + 64
            mem[_630] = 30
            mem[_630 + 32] = 'SafeMath: subtraction overflow'
            if poolInfo[idx].field_512 > block.number:
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                idx = 32
                while idx < 30:
                    mem[idx + mem[64] + 68] = mem[idx + _630 + 32]
                    idx = idx + 32
                    continue 
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.number - poolInfo[idx].field_512:
                _668 = mem[64]
                mem[64] = mem[64] + 64
                mem[_668] = 26
                mem[_668 + 32] = 'SafeMath: division by zero'
                if not totalAllocPoint:
                    _673 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _673 + 68] = mem[idx + _668 + 32]
                        idx = idx + 32
                        continue 
                    mem[_673 + 68] = mem[_673 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _673 + -mem[64] + 100
                if not 0 / totalAllocPoint:
                    _706 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_706] = 26
                    mem[_706 + 32] = 'SafeMath: division by zero'
                    _720 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_720] = 30
                    mem[_720 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > 0 / totalAllocPoint:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _720 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = sub_39e1be0eAddress
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        _948 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_948] = 26
                        mem[_948 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0]:
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _969 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _969 + 68] = mem[idx + _948 + 32]
                            idx = idx + 32
                            continue 
                        mem[_969 + 68] = mem[_969 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _969 + -mem[64] + 100
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _957 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_957] = 26
                    mem[_957 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _988 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _988 + 68] = mem[idx + _957 + 32]
                        idx = idx + 32
                        continue 
                    mem[_988 + 68] = mem[_988 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _988 + -mem[64] + 100
                if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _710 = mem[64]
                mem[64] = mem[64] + 64
                mem[_710] = 26
                mem[_710 + 32] = 'SafeMath: division by zero'
                if not 1000 * 0 / totalAllocPoint / 10650:
                    _724 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_724] = 30
                    mem[_724 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > 0 / totalAllocPoint:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _724 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = sub_39e1be0eAddress
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        _956 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_956] = 26
                        mem[_956 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0]:
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _985 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _985 + 68] = mem[idx + _956 + 32]
                            idx = idx + 32
                            continue 
                        mem[_985 + 68] = mem[_985 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _985 + -mem[64] + 100
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _968 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_968] = 26
                    mem[_968 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1010 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1010 + 68] = mem[idx + _968 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1010 + 68] = mem[_1010 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1010 + -mem[64] + 100
                if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _729 = mem[64]
                mem[64] = mem[64] + 64
                mem[_729] = 30
                mem[_729 + 32] = 'SafeMath: subtraction overflow'
                if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _729 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                    _967 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_967] = 26
                    mem[_967 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1007 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1007 + 68] = mem[idx + _967 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1007 + 68] = mem[_1007 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1007 + -mem[64] + 100
                if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _984 = mem[64]
                mem[64] = mem[64] + 64
                mem[_984] = 26
                mem[_984 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _1033 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _1033 + 68] = mem[idx + _984 + 32]
                    idx = idx + 32
                    continue 
                mem[_1033 + 68] = mem[_1033 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1033 + -mem[64] + 100
            if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                _671 = mem[64]
                mem[64] = mem[64] + 64
                mem[_671] = 26
                mem[_671 + 32] = 'SafeMath: division by zero'
                if not totalAllocPoint:
                    _677 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _677 + 68] = mem[idx + _671 + 32]
                        idx = idx + 32
                        continue 
                    mem[_677 + 68] = mem[_677 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _677 + -mem[64] + 100
                if not 0 / totalAllocPoint:
                    _709 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_709] = 26
                    mem[_709 + 32] = 'SafeMath: division by zero'
                    _723 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_723] = 30
                    mem[_723 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > 0 / totalAllocPoint:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _723 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = sub_39e1be0eAddress
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        _953 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_953] = 26
                        mem[_953 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0]:
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _981 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _981 + 68] = mem[idx + _953 + 32]
                            idx = idx + 32
                            continue 
                        mem[_981 + 68] = mem[_981 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _981 + -mem[64] + 100
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _966 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_966] = 26
                    mem[_966 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1004 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1004 + 68] = mem[idx + _966 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1004 + 68] = mem[_1004 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1004 + -mem[64] + 100
                if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _714 = mem[64]
                mem[64] = mem[64] + 64
                mem[_714] = 26
                mem[_714 + 32] = 'SafeMath: division by zero'
                if not 1000 * 0 / totalAllocPoint / 10650:
                    _728 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_728] = 30
                    mem[_728 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > 0 / totalAllocPoint:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _728 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = sub_39e1be0eAddress
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        _965 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_965] = 26
                        mem[_965 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0]:
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _1001 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _1001 + 68] = mem[idx + _965 + 32]
                            idx = idx + 32
                            continue 
                        mem[_1001 + 68] = mem[_1001 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1001 + -mem[64] + 100
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _980 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_980] = 26
                    mem[_980 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1029 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1029 + 68] = mem[idx + _980 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1029 + 68] = mem[_1029 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1029 + -mem[64] + 100
                if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _737 = mem[64]
                mem[64] = mem[64] + 64
                mem[_737] = 30
                mem[_737 + 32] = 'SafeMath: subtraction overflow'
                if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _737 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                    _979 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_979] = 26
                    mem[_979 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1026 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1026 + 68] = mem[idx + _979 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1026 + 68] = mem[_1026 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1026 + -mem[64] + 100
                if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1000 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1000] = 26
                mem[_1000 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _1054 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _1054 + 68] = mem[idx + _1000 + 32]
                    idx = idx + 32
                    continue 
                mem[_1054 + 68] = mem[_1054 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1054 + -mem[64] + 100
            if (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != sub_e5f6e9c9:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9):
                _672 = mem[64]
                mem[64] = mem[64] + 64
                mem[_672] = 26
                mem[_672 + 32] = 'SafeMath: division by zero'
                if not totalAllocPoint:
                    _680 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _680 + 68] = mem[idx + _672 + 32]
                        idx = idx + 32
                        continue 
                    mem[_680 + 68] = mem[_680 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _680 + -mem[64] + 100
                if not 0 / totalAllocPoint:
                    _713 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_713] = 26
                    mem[_713 + 32] = 'SafeMath: division by zero'
                    _727 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_727] = 30
                    mem[_727 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > 0 / totalAllocPoint:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _727 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = sub_39e1be0eAddress
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        _962 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_962] = 26
                        mem[_962 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0]:
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _997 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _997 + 68] = mem[idx + _962 + 32]
                            idx = idx + 32
                            continue 
                        mem[_997 + 68] = mem[_997 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _997 + -mem[64] + 100
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _978 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_978] = 26
                    mem[_978 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1023 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1023 + 68] = mem[idx + _978 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1023 + 68] = mem[_1023 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1023 + -mem[64] + 100
                if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _716 = mem[64]
                mem[64] = mem[64] + 64
                mem[_716] = 26
                mem[_716 + 32] = 'SafeMath: division by zero'
                if not 1000 * 0 / totalAllocPoint / 10650:
                    _736 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_736] = 30
                    mem[_736 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > 0 / totalAllocPoint:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _736 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = sub_39e1be0eAddress
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        _977 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_977] = 26
                        mem[_977 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0]:
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _1020 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _1020 + 68] = mem[idx + _977 + 32]
                            idx = idx + 32
                            continue 
                        mem[_1020 + 68] = mem[_1020 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1020 + -mem[64] + 100
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _996 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_996] = 26
                    mem[_996 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1050 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1050 + 68] = mem[idx + _996 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1050 + 68] = mem[_1050 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1050 + -mem[64] + 100
                if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _746 = mem[64]
                mem[64] = mem[64] + 64
                mem[_746] = 30
                mem[_746 + 32] = 'SafeMath: subtraction overflow'
                if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _746 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                    _995 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_995] = 26
                    mem[_995 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1047 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1047 + 68] = mem[idx + _995 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1047 + 68] = mem[_1047 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1047 + -mem[64] + 100
                if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1019 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1019] = 26
                mem[_1019 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _1075 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _1075 + 68] = mem[idx + _1019 + 32]
                    idx = idx + 32
                    continue 
                mem[_1075 + 68] = mem[_1075 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1075 + -mem[64] + 100
            if (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9) != poolInfo[idx].field_256:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _676 = mem[64]
            mem[64] = mem[64] + 64
            mem[_676] = 26
            mem[_676 + 32] = 'SafeMath: division by zero'
            if not totalAllocPoint:
                _684 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _684 + 68] = mem[idx + _676 + 32]
                    idx = idx + 32
                    continue 
                mem[_684 + 68] = mem[_684 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _684 + -mem[64] + 100
            if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                _715 = mem[64]
                mem[64] = mem[64] + 64
                mem[_715] = 26
                mem[_715 + 32] = 'SafeMath: division by zero'
                _735 = mem[64]
                mem[64] = mem[64] + 64
                mem[_735] = 30
                mem[_735 + 32] = 'SafeMath: subtraction overflow'
                if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _735 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                    _974 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_974] = 26
                    mem[_974 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1016 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1016 + 68] = mem[idx + _974 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1016 + 68] = mem[_1016 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1016 + -mem[64] + 100
                if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _994 = mem[64]
                mem[64] = mem[64] + 64
                mem[_994] = 26
                mem[_994 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _1044 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _1044 + 68] = mem[idx + _994 + 32]
                    idx = idx + 32
                    continue 
                mem[_1044 + 68] = mem[_1044 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1044 + -mem[64] + 100
            if 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint != 1000:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _717 = mem[64]
            mem[64] = mem[64] + 64
            mem[_717] = 26
            mem[_717 + 32] = 'SafeMath: division by zero'
            if not 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650:
                _745 = mem[64]
                mem[64] = mem[64] + 64
                mem[_745] = 30
                mem[_745 + 32] = 'SafeMath: subtraction overflow'
                if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _745 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                    _993 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_993] = 26
                    mem[_993 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1041 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1041 + 68] = mem[idx + _993 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1041 + 68] = mem[_1041 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1041 + -mem[64] + 100
                if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1015 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1015] = 26
                mem[_1015 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _1071 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _1071 + 68] = mem[idx + _1015 + 32]
                    idx = idx + 32
                    continue 
                mem[_1071 + 68] = mem[_1071 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1071 + -mem[64] + 100
            if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650 / 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650 != 2:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _762 = mem[64]
            mem[64] = mem[64] + 64
            mem[_762] = 30
            mem[_762 + 32] = 'SafeMath: subtraction overflow'
            if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                idx = 32
                while idx < 30:
                    mem[idx + mem[64] + 68] = mem[idx + _762 + 32]
                    idx = idx + 32
                    continue 
                revert with 0, 'SafeMath: subtraction overflow'
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = sub_39e1be0eAddress
            mem[mem[64] + 36] = ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650)
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args sub_39e1be0eAddress, ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if not ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650):
                _1014 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1014] = 26
                mem[_1014 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _1068 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _1068 + 68] = mem[idx + _1014 + 32]
                    idx = idx + 32
                    continue 
                mem[_1068 + 68] = mem[_1068 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1068 + -mem[64] + 100
            if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650) / ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650) != 10^12:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1040 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1040] = 26
            mem[_1040 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0]:
                if ((10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650) / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _1098 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _1098 + 68] = mem[idx + _1040 + 32]
                idx = idx + 32
                continue 
            mem[_1098 + 68] = mem[_1098 + 74 len 26]
            revert with memory
              from mem[64]
               len _1098 + -mem[64] + 100
        require arg1 < poolInfo.length
        poolInfo[arg1].field_256 = arg2
        if poolInfo[arg1].field_256 != arg2:
            if poolInfo[arg1].field_256 > totalAllocPoint:
                revert with 0, 'SafeMath: subtraction overflow'
            if arg2 < 0:
                revert with 0, 'SafeMath: addition overflow'
            totalAllocPoint = arg2 + totalAllocPoint - poolInfo[arg1].field_256
            idx = 1
            s = 0
            while idx < poolInfo.length:
                mem[0] = 11
                if poolInfo[idx].field_256 + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                s = poolInfo[idx].field_256 + s
                continue 
            if -stor[(4 * stor11.length) + _1251 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1251 + 1]):
                require 0 < poolInfo.length
                if uint256(poolInfo.field_256) > totalAllocPoint:
                    revert with 0, 'SafeMath: subtraction overflow'
                if -stor[(4 * stor11.length) + _1251 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1251 + 1]) / 3 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                totalAllocPoint = (-stor[(4 * stor11.length) + _1251 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1251 + 1]) / 3) + totalAllocPoint - uint256(poolInfo.field_256)
                require 0 < poolInfo.length
                uint256(poolInfo.field_256) = -stor[(4 * stor11.length) + _1251 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1251 + 1]) / 3
}

function add(uint256 arg1, address arg2, bool arg3) payable {
    mem[64] = 96
    require calldata.size - 4 >= 96
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    idx = 0
    while idx < poolInfo.length:
        mem[0] = 11
        if address(poolInfo[idx].field_0) == arg2:
            revert with 0, 'add: existing pool'
        idx = idx + 1
        continue 
    if not arg3:
        if arg1 + totalAllocPoint < totalAllocPoint:
            revert with 0, 'SafeMath: addition overflow'
        totalAllocPoint += arg1
        poolInfo.length++
        stor175B[stor11.length] = arg2
        stor175B[stor11.length] = arg1
        if block.number > startBlock:
            stor175B[stor11.length] = block.number
            stor175B[stor11.length] = 0
            idx = 1
            s = 0
            while idx < poolInfo.length:
                mem[0] = 11
                _1209 = sha3(11)
                if poolInfo[idx].field_256 + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                s = poolInfo[idx].field_256 + s
                continue 
            if -stor[(4 * stor11.length) + _1209 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1209 + 1]):
                require 0 < poolInfo.length
                if uint256(poolInfo.field_256) > totalAllocPoint:
                    revert with 0, 'SafeMath: subtraction overflow'
                if -stor[(4 * stor11.length) + _1209 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1209 + 1]) / 3 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                totalAllocPoint = (-stor[(4 * stor11.length) + _1209 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1209 + 1]) / 3) + totalAllocPoint - uint256(poolInfo.field_256)
                require 0 < poolInfo.length
                uint256(poolInfo.field_256) = -stor[(4 * stor11.length) + _1209 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1209 + 1]) / 3
        else:
            stor175B[stor11.length] = startBlock
            stor175B[stor11.length] = 0
            idx = 1
            s = 0
            while idx < poolInfo.length:
                mem[0] = 11
                _1210 = sha3(11)
                if poolInfo[idx].field_256 + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                s = poolInfo[idx].field_256 + s
                continue 
            if -stor[(4 * stor11.length) + _1210 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1210 + 1]):
                require 0 < poolInfo.length
                if uint256(poolInfo.field_256) > totalAllocPoint:
                    revert with 0, 'SafeMath: subtraction overflow'
                if -stor[(4 * stor11.length) + _1210 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1210 + 1]) / 3 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                totalAllocPoint = (-stor[(4 * stor11.length) + _1210 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1210 + 1]) / 3) + totalAllocPoint - uint256(poolInfo.field_256)
                require 0 < poolInfo.length
                uint256(poolInfo.field_256) = -stor[(4 * stor11.length) + _1210 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1210 + 1]) / 3
    else:
        idx = 0
        while idx < poolInfo.length:
            mem[0] = 11
            if block.number <= poolInfo[idx].field_512:
                idx = idx + 1
                continue 
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(poolInfo[idx].field_0))
            staticcall address(poolInfo[idx].field_0).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _1242 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1242] = 30
            mem[_1242 + 32] = 'SafeMath: subtraction overflow'
            if poolInfo[idx].field_512 > block.number:
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                idx = 32
                while idx < 30:
                    mem[idx + mem[64] + 68] = mem[idx + _1242 + 32]
                    idx = idx + 32
                    continue 
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.number - poolInfo[idx].field_512:
                _1290 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1290] = 26
                mem[_1290 + 32] = 'SafeMath: division by zero'
                if not totalAllocPoint:
                    _1295 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1295 + 68] = mem[idx + _1290 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1295 + 68] = mem[_1295 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1295 + -mem[64] + 100
                if not 0 / totalAllocPoint:
                    _1328 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1328] = 26
                    mem[_1328 + 32] = 'SafeMath: division by zero'
                    _1342 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1342] = 30
                    mem[_1342 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > 0 / totalAllocPoint:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _1342 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = sub_39e1be0eAddress
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        _1570 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1570] = 26
                        mem[_1570 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0]:
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _1591 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _1591 + 68] = mem[idx + _1570 + 32]
                            idx = idx + 32
                            continue 
                        mem[_1591 + 68] = mem[_1591 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1591 + -mem[64] + 100
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1579 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1579] = 26
                    mem[_1579 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1610 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1610 + 68] = mem[idx + _1579 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1610 + 68] = mem[_1610 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1610 + -mem[64] + 100
                if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1332 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1332] = 26
                mem[_1332 + 32] = 'SafeMath: division by zero'
                if not 1000 * 0 / totalAllocPoint / 10650:
                    _1346 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1346] = 30
                    mem[_1346 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > 0 / totalAllocPoint:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _1346 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = sub_39e1be0eAddress
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        _1578 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1578] = 26
                        mem[_1578 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0]:
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _1607 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _1607 + 68] = mem[idx + _1578 + 32]
                            idx = idx + 32
                            continue 
                        mem[_1607 + 68] = mem[_1607 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1607 + -mem[64] + 100
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1590 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1590] = 26
                    mem[_1590 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1632 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1632 + 68] = mem[idx + _1590 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1632 + 68] = mem[_1632 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1632 + -mem[64] + 100
                if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1351 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1351] = 30
                mem[_1351 + 32] = 'SafeMath: subtraction overflow'
                if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _1351 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                    _1589 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1589] = 26
                    mem[_1589 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1629 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1629 + 68] = mem[idx + _1589 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1629 + 68] = mem[_1629 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1629 + -mem[64] + 100
                if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1606 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1606] = 26
                mem[_1606 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _1655 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _1655 + 68] = mem[idx + _1606 + 32]
                    idx = idx + 32
                    continue 
                mem[_1655 + 68] = mem[_1655 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1655 + -mem[64] + 100
            if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                _1293 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1293] = 26
                mem[_1293 + 32] = 'SafeMath: division by zero'
                if not totalAllocPoint:
                    _1299 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1299 + 68] = mem[idx + _1293 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1299 + 68] = mem[_1299 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1299 + -mem[64] + 100
                if not 0 / totalAllocPoint:
                    _1331 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1331] = 26
                    mem[_1331 + 32] = 'SafeMath: division by zero'
                    _1345 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1345] = 30
                    mem[_1345 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > 0 / totalAllocPoint:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _1345 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = sub_39e1be0eAddress
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        _1575 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1575] = 26
                        mem[_1575 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0]:
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _1603 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _1603 + 68] = mem[idx + _1575 + 32]
                            idx = idx + 32
                            continue 
                        mem[_1603 + 68] = mem[_1603 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1603 + -mem[64] + 100
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1588 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1588] = 26
                    mem[_1588 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1626 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1626 + 68] = mem[idx + _1588 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1626 + 68] = mem[_1626 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1626 + -mem[64] + 100
                if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1336 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1336] = 26
                mem[_1336 + 32] = 'SafeMath: division by zero'
                if not 1000 * 0 / totalAllocPoint / 10650:
                    _1350 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1350] = 30
                    mem[_1350 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > 0 / totalAllocPoint:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _1350 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = sub_39e1be0eAddress
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        _1587 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1587] = 26
                        mem[_1587 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0]:
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _1623 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _1623 + 68] = mem[idx + _1587 + 32]
                            idx = idx + 32
                            continue 
                        mem[_1623 + 68] = mem[_1623 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1623 + -mem[64] + 100
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1602 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1602] = 26
                    mem[_1602 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1651 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1651 + 68] = mem[idx + _1602 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1651 + 68] = mem[_1651 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1651 + -mem[64] + 100
                if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1359 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1359] = 30
                mem[_1359 + 32] = 'SafeMath: subtraction overflow'
                if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _1359 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                    _1601 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1601] = 26
                    mem[_1601 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1648 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1648 + 68] = mem[idx + _1601 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1648 + 68] = mem[_1648 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1648 + -mem[64] + 100
                if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1622 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1622] = 26
                mem[_1622 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _1676 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _1676 + 68] = mem[idx + _1622 + 32]
                    idx = idx + 32
                    continue 
                mem[_1676 + 68] = mem[_1676 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1676 + -mem[64] + 100
            if (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != sub_e5f6e9c9:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9):
                _1294 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1294] = 26
                mem[_1294 + 32] = 'SafeMath: division by zero'
                if not totalAllocPoint:
                    _1302 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1302 + 68] = mem[idx + _1294 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1302 + 68] = mem[_1302 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1302 + -mem[64] + 100
                if not 0 / totalAllocPoint:
                    _1335 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1335] = 26
                    mem[_1335 + 32] = 'SafeMath: division by zero'
                    _1349 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1349] = 30
                    mem[_1349 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > 0 / totalAllocPoint:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _1349 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = sub_39e1be0eAddress
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        _1584 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1584] = 26
                        mem[_1584 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0]:
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _1619 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _1619 + 68] = mem[idx + _1584 + 32]
                            idx = idx + 32
                            continue 
                        mem[_1619 + 68] = mem[_1619 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1619 + -mem[64] + 100
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1600 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1600] = 26
                    mem[_1600 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1645 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1645 + 68] = mem[idx + _1600 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1645 + 68] = mem[_1645 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1645 + -mem[64] + 100
                if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1338 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1338] = 26
                mem[_1338 + 32] = 'SafeMath: division by zero'
                if not 1000 * 0 / totalAllocPoint / 10650:
                    _1358 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1358] = 30
                    mem[_1358 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > 0 / totalAllocPoint:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _1358 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = sub_39e1be0eAddress
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        _1599 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1599] = 26
                        mem[_1599 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0]:
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _1642 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _1642 + 68] = mem[idx + _1599 + 32]
                            idx = idx + 32
                            continue 
                        mem[_1642 + 68] = mem[_1642 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1642 + -mem[64] + 100
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1618 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1618] = 26
                    mem[_1618 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1672 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1672 + 68] = mem[idx + _1618 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1672 + 68] = mem[_1672 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1672 + -mem[64] + 100
                if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1368 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1368] = 30
                mem[_1368 + 32] = 'SafeMath: subtraction overflow'
                if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _1368 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                    _1617 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1617] = 26
                    mem[_1617 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1669 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1669 + 68] = mem[idx + _1617 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1669 + 68] = mem[_1669 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1669 + -mem[64] + 100
                if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1641 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1641] = 26
                mem[_1641 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _1697 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _1697 + 68] = mem[idx + _1641 + 32]
                    idx = idx + 32
                    continue 
                mem[_1697 + 68] = mem[_1697 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1697 + -mem[64] + 100
            if (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9) != poolInfo[idx].field_256:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1298 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1298] = 26
            mem[_1298 + 32] = 'SafeMath: division by zero'
            if not totalAllocPoint:
                _1306 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _1306 + 68] = mem[idx + _1298 + 32]
                    idx = idx + 32
                    continue 
                mem[_1306 + 68] = mem[_1306 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1306 + -mem[64] + 100
            if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                _1337 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1337] = 26
                mem[_1337 + 32] = 'SafeMath: division by zero'
                _1357 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1357] = 30
                mem[_1357 + 32] = 'SafeMath: subtraction overflow'
                if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _1357 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                    _1596 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1596] = 26
                    mem[_1596 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1638 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1638 + 68] = mem[idx + _1596 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1638 + 68] = mem[_1638 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1638 + -mem[64] + 100
                if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1616 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1616] = 26
                mem[_1616 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _1666 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _1666 + 68] = mem[idx + _1616 + 32]
                    idx = idx + 32
                    continue 
                mem[_1666 + 68] = mem[_1666 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1666 + -mem[64] + 100
            if 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint != 1000:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1339 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1339] = 26
            mem[_1339 + 32] = 'SafeMath: division by zero'
            if not 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650:
                _1367 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1367] = 30
                mem[_1367 + 32] = 'SafeMath: subtraction overflow'
                if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _1367 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = sub_39e1be0eAddress
                mem[mem[64] + 36] = (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_717559c3Address)
                call sub_717559c3Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                    _1615 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1615] = 26
                    mem[_1615 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _1663 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _1663 + 68] = mem[idx + _1615 + 32]
                        idx = idx + 32
                        continue 
                    mem[_1663 + 68] = mem[_1663 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1663 + -mem[64] + 100
                if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1637 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1637] = 26
                mem[_1637 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _1693 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _1693 + 68] = mem[idx + _1637 + 32]
                    idx = idx + 32
                    continue 
                mem[_1693 + 68] = mem[_1693 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1693 + -mem[64] + 100
            if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650 / 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650 != 2:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1384 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1384] = 30
            mem[_1384 + 32] = 'SafeMath: subtraction overflow'
            if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint:
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                idx = 32
                while idx < 30:
                    mem[idx + mem[64] + 68] = mem[idx + _1384 + 32]
                    idx = idx + 32
                    continue 
                revert with 0, 'SafeMath: subtraction overflow'
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[mem[64]] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = sub_39e1be0eAddress
            mem[mem[64] + 36] = ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650)
            require ext_code.size(sub_717559c3Address)
            call sub_717559c3Address.0x40c10f19 with:
                 gas gas_remaining wei
                args sub_39e1be0eAddress, ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if not ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650):
                _1636 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1636] = 26
                mem[_1636 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _1690 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _1690 + 68] = mem[idx + _1636 + 32]
                    idx = idx + 32
                    continue 
                mem[_1690 + 68] = mem[_1690 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1690 + -mem[64] + 100
            if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650) / ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650) != 10^12:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1662 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1662] = 26
            mem[_1662 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0]:
                if ((10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[idx].field_256) / totalAllocPoint / 10650) / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _1720 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _1720 + 68] = mem[idx + _1662 + 32]
                idx = idx + 32
                continue 
            mem[_1720 + 68] = mem[_1720 + 74 len 26]
            revert with memory
              from mem[64]
               len _1720 + -mem[64] + 100
        if arg1 + totalAllocPoint < totalAllocPoint:
            revert with 0, 'SafeMath: addition overflow'
        totalAllocPoint += arg1
        poolInfo.length++
        stor175B[stor11.length] = arg2
        stor175B[stor11.length] = arg1
        if block.number > startBlock:
            stor175B[stor11.length] = block.number
            stor175B[stor11.length] = 0
            idx = 1
            s = 0
            while idx < poolInfo.length:
                mem[0] = 11
                _1875 = sha3(11)
                if poolInfo[idx].field_256 + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                s = poolInfo[idx].field_256 + s
                continue 
            if -stor[(4 * stor11.length) + _1875 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1875 + 1]):
                require 0 < poolInfo.length
                if uint256(poolInfo.field_256) > totalAllocPoint:
                    revert with 0, 'SafeMath: subtraction overflow'
                if -stor[(4 * stor11.length) + _1875 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1875 + 1]) / 3 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                totalAllocPoint = (-stor[(4 * stor11.length) + _1875 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1875 + 1]) / 3) + totalAllocPoint - uint256(poolInfo.field_256)
                require 0 < poolInfo.length
                uint256(poolInfo.field_256) = -stor[(4 * stor11.length) + _1875 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1875 + 1]) / 3
        else:
            stor175B[stor11.length] = startBlock
            stor175B[stor11.length] = 0
            idx = 1
            s = 0
            while idx < poolInfo.length:
                mem[0] = 11
                _1876 = sha3(11)
                if poolInfo[idx].field_256 + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                s = poolInfo[idx].field_256 + s
                continue 
            if -stor[(4 * stor11.length) + _1876 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1876 + 1]):
                require 0 < poolInfo.length
                if uint256(poolInfo.field_256) > totalAllocPoint:
                    revert with 0, 'SafeMath: subtraction overflow'
                if -stor[(4 * stor11.length) + _1876 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1876 + 1]) / 3 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                totalAllocPoint = (-stor[(4 * stor11.length) + _1876 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1876 + 1]) / 3) + totalAllocPoint - uint256(poolInfo.field_256)
                require 0 < poolInfo.length
                uint256(poolInfo.field_256) = -stor[(4 * stor11.length) + _1876 + 1] + (poolInfo.length * stor[(4 * stor11.length) + _1876 + 1]) / 3
}

function withdraw(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if stor1 == 2:
        revert with 0, 32, 31, 0xfe5265656e7472616e637947756172643a207265656e7472616e742063616c6c
    stor1 = 2
    if arg1 >= poolInfo.length:
        revert with 0, 'pool does not exist'
    if not arg1:
        revert with 0, 'withdraw MAKI by unstaking'
    require arg1 < poolInfo.length
    if arg2 > userInfo[arg1][msg.sender].field_0:
        revert with 0, 'withdraw: not good'
    if arg1 >= poolInfo.length:
        revert with 0, 'pool does not exist'
    if block.number <= poolInfo[arg1].field_512:
        if not userInfo[arg1][msg.sender].field_0:
            if userInfo[arg1][msg.sender].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if not -userInfo[arg1][msg.sender].field_256:
                if not arg2:
                    if not userInfo[arg1][msg.sender].field_0:
                        userInfo[arg1][msg.sender].field_256 = 0
                    else:
                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                else:
                    if arg2 > userInfo[arg1][msg.sender].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    userInfo[arg1][msg.sender].field_0 -= arg2
                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                        revert with 0, 'Address: call to non-contract'
                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                        revert with 0, 'Address: call to non-contract'
                    mem[452 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                    mem[516 len 0] = 0
                    call address(poolInfo[arg1].field_0) with:
                       funct uint32(msg.sender)
                         gas gas_remaining wei
                        args Mask(224, 32, arg2) << 224, mem[516 len 4]
                    if not return_data.size:
                        require not ext_call.success
                        revert with 'SafeMath: division by zero'
                    mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeHRC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        if not mem[484]:
                            revert with 0, 
                                        32,
                                        42,
                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                        mem[ceil32(return_data.size) + 563 len 22]
                    if not userInfo[arg1][msg.sender].field_0:
                        userInfo[arg1][msg.sender].field_256 = 0
                    else:
                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                            revert with 0, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[ceil32(return_data.size) + 554 len 31]
                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
            else:
                require ext_code.size(sub_39e1be0eAddress)
                call sub_39e1be0eAddress.0xbefa3605 with:
                     gas gas_remaining wei
                    args msg.sender, -userInfo[arg1][msg.sender].field_256
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if not arg2:
                    if not userInfo[arg1][msg.sender].field_0:
                        userInfo[arg1][msg.sender].field_256 = 0
                    else:
                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                else:
                    if arg2 > userInfo[arg1][msg.sender].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    userInfo[arg1][msg.sender].field_0 -= arg2
                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                        revert with 0, 'Address: call to non-contract'
                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                        revert with 0, 'Address: call to non-contract'
                    mem[452 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                    call address(poolInfo[arg1].field_0) with:
                       funct uint32(msg.sender)
                         gas gas_remaining wei
                        args Mask(224, 32, arg2) << 224, mem[516 len 4]
                    if not return_data.size:
                        require not ext_call.success
                        revert with 'SafeMath: division by zero'
                    mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeHRC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        if not mem[484]:
                            revert with 0, 
                                        32,
                                        42,
                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                        mem[ceil32(return_data.size) + 563 len 22]
                    if not userInfo[arg1][msg.sender].field_0:
                        userInfo[arg1][msg.sender].field_256 = 0
                    else:
                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                            revert with 0, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[ceil32(return_data.size) + 554 len 31]
                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
        else:
            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                require ext_code.size(sub_39e1be0eAddress)
                call sub_39e1be0eAddress.0xbefa3605 with:
                     gas gas_remaining wei
                    args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
            if not arg2:
                if not userInfo[arg1][msg.sender].field_0:
                    userInfo[arg1][msg.sender].field_256 = 0
                else:
                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
            else:
                if arg2 > userInfo[arg1][msg.sender].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                userInfo[arg1][msg.sender].field_0 -= arg2
                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                    revert with 0, 'Address: call to non-contract'
                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                    revert with 0, 'Address: call to non-contract'
                mem[452 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                call address(poolInfo[arg1].field_0) with:
                   funct uint32(msg.sender)
                     gas gas_remaining wei
                    args Mask(224, 32, arg2) << 224, mem[516 len 4]
                if not return_data.size:
                    require not ext_call.success
                    revert with 'SafeMath: division by zero'
                mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeHRC20: low-level call failed'
                if return_data.size:
                    require return_data.size >= 32
                    if not mem[484]:
                        revert with 0, 
                                    32,
                                    42,
                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[ceil32(return_data.size) + 563 len 22]
                if not userInfo[arg1][msg.sender].field_0:
                    userInfo[arg1][msg.sender].field_256 = 0
                else:
                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[ceil32(return_data.size) + 554 len 31]
                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
    else:
        require ext_code.size(address(poolInfo[arg1].field_0))
        staticcall address(poolInfo[arg1].field_0).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            poolInfo[arg1].field_512 = block.number
            if userInfo[arg1][msg.sender].field_0:
                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                    require ext_code.size(sub_39e1be0eAddress)
                    call sub_39e1be0eAddress.0xbefa3605 with:
                         gas gas_remaining wei
                        args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                if not arg2:
                    if not userInfo[arg1][msg.sender].field_0:
                        userInfo[arg1][msg.sender].field_256 = 0
                    else:
                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                else:
                    if arg2 > userInfo[arg1][msg.sender].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    userInfo[arg1][msg.sender].field_0 -= arg2
                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                        revert with 0, 'Address: call to non-contract'
                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                        revert with 0, 'Address: call to non-contract'
                    mem[452 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                    call address(poolInfo[arg1].field_0) with:
                       funct uint32(msg.sender)
                         gas gas_remaining wei
                        args Mask(224, 32, arg2) << 224, mem[516 len 4]
                    if not return_data.size:
                        require not ext_call.success
                        revert with 'SafeMath: division by zero'
                    mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeHRC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        if not mem[484]:
                            revert with 0, 
                                        32,
                                        42,
                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                        mem[ceil32(return_data.size) + 563 len 22]
                    if not userInfo[arg1][msg.sender].field_0:
                        userInfo[arg1][msg.sender].field_256 = 0
                    else:
                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                            revert with 0, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[ceil32(return_data.size) + 554 len 31]
                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
            else:
                if userInfo[arg1][msg.sender].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not -userInfo[arg1][msg.sender].field_256:
                    if not arg2:
                        if not userInfo[arg1][msg.sender].field_0:
                            userInfo[arg1][msg.sender].field_256 = 0
                        else:
                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                    else:
                        if arg2 > userInfo[arg1][msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        userInfo[arg1][msg.sender].field_0 -= arg2
                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                            revert with 0, 'Address: call to non-contract'
                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                        call address(poolInfo[arg1].field_0) with:
                           funct uint32(msg.sender)
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 224, mem[516 len 4]
                        if not return_data.size:
                            require not ext_call.success
                            revert with 'SafeMath: division by zero'
                        mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            if return_data.size:
                                revert with ext_call.return_data[0 len return_data.size]
                            revert with 0, 'SafeHRC20: low-level call failed'
                        if return_data.size:
                            require return_data.size >= 32
                            if not mem[484]:
                                revert with 0, 
                                            32,
                                            42,
                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                            mem[ceil32(return_data.size) + 563 len 22]
                        if not userInfo[arg1][msg.sender].field_0:
                            userInfo[arg1][msg.sender].field_256 = 0
                        else:
                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                revert with 0, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[ceil32(return_data.size) + 554 len 31]
                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                else:
                    require ext_code.size(sub_39e1be0eAddress)
                    call sub_39e1be0eAddress.0xbefa3605 with:
                         gas gas_remaining wei
                        args msg.sender, -userInfo[arg1][msg.sender].field_256
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not arg2:
                        if not userInfo[arg1][msg.sender].field_0:
                            userInfo[arg1][msg.sender].field_256 = 0
                        else:
                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                    else:
                        if arg2 > userInfo[arg1][msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        userInfo[arg1][msg.sender].field_0 -= arg2
                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                            revert with 0, 'Address: call to non-contract'
                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                            revert with 0, 'Address: call to non-contract'
                        mem[452 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                        mem[516 len 0] = 0
                        call address(poolInfo[arg1].field_0) with:
                           funct uint32(msg.sender)
                             gas gas_remaining wei
                            args Mask(224, 32, arg2) << 224, mem[516 len 4]
                        if not return_data.size:
                            require not ext_call.success
                            revert with 'SafeMath: division by zero'
                        mem[484 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            if return_data.size:
                                revert with ext_call.return_data[0 len return_data.size]
                            revert with 0, 'SafeHRC20: low-level call failed'
                        if return_data.size:
                            require return_data.size >= 32
                            if not mem[484]:
                                revert with 0, 
                                            32,
                                            42,
                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                            mem[ceil32(return_data.size) + 563 len 22]
                        if not userInfo[arg1][msg.sender].field_0:
                            userInfo[arg1][msg.sender].field_256 = 0
                        else:
                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                revert with 0, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[ceil32(return_data.size) + 554 len 31]
                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
        else:
            if poolInfo[arg1].field_512 > block.number:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.number - poolInfo[arg1].field_512:
                if not totalAllocPoint:
                    revert with 0, 'SafeMath: division by zero'
                if not 0 / totalAllocPoint:
                    if 0 > 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[arg1].field_512 = block.number
                        if not userInfo[arg1][msg.sender].field_0:
                            if userInfo[arg1][msg.sender].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if -userInfo[arg1][msg.sender].field_256:
                                require ext_code.size(sub_39e1be0eAddress)
                                call sub_39e1be0eAddress.0xbefa3605 with:
                                     gas gas_remaining wei
                                    args msg.sender, -userInfo[arg1][msg.sender].field_256
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            if not arg2:
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if arg2 > userInfo[arg1][msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                userInfo[arg1][msg.sender].field_0 -= arg2
                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                call address(poolInfo[arg1].field_0) with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeHRC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    if not mem[804]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 883 len 22]
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 874 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if arg2 > userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    userInfo[arg1][msg.sender].field_0 -= arg2
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                    mem[836 len 0] = 0
                                    call address(poolInfo[arg1].field_0) with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[804]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 883 len 22]
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 874 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                require ext_code.size(sub_39e1be0eAddress)
                                call sub_39e1be0eAddress.0xbefa3605 with:
                                     gas gas_remaining wei
                                    args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if arg2 > userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    userInfo[arg1][msg.sender].field_0 -= arg2
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                    call address(poolInfo[arg1].field_0) with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[804]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 883 len 22]
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 874 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                    else:
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[arg1].field_512 = block.number
                        if not userInfo[arg1][msg.sender].field_0:
                            if userInfo[arg1][msg.sender].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if -userInfo[arg1][msg.sender].field_256:
                                require ext_code.size(sub_39e1be0eAddress)
                                call sub_39e1be0eAddress.0xbefa3605 with:
                                     gas gas_remaining wei
                                    args msg.sender, -userInfo[arg1][msg.sender].field_256
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            if not arg2:
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if arg2 > userInfo[arg1][msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                userInfo[arg1][msg.sender].field_0 -= arg2
                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                call address(poolInfo[arg1].field_0) with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeHRC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    if not mem[804]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 883 len 22]
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 874 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                require ext_code.size(sub_39e1be0eAddress)
                                call sub_39e1be0eAddress.0xbefa3605 with:
                                     gas gas_remaining wei
                                    args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                            if not arg2:
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if arg2 > userInfo[arg1][msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                userInfo[arg1][msg.sender].field_0 -= arg2
                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                mem[836 len 0] = 0
                                call address(poolInfo[arg1].field_0) with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeHRC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    if not mem[804]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 883 len 22]
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 874 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                else:
                    if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    if 1000 * 0 / totalAllocPoint / 10650:
                        if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if not userInfo[arg1][msg.sender].field_0:
                                if userInfo[arg1][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[arg1][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, -userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if arg2 > userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    userInfo[arg1][msg.sender].field_0 -= arg2
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                    call address(poolInfo[arg1].field_0) with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[804]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 883 len 22]
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 874 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        mem[836 len 0] = 0
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if not userInfo[arg1][msg.sender].field_0:
                                if userInfo[arg1][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[arg1][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, -userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            if not arg2:
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if arg2 > userInfo[arg1][msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                userInfo[arg1][msg.sender].field_0 -= arg2
                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                call address(poolInfo[arg1].field_0) with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeHRC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    if not mem[804]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 883 len 22]
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 874 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                    else:
                        if 0 > 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args sub_39e1be0eAddress, 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if not userInfo[arg1][msg.sender].field_0:
                                if userInfo[arg1][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[arg1][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, -userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if arg2 > userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    userInfo[arg1][msg.sender].field_0 -= arg2
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                    call address(poolInfo[arg1].field_0) with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[804]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 883 len 22]
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 874 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        mem[836 len 0] = 0
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if not userInfo[arg1][msg.sender].field_0:
                                if userInfo[arg1][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[arg1][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, -userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if arg2 > userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    userInfo[arg1][msg.sender].field_0 -= arg2
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                    call address(poolInfo[arg1].field_0) with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[804]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 883 len 22]
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 874 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        mem[836 len 0] = 0
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
            else:
                if (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / block.number - poolInfo[arg1].field_512 != bonusMultiplier:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if not (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                    if not totalAllocPoint:
                        revert with 0, 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint:
                        if 0 > 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args teamAddress, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args treasuryAddress, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args sub_39e1be0eAddress, 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if not userInfo[arg1][msg.sender].field_0:
                                if userInfo[arg1][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[arg1][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, -userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            if not arg2:
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if arg2 > userInfo[arg1][msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                userInfo[arg1][msg.sender].field_0 -= arg2
                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                call address(poolInfo[arg1].field_0) with:
                                   funct uint32(msg.sender)
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeHRC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    if not mem[804]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 883 len 22]
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 874 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if userInfo[arg1][msg.sender].field_0:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if arg2 > userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    userInfo[arg1][msg.sender].field_0 -= arg2
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                    call address(poolInfo[arg1].field_0) with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[804]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 883 len 22]
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 874 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if userInfo[arg1][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not -userInfo[arg1][msg.sender].field_256:
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, -userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        mem[836 len 0] = 0
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                    else:
                        if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        if not 1000 * 0 / totalAllocPoint / 10650:
                            if 0 > 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if not userInfo[arg1][msg.sender].field_0:
                                    if userInfo[arg1][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if arg2 > userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    userInfo[arg1][msg.sender].field_0 -= arg2
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                    call address(poolInfo[arg1].field_0) with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[804]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 883 len 22]
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 874 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if userInfo[arg1][msg.sender].field_0:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if userInfo[arg1][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not -userInfo[arg1][msg.sender].field_256:
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if arg2 > userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            userInfo[arg1][msg.sender].field_0 -= arg2
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                            call address(poolInfo[arg1].field_0) with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[804]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 883 len 22]
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 874 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if arg2 > userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            userInfo[arg1][msg.sender].field_0 -= arg2
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                            mem[836 len 0] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[804]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 883 len 22]
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 874 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                            if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if not userInfo[arg1][msg.sender].field_0:
                                if userInfo[arg1][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not -userInfo[arg1][msg.sender].field_256:
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        mem[836 len 0] = 0
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, -userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if arg2 > userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    userInfo[arg1][msg.sender].field_0 -= arg2
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                    call address(poolInfo[arg1].field_0) with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[804]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 883 len 22]
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 874 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                else:
                    if (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9) / (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != sub_e5f6e9c9:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if not (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9):
                        if not totalAllocPoint:
                            revert with 0, 'SafeMath: division by zero'
                        if not 0 / totalAllocPoint:
                            if 0 > 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if 0 / totalAllocPoint:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if not userInfo[arg1][msg.sender].field_0:
                                    if userInfo[arg1][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if arg2 > userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    userInfo[arg1][msg.sender].field_0 -= arg2
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                    call address(poolInfo[arg1].field_0) with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[804]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 883 len 22]
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 874 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if not userInfo[arg1][msg.sender].field_0:
                                    if userInfo[arg1][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if arg2 > userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            userInfo[arg1][msg.sender].field_0 -= arg2
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                            call address(poolInfo[arg1].field_0) with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[804]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 883 len 22]
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 874 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if arg2 > userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            userInfo[arg1][msg.sender].field_0 -= arg2
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                            mem[836 len 0] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[804]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 883 len 22]
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 874 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            if not 1000 * 0 / totalAllocPoint / 10650:
                                if 0 > 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if not userInfo[arg1][msg.sender].field_0:
                                    if userInfo[arg1][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if arg2 > userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    userInfo[arg1][msg.sender].field_0 -= arg2
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                    call address(poolInfo[arg1].field_0) with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[804]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 883 len 22]
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 874 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if userInfo[arg1][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if userInfo[arg1][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if arg2 > userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            userInfo[arg1][msg.sender].field_0 -= arg2
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                            call address(poolInfo[arg1].field_0) with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[804]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 883 len 22]
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 874 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if arg2 > userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                userInfo[arg1][msg.sender].field_0 -= arg2
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                                mem[836 len 0] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[804]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 883 len 22]
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 874 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if arg2 > userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                userInfo[arg1][msg.sender].field_0 -= arg2
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                                call address(poolInfo[arg1].field_0) with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[804]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 883 len 22]
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 874 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                    else:
                        if (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9) != poolInfo[arg1].field_256:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        if not totalAllocPoint:
                            revert with 0, 'SafeMath: division by zero'
                        if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                            if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if userInfo[arg1][msg.sender].field_0:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if userInfo[arg1][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not -userInfo[arg1][msg.sender].field_256:
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if arg2 > userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            userInfo[arg1][msg.sender].field_0 -= arg2
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                            call address(poolInfo[arg1].field_0) with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[804]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 883 len 22]
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 874 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if arg2 > userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            userInfo[arg1][msg.sender].field_0 -= arg2
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                            mem[836 len 0] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[804]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 883 len 22]
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 874 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if not userInfo[arg1][msg.sender].field_0:
                                    if userInfo[arg1][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if arg2 > userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    userInfo[arg1][msg.sender].field_0 -= arg2
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                    call address(poolInfo[arg1].field_0) with:
                                       funct uint32(msg.sender)
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[804]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 883 len 22]
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 874 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint != 1000:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            if not 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650:
                                if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if userInfo[arg1][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if arg2 > userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        userInfo[arg1][msg.sender].field_0 -= arg2
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                        call address(poolInfo[arg1].field_0) with:
                                           funct uint32(msg.sender)
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[804]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 883 len 22]
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 874 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][msg.sender].field_0:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if arg2 > userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            userInfo[arg1][msg.sender].field_0 -= arg2
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                            call address(poolInfo[arg1].field_0) with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[804]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 883 len 22]
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 874 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if userInfo[arg1][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not -userInfo[arg1][msg.sender].field_256:
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if arg2 > userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                userInfo[arg1][msg.sender].field_0 -= arg2
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                                call address(poolInfo[arg1].field_0) with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[804]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 883 len 22]
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 874 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if arg2 > userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                userInfo[arg1][msg.sender].field_0 -= arg2
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                                mem[836 len 0] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[804]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 883 len 22]
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 874 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650 / 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650 != 2:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650):
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][msg.sender].field_0:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if arg2 > userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            userInfo[arg1][msg.sender].field_0 -= arg2
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                            call address(poolInfo[arg1].field_0) with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[804]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 883 len 22]
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 874 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if userInfo[arg1][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not -userInfo[arg1][msg.sender].field_256:
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if arg2 > userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                userInfo[arg1][msg.sender].field_0 -= arg2
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                                call address(poolInfo[arg1].field_0) with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[804]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 883 len 22]
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 874 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if arg2 > userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                userInfo[arg1][msg.sender].field_0 -= arg2
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                                mem[836 len 0] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[804]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 883 len 22]
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 874 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650) / ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650) != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if ((10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650) / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if userInfo[arg1][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if arg2 > userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            userInfo[arg1][msg.sender].field_0 -= arg2
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                            call address(poolInfo[arg1].field_0) with:
                                               funct uint32(msg.sender)
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[804]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 883 len 22]
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 874 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if arg2 > userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                userInfo[arg1][msg.sender].field_0 -= arg2
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                                mem[836 len 0] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[804]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 883 len 22]
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 874 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if arg2 > userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                userInfo[arg1][msg.sender].field_0 -= arg2
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[772 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                                                call address(poolInfo[arg1].field_0) with:
                                                   funct uint32(msg.sender)
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 224, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[804]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 883 len 22]
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 874 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
    emit Withdraw(arg2, msg.sender, arg1);
    stor1 = 1
}

function deposit(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if stor1 == 2:
        revert with 0, 32, 31, 0xfe5265656e7472616e637947756172643a207265656e7472616e742063616c6c
    stor1 = 2
    if arg1 >= poolInfo.length:
        revert with 0, 'pool does not exist'
    if not arg1:
        revert with 0, 'deposit MAKI by staking'
    require arg1 < poolInfo.length
    if block.number <= poolInfo[arg1].field_512:
        if not userInfo[arg1][msg.sender].field_0:
            if not arg2:
                if not userInfo[arg1][msg.sender].field_0:
                    userInfo[arg1][msg.sender].field_256 = 0
                else:
                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
            else:
                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                    revert with 0, 'Address: call to non-contract'
                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                    revert with 0, 'Address: call to non-contract'
                mem[292 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                mem[416 len 4] = 0
                call address(poolInfo[arg1].field_0) with:
                     gas gas_remaining wei
                    args Mask(224, 32, arg2) << 480, mem[388 len 4]
                if not return_data.size:
                    if not ext_call.success:
                        revert with unknown_0x23b872dd(?????), msg.sender, address(this.address), arg2
                    if not unknown_0x23b872dd(?????), Mask(224, 32, msg.sender) >> 32:
                        revert with 0, 
                                    32,
                                    42,
                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[402 len 14],
                                    0,
                                    mem[420 len 4]
                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                        revert with 0, 'SafeMath: addition overflow'
                    userInfo[arg1][msg.sender].field_0 += arg2
                    if not userInfo[arg1][msg.sender].field_0:
                        userInfo[arg1][msg.sender].field_256 = 0
                    else:
                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[393 len 23], 0, mem[420 len 4]
                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                else:
                    mem[324 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeHRC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        if not mem[324]:
                            revert with 0, 
                                        32,
                                        42,
                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                        mem[ceil32(return_data.size) + 403 len 22]
                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                        revert with 0, 'SafeMath: addition overflow'
                    userInfo[arg1][msg.sender].field_0 += arg2
                    if not userInfo[arg1][msg.sender].field_0:
                        userInfo[arg1][msg.sender].field_256 = 0
                    else:
                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                            revert with 0, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[ceil32(return_data.size) + 394 len 31]
                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
        else:
            if not userInfo[arg1][msg.sender].field_0:
                if userInfo[arg1][msg.sender].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                if -userInfo[arg1][msg.sender].field_256:
                    require ext_code.size(sub_39e1be0eAddress)
                    call sub_39e1be0eAddress.0xbefa3605 with:
                         gas gas_remaining wei
                        args msg.sender, -userInfo[arg1][msg.sender].field_256
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
            else:
                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                    require ext_code.size(sub_39e1be0eAddress)
                    call sub_39e1be0eAddress.0xbefa3605 with:
                         gas gas_remaining wei
                        args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
            if not arg2:
                if not userInfo[arg1][msg.sender].field_0:
                    userInfo[arg1][msg.sender].field_256 = 0
                else:
                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
            else:
                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                    revert with 0, 'Address: call to non-contract'
                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                    revert with 0, 'Address: call to non-contract'
                mem[420 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                mem[544 len 4] = 0
                call address(poolInfo[arg1].field_0) with:
                     gas gas_remaining wei
                    args Mask(224, 32, arg2) << 480, mem[516 len 4]
                if not return_data.size:
                    require not ext_call.success
                    revert with 'SafeMath: division by zero'
                mem[452 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeHRC20: low-level call failed'
                if return_data.size:
                    require return_data.size >= 32
                    if not mem[452]:
                        revert with 0, 
                                    32,
                                    42,
                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[ceil32(return_data.size) + 531 len 22]
                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                    revert with 0, 'SafeMath: addition overflow'
                userInfo[arg1][msg.sender].field_0 += arg2
                if not userInfo[arg1][msg.sender].field_0:
                    userInfo[arg1][msg.sender].field_256 = 0
                else:
                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[ceil32(return_data.size) + 522 len 31]
                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
    else:
        require ext_code.size(address(poolInfo[arg1].field_0))
        staticcall address(poolInfo[arg1].field_0).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            poolInfo[arg1].field_512 = block.number
            if not userInfo[arg1][msg.sender].field_0:
                if not arg2:
                    if not userInfo[arg1][msg.sender].field_0:
                        userInfo[arg1][msg.sender].field_256 = 0
                    else:
                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                else:
                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                        revert with 0, 'Address: call to non-contract'
                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                        revert with 0, 'Address: call to non-contract'
                    mem[292 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                    mem[416 len 4] = 0
                    call address(poolInfo[arg1].field_0) with:
                         gas gas_remaining wei
                        args Mask(224, 32, arg2) << 480, mem[388 len 4]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with unknown_0x23b872dd(?????), msg.sender, address(this.address), arg2
                        if not unknown_0x23b872dd(?????), Mask(224, 32, msg.sender) >> 32:
                            revert with 0, 
                                        32,
                                        42,
                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                        mem[402 len 14],
                                        0,
                                        mem[420 len 4]
                        if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        userInfo[arg1][msg.sender].field_0 += arg2
                        if not userInfo[arg1][msg.sender].field_0:
                            userInfo[arg1][msg.sender].field_256 = 0
                        else:
                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[393 len 23], 0, mem[420 len 4]
                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                    else:
                        mem[324 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            if return_data.size:
                                revert with ext_call.return_data[0 len return_data.size]
                            revert with 0, 'SafeHRC20: low-level call failed'
                        if return_data.size:
                            require return_data.size >= 32
                            if not mem[324]:
                                revert with 0, 
                                            32,
                                            42,
                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                            mem[ceil32(return_data.size) + 403 len 22]
                        if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        userInfo[arg1][msg.sender].field_0 += arg2
                        if not userInfo[arg1][msg.sender].field_0:
                            userInfo[arg1][msg.sender].field_256 = 0
                        else:
                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                revert with 0, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[ceil32(return_data.size) + 394 len 31]
                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
            else:
                if userInfo[arg1][msg.sender].field_0:
                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                        if not arg2:
                            if not userInfo[arg1][msg.sender].field_0:
                                userInfo[arg1][msg.sender].field_256 = 0
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                revert with 0, 'Address: call to non-contract'
                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                revert with 0, 'Address: call to non-contract'
                            mem[420 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                            mem[544 len 4] = 0
                            mem[516 len 0] = 0
                            call address(poolInfo[arg1].field_0) with:
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[516 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 'SafeMath: division by zero'
                            mem[452 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 'SafeHRC20: low-level call failed'
                            if return_data.size:
                                require return_data.size >= 32
                                if not mem[452]:
                                    revert with 0, 
                                                32,
                                                42,
                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                mem[ceil32(return_data.size) + 531 len 22]
                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            userInfo[arg1][msg.sender].field_0 += arg2
                            if not userInfo[arg1][msg.sender].field_0:
                                userInfo[arg1][msg.sender].field_256 = 0
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[ceil32(return_data.size) + 522 len 31]
                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                    else:
                        require ext_code.size(sub_39e1be0eAddress)
                        call sub_39e1be0eAddress.0xbefa3605 with:
                             gas gas_remaining wei
                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not arg2:
                            if not userInfo[arg1][msg.sender].field_0:
                                userInfo[arg1][msg.sender].field_256 = 0
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                revert with 0, 'Address: call to non-contract'
                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                revert with 0, 'Address: call to non-contract'
                            mem[420 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                            mem[544 len 4] = 0
                            call address(poolInfo[arg1].field_0) with:
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[516 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 'SafeMath: division by zero'
                            mem[452 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 'SafeHRC20: low-level call failed'
                            if return_data.size:
                                require return_data.size >= 32
                                if not mem[452]:
                                    revert with 0, 
                                                32,
                                                42,
                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                mem[ceil32(return_data.size) + 531 len 22]
                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            userInfo[arg1][msg.sender].field_0 += arg2
                            if not userInfo[arg1][msg.sender].field_0:
                                userInfo[arg1][msg.sender].field_256 = 0
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[ceil32(return_data.size) + 522 len 31]
                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                else:
                    if userInfo[arg1][msg.sender].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not -userInfo[arg1][msg.sender].field_256:
                        if not arg2:
                            if not userInfo[arg1][msg.sender].field_0:
                                userInfo[arg1][msg.sender].field_256 = 0
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                revert with 0, 'Address: call to non-contract'
                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                revert with 0, 'Address: call to non-contract'
                            mem[420 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                            mem[544 len 4] = 0
                            call address(poolInfo[arg1].field_0) with:
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[516 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 'SafeMath: division by zero'
                            mem[452 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 'SafeHRC20: low-level call failed'
                            if return_data.size:
                                require return_data.size >= 32
                                if not mem[452]:
                                    revert with 0, 
                                                32,
                                                42,
                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                mem[ceil32(return_data.size) + 531 len 22]
                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            userInfo[arg1][msg.sender].field_0 += arg2
                            if not userInfo[arg1][msg.sender].field_0:
                                userInfo[arg1][msg.sender].field_256 = 0
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[ceil32(return_data.size) + 522 len 31]
                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                    else:
                        require ext_code.size(sub_39e1be0eAddress)
                        call sub_39e1be0eAddress.0xbefa3605 with:
                             gas gas_remaining wei
                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not arg2:
                            if not userInfo[arg1][msg.sender].field_0:
                                userInfo[arg1][msg.sender].field_256 = 0
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                revert with 0, 'Address: call to non-contract'
                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                revert with 0, 'Address: call to non-contract'
                            mem[420 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                            mem[544 len 4] = 0
                            mem[516 len 0] = 0
                            call address(poolInfo[arg1].field_0) with:
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[516 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 'SafeMath: division by zero'
                            mem[452 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 'SafeHRC20: low-level call failed'
                            if return_data.size:
                                require return_data.size >= 32
                                if not mem[452]:
                                    revert with 0, 
                                                32,
                                                42,
                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                mem[ceil32(return_data.size) + 531 len 22]
                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            userInfo[arg1][msg.sender].field_0 += arg2
                            if not userInfo[arg1][msg.sender].field_0:
                                userInfo[arg1][msg.sender].field_256 = 0
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[ceil32(return_data.size) + 522 len 31]
                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
        else:
            if poolInfo[arg1].field_512 > block.number:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.number - poolInfo[arg1].field_512:
                if not totalAllocPoint:
                    revert with 0, 'SafeMath: division by zero'
                if not 0 / totalAllocPoint:
                    if 0 > 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if 0 / totalAllocPoint:
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[arg1].field_512 = block.number
                        if not userInfo[arg1][msg.sender].field_0:
                            if not arg2:
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                mem[736 len 4] = 0
                                call address(poolInfo[arg1].field_0) with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeHRC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    if not mem[644]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 723 len 22]
                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[arg1][msg.sender].field_0 += arg2
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 714 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if not userInfo[arg1][msg.sender].field_0:
                                if userInfo[arg1][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[arg1][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, -userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            if not arg2:
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                mem[864 len 4] = 0
                                call address(poolInfo[arg1].field_0) with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeHRC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    if not mem[772]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 851 len 22]
                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[arg1][msg.sender].field_0 += arg2
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 842 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                    else:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[arg1].field_512 = block.number
                        if not userInfo[arg1][msg.sender].field_0:
                            if not arg2:
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                mem[736 len 4] = 0
                                mem[708 len 0] = 0
                                call address(poolInfo[arg1].field_0) with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeHRC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    if not mem[644]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 723 len 22]
                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[arg1][msg.sender].field_0 += arg2
                                if not userInfo[arg1][msg.sender].field_0:
                                    userInfo[arg1][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 714 len 31]
                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if not userInfo[arg1][msg.sender].field_0:
                                if userInfo[arg1][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[arg1][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, -userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[864 len 4] = 0
                                    call address(poolInfo[arg1].field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][msg.sender].field_0 += arg2
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                        call address(poolInfo[arg1].field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][msg.sender].field_0 += arg2
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                        mem[836 len 0] = 0
                                        call address(poolInfo[arg1].field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][msg.sender].field_0 += arg2
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                else:
                    if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    if not 1000 * 0 / totalAllocPoint / 10650:
                        if 0 > 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args sub_39e1be0eAddress, 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    else:
                        if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                    poolInfo[arg1].field_512 = block.number
                    if not userInfo[arg1][msg.sender].field_0:
                        if not arg2:
                            if not userInfo[arg1][msg.sender].field_0:
                                userInfo[arg1][msg.sender].field_256 = 0
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                revert with 0, 'Address: call to non-contract'
                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                revert with 0, 'Address: call to non-contract'
                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                            mem[736 len 4] = 0
                            call address(poolInfo[arg1].field_0) with:
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[708 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 'SafeMath: subtraction overflow'
                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 'SafeHRC20: low-level call failed'
                            if return_data.size:
                                require return_data.size >= 32
                                if not mem[644]:
                                    revert with 0, 
                                                32,
                                                42,
                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                mem[ceil32(return_data.size) + 723 len 22]
                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            userInfo[arg1][msg.sender].field_0 += arg2
                            if not userInfo[arg1][msg.sender].field_0:
                                userInfo[arg1][msg.sender].field_256 = 0
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[ceil32(return_data.size) + 714 len 31]
                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                    else:
                        if not userInfo[arg1][msg.sender].field_0:
                            if userInfo[arg1][msg.sender].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if -userInfo[arg1][msg.sender].field_256:
                                require ext_code.size(sub_39e1be0eAddress)
                                call sub_39e1be0eAddress.0xbefa3605 with:
                                     gas gas_remaining wei
                                    args msg.sender, -userInfo[arg1][msg.sender].field_256
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                        else:
                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                require ext_code.size(sub_39e1be0eAddress)
                                call sub_39e1be0eAddress.0xbefa3605 with:
                                     gas gas_remaining wei
                                    args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                        if not arg2:
                            if not userInfo[arg1][msg.sender].field_0:
                                userInfo[arg1][msg.sender].field_256 = 0
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                revert with 0, 'Address: call to non-contract'
                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                revert with 0, 'Address: call to non-contract'
                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                            mem[864 len 4] = 0
                            call address(poolInfo[arg1].field_0) with:
                                 gas gas_remaining wei
                                args Mask(224, 32, arg2) << 480, mem[836 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 'SafeMath: subtraction overflow'
                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 'SafeHRC20: low-level call failed'
                            if return_data.size:
                                require return_data.size >= 32
                                if not mem[772]:
                                    revert with 0, 
                                                32,
                                                42,
                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                mem[ceil32(return_data.size) + 851 len 22]
                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            userInfo[arg1][msg.sender].field_0 += arg2
                            if not userInfo[arg1][msg.sender].field_0:
                                userInfo[arg1][msg.sender].field_256 = 0
                            else:
                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                    revert with 0, 
                                                32,
                                                33,
                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[ceil32(return_data.size) + 842 len 31]
                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
            else:
                if (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / block.number - poolInfo[arg1].field_512 != bonusMultiplier:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if not (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                    if not totalAllocPoint:
                        revert with 0, 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint:
                        if 0 > 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args teamAddress, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args treasuryAddress, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args sub_39e1be0eAddress, 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if not userInfo[arg1][msg.sender].field_0:
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[736 len 4] = 0
                                    call address(poolInfo[arg1].field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][msg.sender].field_0 += arg2
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if not userInfo[arg1][msg.sender].field_0:
                                    if userInfo[arg1][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[864 len 4] = 0
                                    call address(poolInfo[arg1].field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][msg.sender].field_0 += arg2
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if not userInfo[arg1][msg.sender].field_0:
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[736 len 4] = 0
                                    mem[708 len 0] = 0
                                    call address(poolInfo[arg1].field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][msg.sender].field_0 += arg2
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if not userInfo[arg1][msg.sender].field_0:
                                    if userInfo[arg1][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[864 len 4] = 0
                                    call address(poolInfo[arg1].field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][msg.sender].field_0 += arg2
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                    else:
                        if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        if not 1000 * 0 / totalAllocPoint / 10650:
                            if 0 > 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if not userInfo[arg1][msg.sender].field_0:
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[736 len 4] = 0
                                    call address(poolInfo[arg1].field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][msg.sender].field_0 += arg2
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if not userInfo[arg1][msg.sender].field_0:
                                    if userInfo[arg1][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[864 len 4] = 0
                                    call address(poolInfo[arg1].field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][msg.sender].field_0 += arg2
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                            if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                                if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if not userInfo[arg1][msg.sender].field_0:
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        call address(poolInfo[arg1].field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][msg.sender].field_0 += arg2
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if userInfo[arg1][msg.sender].field_0:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][msg.sender].field_0 += arg2
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if userInfo[arg1][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not -userInfo[arg1][msg.sender].field_256:
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[arg1][msg.sender].field_0 += arg2
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[arg1][msg.sender].field_0 += arg2
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if not userInfo[arg1][msg.sender].field_0:
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        call address(poolInfo[arg1].field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][msg.sender].field_0 += arg2
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if userInfo[arg1][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][msg.sender].field_0 += arg2
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[arg1][msg.sender].field_0 += arg2
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[arg1][msg.sender].field_0 += arg2
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                else:
                    if (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9) / (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != sub_e5f6e9c9:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if not (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9):
                        if not totalAllocPoint:
                            revert with 0, 'SafeMath: division by zero'
                        if not 0 / totalAllocPoint:
                            if 0 > 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if not userInfo[arg1][msg.sender].field_0:
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[736 len 4] = 0
                                    call address(poolInfo[arg1].field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][msg.sender].field_0 += arg2
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if not userInfo[arg1][msg.sender].field_0:
                                    if userInfo[arg1][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                if not arg2:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[864 len 4] = 0
                                    call address(poolInfo[arg1].field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][msg.sender].field_0 += arg2
                                    if not userInfo[arg1][msg.sender].field_0:
                                        userInfo[arg1][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            if not 1000 * 0 / totalAllocPoint / 10650:
                                if 0 > 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[736 len 4] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][msg.sender].field_0 += arg2
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            if userInfo[arg1][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[arg1][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[arg1][msg.sender].field_0 += arg2
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                                if not arg2:
                                                    if not userInfo[arg1][msg.sender].field_0:
                                                        userInfo[arg1][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[864 len 4] = 0
                                                    mem[836 len 0] = 0
                                                    call address(poolInfo[arg1].field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[arg1][msg.sender].field_0 += arg2
                                                    if not userInfo[arg1][msg.sender].field_0:
                                                        userInfo[arg1][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not arg2:
                                                    if not userInfo[arg1][msg.sender].field_0:
                                                        userInfo[arg1][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[864 len 4] = 0
                                                    call address(poolInfo[arg1].field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[arg1][msg.sender].field_0 += arg2
                                                    if not userInfo[arg1][msg.sender].field_0:
                                                        userInfo[arg1][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[736 len 4] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][msg.sender].field_0 += arg2
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            if userInfo[arg1][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[arg1][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][msg.sender].field_0 += arg2
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                                    if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[736 len 4] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][msg.sender].field_0 += arg2
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            if userInfo[arg1][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[arg1][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][msg.sender].field_0 += arg2
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[736 len 4] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][msg.sender].field_0 += arg2
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            if userInfo[arg1][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[arg1][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[arg1][msg.sender].field_0 += arg2
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                                if not arg2:
                                                    if not userInfo[arg1][msg.sender].field_0:
                                                        userInfo[arg1][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[864 len 4] = 0
                                                    call address(poolInfo[arg1].field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[arg1][msg.sender].field_0 += arg2
                                                    if not userInfo[arg1][msg.sender].field_0:
                                                        userInfo[arg1][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not arg2:
                                                    if not userInfo[arg1][msg.sender].field_0:
                                                        userInfo[arg1][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[864 len 4] = 0
                                                    mem[836 len 0] = 0
                                                    call address(poolInfo[arg1].field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[arg1][msg.sender].field_0 += arg2
                                                    if not userInfo[arg1][msg.sender].field_0:
                                                        userInfo[arg1][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                    else:
                        if (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / (block.number * bonusMultiplier * sub_e5f6e9c9) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9) != poolInfo[arg1].field_256:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        if not totalAllocPoint:
                            revert with 0, 'SafeMath: division by zero'
                        if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                            if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if not userInfo[arg1][msg.sender].field_0:
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        call address(poolInfo[arg1].field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][msg.sender].field_0 += arg2
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if userInfo[arg1][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                        call address(poolInfo[arg1].field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][msg.sender].field_0 += arg2
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if not userInfo[arg1][msg.sender].field_0:
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        mem[708 len 0] = 0
                                        call address(poolInfo[arg1].field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][msg.sender].field_0 += arg2
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if userInfo[arg1][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][msg.sender].field_0 += arg2
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[arg1][msg.sender].field_0 += arg2
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[arg1][msg.sender].field_0 += arg2
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                        else:
                            if 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint != 1000:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            if 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650:
                                if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650 / 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650 != 2:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650):
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[736 len 4] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][msg.sender].field_0 += arg2
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            if userInfo[arg1][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not -userInfo[arg1][msg.sender].field_256:
                                                if not arg2:
                                                    if not userInfo[arg1][msg.sender].field_0:
                                                        userInfo[arg1][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[864 len 4] = 0
                                                    mem[836 len 0] = 0
                                                    call address(poolInfo[arg1].field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[arg1][msg.sender].field_0 += arg2
                                                    if not userInfo[arg1][msg.sender].field_0:
                                                        userInfo[arg1][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not arg2:
                                                    if not userInfo[arg1][msg.sender].field_0:
                                                        userInfo[arg1][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[864 len 4] = 0
                                                    call address(poolInfo[arg1].field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[arg1][msg.sender].field_0 += arg2
                                                    if not userInfo[arg1][msg.sender].field_0:
                                                        userInfo[arg1][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[arg1][msg.sender].field_0 += arg2
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650) / ((block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650) != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if ((10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650) / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650) / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[736 len 4] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][msg.sender].field_0 += arg2
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            if userInfo[arg1][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[arg1][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][msg.sender].field_0 += arg2
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                            else:
                                if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * sub_e5f6e9c9 * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if not userInfo[arg1][msg.sender].field_0:
                                    if not arg2:
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        call address(poolInfo[arg1].field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][msg.sender].field_0 += arg2
                                        if not userInfo[arg1][msg.sender].field_0:
                                            userInfo[arg1][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                else:
                                    if not userInfo[arg1][msg.sender].field_0:
                                        if userInfo[arg1][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[arg1][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        if not arg2:
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo[arg1].field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][msg.sender].field_0 += arg2
                                            if not userInfo[arg1][msg.sender].field_0:
                                                userInfo[arg1][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                    else:
                                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[arg1][msg.sender].field_0 += arg2
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                        else:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not arg2:
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo[arg1].field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                                call address(poolInfo[arg1].field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[arg1][msg.sender].field_0 += arg2
                                                if not userInfo[arg1][msg.sender].field_0:
                                                    userInfo[arg1][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12
    emit Deposit(arg2, msg.sender, arg1);
    stor1 = 1
}

function enterStaking(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if stor1 == 2:
        revert with 0, 32, 31, 0xfe5265656e7472616e637947756172643a207265656e7472616e742063616c6c
    stor1 = 2
    require 0 < poolInfo.length
    if block.number <= uint256(poolInfo.field_512):
        if not userInfo[0][msg.sender].field_0:
            if not arg1:
                if not userInfo[0][msg.sender].field_0:
                    userInfo[0][msg.sender].field_256 = 0
                else:
                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
            else:
                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                    revert with 0, 'Address: call to non-contract'
                if not ext_code.hash(address(poolInfo.field_0)):
                    revert with 0, 'Address: call to non-contract'
                mem[292 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                mem[416 len 4] = 0
                call address(poolInfo.field_0) with:
                     gas gas_remaining wei
                    args Mask(224, 32, arg1) << 480, mem[388 len 4]
                if not return_data.size:
                    if not ext_call.success:
                        revert with unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1
                    if not unknown_0x23b872dd(?????), Mask(224, 32, msg.sender) >> 32:
                        revert with 0, 
                                    32,
                                    42,
                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[402 len 14],
                                    0,
                                    mem[420 len 4]
                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                        revert with 0, 'SafeMath: addition overflow'
                    userInfo[0][msg.sender].field_0 += arg1
                    if not userInfo[0][msg.sender].field_0:
                        userInfo[0][msg.sender].field_256 = 0
                    else:
                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[393 len 23], 0, mem[420 len 4]
                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                else:
                    mem[324 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeHRC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        if not mem[324]:
                            revert with 0, 
                                        32,
                                        42,
                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                        mem[ceil32(return_data.size) + 403 len 22]
                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                        revert with 0, 'SafeMath: addition overflow'
                    userInfo[0][msg.sender].field_0 += arg1
                    if not userInfo[0][msg.sender].field_0:
                        userInfo[0][msg.sender].field_256 = 0
                    else:
                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                            revert with 0, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[ceil32(return_data.size) + 394 len 31]
                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
        else:
            if not userInfo[0][msg.sender].field_0:
                if userInfo[0][msg.sender].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                if -userInfo[0][msg.sender].field_256:
                    require ext_code.size(sub_39e1be0eAddress)
                    call sub_39e1be0eAddress.0xbefa3605 with:
                         gas gas_remaining wei
                        args msg.sender, -userInfo[0][msg.sender].field_256
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
            else:
                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                    require ext_code.size(sub_39e1be0eAddress)
                    call sub_39e1be0eAddress.0xbefa3605 with:
                         gas gas_remaining wei
                        args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
            if not arg1:
                if not userInfo[0][msg.sender].field_0:
                    userInfo[0][msg.sender].field_256 = 0
                else:
                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
            else:
                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                    revert with 0, 'Address: call to non-contract'
                if not ext_code.hash(address(poolInfo.field_0)):
                    revert with 0, 'Address: call to non-contract'
                mem[420 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                mem[544 len 4] = 0
                call address(poolInfo.field_0) with:
                     gas gas_remaining wei
                    args Mask(224, 32, arg1) << 480, mem[516 len 4]
                if not return_data.size:
                    require not ext_call.success
                    revert with 'SafeMath: division by zero'
                mem[452 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeHRC20: low-level call failed'
                if return_data.size:
                    require return_data.size >= 32
                    if not mem[452]:
                        revert with 0, 
                                    32,
                                    42,
                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[ceil32(return_data.size) + 531 len 22]
                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                    revert with 0, 'SafeMath: addition overflow'
                userInfo[0][msg.sender].field_0 += arg1
                if not userInfo[0][msg.sender].field_0:
                    userInfo[0][msg.sender].field_256 = 0
                else:
                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                        revert with 0, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[ceil32(return_data.size) + 522 len 31]
                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
    else:
        require ext_code.size(address(poolInfo.field_0))
        staticcall address(poolInfo.field_0).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            uint256(poolInfo.field_512) = block.number
            if not userInfo[0][msg.sender].field_0:
                if not arg1:
                    if not userInfo[0][msg.sender].field_0:
                        userInfo[0][msg.sender].field_256 = 0
                    else:
                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                else:
                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                        revert with 0, 'Address: call to non-contract'
                    if not ext_code.hash(address(poolInfo.field_0)):
                        revert with 0, 'Address: call to non-contract'
                    mem[292 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                    mem[416 len 4] = 0
                    call address(poolInfo.field_0) with:
                         gas gas_remaining wei
                        args Mask(224, 32, arg1) << 480, mem[388 len 4]
                    if not return_data.size:
                        if not ext_call.success:
                            revert with unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1
                        if not unknown_0x23b872dd(?????), Mask(224, 32, msg.sender) >> 32:
                            revert with 0, 
                                        32,
                                        42,
                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                        mem[402 len 14],
                                        0,
                                        mem[420 len 4]
                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        userInfo[0][msg.sender].field_0 += arg1
                        if not userInfo[0][msg.sender].field_0:
                            userInfo[0][msg.sender].field_256 = 0
                        else:
                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[393 len 23], 0, mem[420 len 4]
                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                    else:
                        mem[324 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        if not ext_call.success:
                            if return_data.size:
                                revert with ext_call.return_data[0 len return_data.size]
                            revert with 0, 'SafeHRC20: low-level call failed'
                        if return_data.size:
                            require return_data.size >= 32
                            if not mem[324]:
                                revert with 0, 
                                            32,
                                            42,
                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                            mem[ceil32(return_data.size) + 403 len 22]
                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        userInfo[0][msg.sender].field_0 += arg1
                        if not userInfo[0][msg.sender].field_0:
                            userInfo[0][msg.sender].field_256 = 0
                        else:
                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                revert with 0, 
                                            32,
                                            33,
                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[ceil32(return_data.size) + 394 len 31]
                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
            else:
                if not userInfo[0][msg.sender].field_0:
                    if userInfo[0][msg.sender].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if -userInfo[0][msg.sender].field_256:
                        require ext_code.size(sub_39e1be0eAddress)
                        call sub_39e1be0eAddress.0xbefa3605 with:
                             gas gas_remaining wei
                            args msg.sender, -userInfo[0][msg.sender].field_256
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                else:
                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                        require ext_code.size(sub_39e1be0eAddress)
                        call sub_39e1be0eAddress.0xbefa3605 with:
                             gas gas_remaining wei
                            args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                if not arg1:
                    if not userInfo[0][msg.sender].field_0:
                        userInfo[0][msg.sender].field_256 = 0
                    else:
                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                else:
                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                        revert with 0, 'Address: call to non-contract'
                    if not ext_code.hash(address(poolInfo.field_0)):
                        revert with 0, 'Address: call to non-contract'
                    mem[420 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                    mem[544 len 4] = 0
                    call address(poolInfo.field_0) with:
                         gas gas_remaining wei
                        args Mask(224, 32, arg1) << 480, mem[516 len 4]
                    if not return_data.size:
                        require not ext_call.success
                        revert with 'SafeMath: division by zero'
                    mem[452 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeHRC20: low-level call failed'
                    if return_data.size:
                        require return_data.size >= 32
                        if not mem[452]:
                            revert with 0, 
                                        32,
                                        42,
                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                        mem[ceil32(return_data.size) + 531 len 22]
                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                        revert with 0, 'SafeMath: addition overflow'
                    userInfo[0][msg.sender].field_0 += arg1
                    if not userInfo[0][msg.sender].field_0:
                        userInfo[0][msg.sender].field_256 = 0
                    else:
                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                            revert with 0, 
                                        32,
                                        33,
                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[ceil32(return_data.size) + 522 len 31]
                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
        else:
            if uint256(poolInfo.field_512) > block.number:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.number - uint256(poolInfo.field_512):
                if not totalAllocPoint:
                    revert with 0, 'SafeMath: division by zero'
                if not 0 / totalAllocPoint:
                    if 0 > 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args teamAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args treasuryAddress, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_717559c3Address)
                    call sub_717559c3Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args sub_39e1be0eAddress, 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (0 / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                            revert with 0, 'SafeMath: addition overflow'
                        uint256(poolInfo.field_768) += 0 / ext_call.return_data[0]
                        uint256(poolInfo.field_512) = block.number
                        if not userInfo[0][msg.sender].field_0:
                            if not arg1:
                                if not userInfo[0][msg.sender].field_0:
                                    userInfo[0][msg.sender].field_256 = 0
                                else:
                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                if not ext_code.hash(address(poolInfo.field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                mem[736 len 4] = 0
                                call address(poolInfo.field_0) with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeHRC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    if not mem[644]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 723 len 22]
                                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[0][msg.sender].field_0 += arg1
                                if not userInfo[0][msg.sender].field_0:
                                    userInfo[0][msg.sender].field_256 = 0
                                else:
                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 714 len 31]
                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                        else:
                            if not userInfo[0][msg.sender].field_0:
                                if userInfo[0][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[0][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, -userInfo[0][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                if not arg1:
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                    mem[864 len 4] = 0
                                    call address(poolInfo.field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[0][msg.sender].field_0 += arg1
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[864 len 4] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[864 len 4] = 0
                                        mem[836 len 0] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                    else:
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                            revert with 0, 'SafeMath: addition overflow'
                        uint256(poolInfo.field_768) += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        uint256(poolInfo.field_512) = block.number
                        if not userInfo[0][msg.sender].field_0:
                            if not arg1:
                                if not userInfo[0][msg.sender].field_0:
                                    userInfo[0][msg.sender].field_256 = 0
                                else:
                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                if not ext_code.hash(address(poolInfo.field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                mem[736 len 4] = 0
                                call address(poolInfo.field_0) with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeHRC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    if not mem[644]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 723 len 22]
                                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[0][msg.sender].field_0 += arg1
                                if not userInfo[0][msg.sender].field_0:
                                    userInfo[0][msg.sender].field_256 = 0
                                else:
                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 714 len 31]
                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                        else:
                            if not userInfo[0][msg.sender].field_0:
                                if userInfo[0][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not -userInfo[0][msg.sender].field_256:
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[864 len 4] = 0
                                        mem[836 len 0] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, -userInfo[0][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[864 len 4] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[864 len 4] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[864 len 4] = 0
                                        mem[836 len 0] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                else:
                    if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    if 1000 * 0 / totalAllocPoint / 10650:
                        if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (0 / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                revert with 0, 'SafeMath: addition overflow'
                            uint256(poolInfo.field_768) += 0 / ext_call.return_data[0]
                        else:
                            if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                revert with 0, 'SafeMath: addition overflow'
                            uint256(poolInfo.field_768) += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                        uint256(poolInfo.field_512) = block.number
                        if not userInfo[0][msg.sender].field_0:
                            if not arg1:
                                if not userInfo[0][msg.sender].field_0:
                                    userInfo[0][msg.sender].field_256 = 0
                                else:
                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                if not ext_code.hash(address(poolInfo.field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                mem[736 len 4] = 0
                                call address(poolInfo.field_0) with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeHRC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    if not mem[644]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 723 len 22]
                                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[0][msg.sender].field_0 += arg1
                                if not userInfo[0][msg.sender].field_0:
                                    userInfo[0][msg.sender].field_256 = 0
                                else:
                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 714 len 31]
                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                        else:
                            if not userInfo[0][msg.sender].field_0:
                                if userInfo[0][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[0][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, -userInfo[0][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                    require ext_code.size(sub_39e1be0eAddress)
                                    call sub_39e1be0eAddress.0xbefa3605 with:
                                         gas gas_remaining wei
                                        args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            if not arg1:
                                if not userInfo[0][msg.sender].field_0:
                                    userInfo[0][msg.sender].field_256 = 0
                                else:
                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                if not ext_code.hash(address(poolInfo.field_0)):
                                    revert with 0, 'Address: call to non-contract'
                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                mem[864 len 4] = 0
                                call address(poolInfo.field_0) with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeHRC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    if not mem[772]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 851 len 22]
                                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[0][msg.sender].field_0 += arg1
                                if not userInfo[0][msg.sender].field_0:
                                    userInfo[0][msg.sender].field_256 = 0
                                else:
                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 842 len 31]
                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                    else:
                        if 0 > 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args sub_39e1be0eAddress, 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (0 / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                revert with 0, 'SafeMath: addition overflow'
                            uint256(poolInfo.field_768) += 0 / ext_call.return_data[0]
                            uint256(poolInfo.field_512) = block.number
                            if not userInfo[0][msg.sender].field_0:
                                if not arg1:
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                    mem[736 len 4] = 0
                                    call address(poolInfo.field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[0][msg.sender].field_0 += arg1
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if not userInfo[0][msg.sender].field_0:
                                    if userInfo[0][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[0][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[0][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                if not arg1:
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                    mem[864 len 4] = 0
                                    call address(poolInfo.field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[0][msg.sender].field_0 += arg1
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                        else:
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                revert with 0, 'SafeMath: addition overflow'
                            uint256(poolInfo.field_768) += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            uint256(poolInfo.field_512) = block.number
                            if not userInfo[0][msg.sender].field_0:
                                if not arg1:
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                    mem[736 len 4] = 0
                                    mem[708 len 0] = 0
                                    call address(poolInfo.field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[0][msg.sender].field_0 += arg1
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if not userInfo[0][msg.sender].field_0:
                                    if userInfo[0][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[0][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[0][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[864 len 4] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[864 len 4] = 0
                                        mem[836 len 0] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
            else:
                if (block.number * bonusMultiplier) - (uint256(poolInfo.field_512) * bonusMultiplier) / block.number - uint256(poolInfo.field_512) != bonusMultiplier:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if not (block.number * bonusMultiplier) - (uint256(poolInfo.field_512) * bonusMultiplier):
                    if not totalAllocPoint:
                        revert with 0, 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint:
                        if 0 > 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args teamAddress, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args treasuryAddress, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_717559c3Address)
                        call sub_717559c3Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args sub_39e1be0eAddress, 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (0 / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                revert with 0, 'SafeMath: addition overflow'
                            uint256(poolInfo.field_768) += 0 / ext_call.return_data[0]
                            uint256(poolInfo.field_512) = block.number
                            if not userInfo[0][msg.sender].field_0:
                                if not arg1:
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                    mem[736 len 4] = 0
                                    call address(poolInfo.field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[0][msg.sender].field_0 += arg1
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if not userInfo[0][msg.sender].field_0:
                                    if userInfo[0][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[0][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[0][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                if not arg1:
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                    mem[864 len 4] = 0
                                    call address(poolInfo.field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[0][msg.sender].field_0 += arg1
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                        else:
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                revert with 0, 'SafeMath: addition overflow'
                            uint256(poolInfo.field_768) += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            uint256(poolInfo.field_512) = block.number
                            if not userInfo[0][msg.sender].field_0:
                                if not arg1:
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                    mem[736 len 4] = 0
                                    mem[708 len 0] = 0
                                    call address(poolInfo.field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[0][msg.sender].field_0 += arg1
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if not userInfo[0][msg.sender].field_0:
                                    if userInfo[0][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not -userInfo[0][msg.sender].field_256:
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[0][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[864 len 4] = 0
                                            mem[836 len 0] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[864 len 4] = 0
                                            mem[836 len 0] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                    else:
                        if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        if 1000 * 0 / totalAllocPoint / 10650:
                            if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                            if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                    revert with 0, 'SafeMath: addition overflow'
                                uint256(poolInfo.field_768) += 0 / ext_call.return_data[0]
                                uint256(poolInfo.field_512) = block.number
                                if not userInfo[0][msg.sender].field_0:
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[736 len 4] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if not userInfo[0][msg.sender].field_0:
                                        if userInfo[0][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[0][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[0][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[864 len 4] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                    revert with 0, 'SafeMath: addition overflow'
                                uint256(poolInfo.field_768) += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                                uint256(poolInfo.field_512) = block.number
                                if not userInfo[0][msg.sender].field_0:
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[736 len 4] = 0
                                        mem[708 len 0] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if not userInfo[0][msg.sender].field_0:
                                        if userInfo[0][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[0][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[0][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[864 len 4] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                        else:
                            if 0 > 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                    revert with 0, 'SafeMath: addition overflow'
                                uint256(poolInfo.field_768) += 0 / ext_call.return_data[0]
                                uint256(poolInfo.field_512) = block.number
                                if not userInfo[0][msg.sender].field_0:
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[736 len 4] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if not userInfo[0][msg.sender].field_0:
                                        if userInfo[0][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[0][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[0][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[864 len 4] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                    revert with 0, 'SafeMath: addition overflow'
                                uint256(poolInfo.field_768) += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                uint256(poolInfo.field_512) = block.number
                                if not userInfo[0][msg.sender].field_0:
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[736 len 4] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if not userInfo[0][msg.sender].field_0:
                                        if userInfo[0][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[0][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[0][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                            if not arg1:
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                mem[864 len 4] = 0
                                                call address(poolInfo.field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[0][msg.sender].field_0 += arg1
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not arg1:
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                                call address(poolInfo.field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[0][msg.sender].field_0 += arg1
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                else:
                    if (block.number * bonusMultiplier * sub_e5f6e9c9) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9) / (block.number * bonusMultiplier) - (uint256(poolInfo.field_512) * bonusMultiplier) != sub_e5f6e9c9:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if (block.number * bonusMultiplier * sub_e5f6e9c9) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9):
                        if (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / (block.number * bonusMultiplier * sub_e5f6e9c9) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9) != uint256(poolInfo.field_256):
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        if not totalAllocPoint:
                            revert with 0, 'SafeMath: division by zero'
                        if not (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint:
                            if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                    revert with 0, 'SafeMath: addition overflow'
                                uint256(poolInfo.field_768) += 0 / ext_call.return_data[0]
                                uint256(poolInfo.field_512) = block.number
                                if not userInfo[0][msg.sender].field_0:
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[736 len 4] = 0
                                        mem[708 len 0] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if userInfo[0][msg.sender].field_0:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if userInfo[0][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not -userInfo[0][msg.sender].field_256:
                                            if not arg1:
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                mem[864 len 4] = 0
                                                call address(poolInfo.field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[0][msg.sender].field_0 += arg1
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[0][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not arg1:
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                                call address(poolInfo.field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[0][msg.sender].field_0 += arg1
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                    revert with 0, 'SafeMath: addition overflow'
                                uint256(poolInfo.field_768) += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / ext_call.return_data[0]
                                uint256(poolInfo.field_512) = block.number
                                if not userInfo[0][msg.sender].field_0:
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[736 len 4] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if not userInfo[0][msg.sender].field_0:
                                        if userInfo[0][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[0][msg.sender].field_256:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[0][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                            if not arg1:
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                mem[864 len 4] = 0
                                                call address(poolInfo.field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[0][msg.sender].field_0 += arg1
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            require ext_code.size(sub_39e1be0eAddress)
                                            call sub_39e1be0eAddress.0xbefa3605 with:
                                                 gas gas_remaining wei
                                                args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not arg1:
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                                call address(poolInfo.field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[0][msg.sender].field_0 += arg1
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                        else:
                            if 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint != 1000:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            if not 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650:
                                if 0 > (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                        revert with 0, 'SafeMath: addition overflow'
                                    uint256(poolInfo.field_768) += 0 / ext_call.return_data[0]
                                    uint256(poolInfo.field_512) = block.number
                                    if not userInfo[0][msg.sender].field_0:
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[736 len 4] = 0
                                            mem[708 len 0] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if not userInfo[0][msg.sender].field_0:
                                            if userInfo[0][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[0][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                        revert with 0, 'SafeMath: addition overflow'
                                    uint256(poolInfo.field_768) += 10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / ext_call.return_data[0]
                                    uint256(poolInfo.field_512) = block.number
                                    if not userInfo[0][msg.sender].field_0:
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[736 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if not userInfo[0][msg.sender].field_0:
                                            if userInfo[0][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[0][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650 / 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650 != 2:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650 > (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, ((block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not ((block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650):
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                        revert with 0, 'SafeMath: addition overflow'
                                    uint256(poolInfo.field_768) += 0 / ext_call.return_data[0]
                                    uint256(poolInfo.field_512) = block.number
                                    if not userInfo[0][msg.sender].field_0:
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[736 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if userInfo[0][msg.sender].field_0:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            if not arg1:
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                mem[864 len 4] = 0
                                                call address(poolInfo.field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[0][msg.sender].field_0 += arg1
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if userInfo[0][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not -userInfo[0][msg.sender].field_256:
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    mem[836 len 0] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650) / ((block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint) - (2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650) != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if ((10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650) / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                        revert with 0, 'SafeMath: addition overflow'
                                    uint256(poolInfo.field_768) += (10^12 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint) - (10^12 * 2 * 1000 * (block.number * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) - (uint256(poolInfo.field_512) * bonusMultiplier * sub_e5f6e9c9 * uint256(poolInfo.field_256)) / totalAllocPoint / 10650) / ext_call.return_data[0]
                                    uint256(poolInfo.field_512) = block.number
                                    if not userInfo[0][msg.sender].field_0:
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[736 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if not userInfo[0][msg.sender].field_0:
                                            if userInfo[0][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[0][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            if not arg1:
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                mem[864 len 4] = 0
                                                call address(poolInfo.field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[0][msg.sender].field_0 += arg1
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    mem[836 len 0] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                    else:
                        if not totalAllocPoint:
                            revert with 0, 'SafeMath: division by zero'
                        if not 0 / totalAllocPoint:
                            if 0 > 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args teamAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args treasuryAddress, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(sub_717559c3Address)
                            call sub_717559c3Address.0x40c10f19 with:
                                 gas gas_remaining wei
                                args sub_39e1be0eAddress, 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                    revert with 0, 'SafeMath: addition overflow'
                                uint256(poolInfo.field_768) += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                    revert with 0, 'SafeMath: addition overflow'
                                uint256(poolInfo.field_768) += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            uint256(poolInfo.field_512) = block.number
                            if not userInfo[0][msg.sender].field_0:
                                if not arg1:
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    if not ext_code.hash(address(poolInfo.field_0)):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                    mem[736 len 4] = 0
                                    call address(poolInfo.field_0) with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeHRC20: low-level call failed'
                                    if return_data.size:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[0][msg.sender].field_0 += arg1
                                    if not userInfo[0][msg.sender].field_0:
                                        userInfo[0][msg.sender].field_256 = 0
                                    else:
                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if userInfo[0][msg.sender].field_0:
                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[864 len 4] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if userInfo[0][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[0][msg.sender].field_256:
                                        require ext_code.size(sub_39e1be0eAddress)
                                        call sub_39e1be0eAddress.0xbefa3605 with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[0][msg.sender].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                    if not arg1:
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        if not ext_code.hash(address(poolInfo.field_0)):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                        mem[864 len 4] = 0
                                        mem[836 len 0] = 0
                                        call address(poolInfo.field_0) with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeHRC20: low-level call failed'
                                        if return_data.size:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[0][msg.sender].field_0 += arg1
                                        if not userInfo[0][msg.sender].field_0:
                                            userInfo[0][msg.sender].field_256 = 0
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                        else:
                            if 1000 * 0 / totalAllocPoint / 0 / totalAllocPoint != 1000:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            if not 1000 * 0 / totalAllocPoint / 10650:
                                if 0 > 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                        revert with 0, 'SafeMath: addition overflow'
                                    uint256(poolInfo.field_768) += 0 / ext_call.return_data[0]
                                    uint256(poolInfo.field_512) = block.number
                                    if not userInfo[0][msg.sender].field_0:
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[736 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if not userInfo[0][msg.sender].field_0:
                                            if userInfo[0][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[0][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[864 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[772]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 851 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 842 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                        revert with 0, 'SafeMath: addition overflow'
                                    uint256(poolInfo.field_768) += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    uint256(poolInfo.field_512) = block.number
                                    if not userInfo[0][msg.sender].field_0:
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[736 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if not userInfo[0][msg.sender].field_0:
                                            if userInfo[0][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not -userInfo[0][msg.sender].field_256:
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    mem[836 len 0] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    mem[836 len 0] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                            else:
                                if 2 * 1000 * 0 / totalAllocPoint / 10650 / 1000 * 0 / totalAllocPoint / 10650 != 2:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if 2 * 1000 * 0 / totalAllocPoint / 10650 > 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args teamAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args treasuryAddress, 1000 * 0 / totalAllocPoint / 10650
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(sub_717559c3Address)
                                call sub_717559c3Address.0x40c10f19 with:
                                     gas gas_remaining wei
                                    args sub_39e1be0eAddress, (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650):
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                        revert with 0, 'SafeMath: addition overflow'
                                    uint256(poolInfo.field_768) += 0 / ext_call.return_data[0]
                                    uint256(poolInfo.field_512) = block.number
                                    if not userInfo[0][msg.sender].field_0:
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[736 len 4] = 0
                                            mem[708 len 0] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if not userInfo[0][msg.sender].field_0:
                                            if userInfo[0][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not -userInfo[0][msg.sender].field_256:
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    mem[836 len 0] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    mem[836 len 0] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                else:
                                    if (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / (0 / totalAllocPoint) - (2 * 1000 * 0 / totalAllocPoint / 10650) != 10^12:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    if ((10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]) + uint256(poolInfo.field_768) < uint256(poolInfo.field_768):
                                        revert with 0, 'SafeMath: addition overflow'
                                    uint256(poolInfo.field_768) += (10^12 * 0 / totalAllocPoint) - (10^12 * 2 * 1000 * 0 / totalAllocPoint / 10650) / ext_call.return_data[0]
                                    uint256(poolInfo.field_512) = block.number
                                    if not userInfo[0][msg.sender].field_0:
                                        if not arg1:
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            if not ext_code.hash(address(poolInfo.field_0)):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                            mem[736 len 4] = 0
                                            call address(poolInfo.field_0) with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg1) << 480, mem[708 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeHRC20: low-level call failed'
                                            if return_data.size:
                                                require return_data.size >= 32
                                                if not mem[644]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 723 len 22]
                                            if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[0][msg.sender].field_0 += arg1
                                            if not userInfo[0][msg.sender].field_0:
                                                userInfo[0][msg.sender].field_256 = 0
                                            else:
                                                if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 714 len 31]
                                                userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                    else:
                                        if not userInfo[0][msg.sender].field_0:
                                            if userInfo[0][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[0][msg.sender].field_256:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                            if not arg1:
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                if not ext_code.hash(address(poolInfo.field_0)):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                mem[864 len 4] = 0
                                                call address(poolInfo.field_0) with:
                                                     gas gas_remaining wei
                                                    args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                if not return_data.size:
                                                    require not ext_call.success
                                                    revert with 'SafeMath: subtraction overflow'
                                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    if return_data.size:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    revert with 0, 'SafeHRC20: low-level call failed'
                                                if return_data.size:
                                                    require return_data.size >= 32
                                                    if not mem[772]:
                                                        revert with 0, 
                                                                    32,
                                                                    42,
                                                                    0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                    mem[ceil32(return_data.size) + 851 len 22]
                                                if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userInfo[0][msg.sender].field_0 += arg1
                                                if not userInfo[0][msg.sender].field_0:
                                                    userInfo[0][msg.sender].field_256 = 0
                                                else:
                                                    if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                        revert with 0, 
                                                                    32,
                                                                    33,
                                                                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[ceil32(return_data.size) + 842 len 31]
                                                    userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                        else:
                                            if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[0][msg.sender].field_256 > uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256:
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                            else:
                                                require ext_code.size(sub_39e1be0eAddress)
                                                call sub_39e1be0eAddress.0xbefa3605 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12) - userInfo[0][msg.sender].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not arg1:
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
                                                else:
                                                    if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    if not ext_code.hash(address(poolInfo.field_0)):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg1) >> 32
                                                    mem[864 len 4] = 0
                                                    mem[836 len 0] = 0
                                                    call address(poolInfo.field_0) with:
                                                         gas gas_remaining wei
                                                        args Mask(224, 32, arg1) << 480, mem[836 len 4]
                                                    if not return_data.size:
                                                        require not ext_call.success
                                                        revert with 'SafeMath: subtraction overflow'
                                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        if return_data.size:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        revert with 0, 'SafeHRC20: low-level call failed'
                                                    if return_data.size:
                                                        require return_data.size >= 32
                                                        if not mem[772]:
                                                            revert with 0, 
                                                                        32,
                                                                        42,
                                                                        0x725361666548524332303a204852433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                        mem[ceil32(return_data.size) + 851 len 22]
                                                    if arg1 + userInfo[0][msg.sender].field_0 < userInfo[0][msg.sender].field_0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    userInfo[0][msg.sender].field_0 += arg1
                                                    if not userInfo[0][msg.sender].field_0:
                                                        userInfo[0][msg.sender].field_256 = 0
                                                    else:
                                                        if uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / userInfo[0][msg.sender].field_0 != uint256(poolInfo.field_768):
                                                            revert with 0, 
                                                                        32,
                                                                        33,
                                                                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[ceil32(return_data.size) + 842 len 31]
                                                        userInfo[0][msg.sender].field_256 = uint256(poolInfo.field_768) * userInfo[0][msg.sender].field_0 / 10^12
    require ext_code.size(sub_39e1be0eAddress)
    call sub_39e1be0eAddress.0x40c10f19 with:
         gas gas_remaining wei
        args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    emit Deposit(arg1, msg.sender, 0);
    stor1 = 1
}



}
